<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>互联网之子 - Aaron Swartz</title>
    <url>/movies/The-Story-of-Aaron-Swartz.html</url>
    <content><![CDATA[<iframe src="//player.bilibili.com/player.html?aid=16549975&bvid=BV1rx411V75r&cid=26994578&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>

]]></content>
      <categories>
        <category>movies</category>
      </categories>
      <tags>
        <tag>纪录片</tag>
        <tag>互联网</tag>
        <tag>自由</tag>
      </tags>
  </entry>
  <entry>
    <title>【城市介绍】清远</title>
    <url>/geography/city-china-qingyuan.html</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>geography</category>
      </categories>
      <tags>
        <tag>地理</tag>
        <tag>城市</tag>
      </tags>
  </entry>
  <entry>
    <title>纪录片《Code Rush》代码奔腾</title>
    <url>/movies/code-rush.html</url>
    <content><![CDATA[<p>《Code Rush》是 David Winton 导演于 1998 年至 2000 年间拍摄的纪录片，记录了硅谷的 Netscape 工程师们将浏览器源代码开源，成立 Mozilla 项目的经历；同时 Netscape 也正经历被 AOL 并购的过程。本片描绘了 Netscape 的工程师们，牺牲日常生活与家庭，努力防止他们的公司倒闭的经历。</p>
<iframe src="//player.bilibili.com/player.html?aid=15989846&bvid=BV1rx411E7oW&cid=26090372&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>

<blockquote>
<p>从1998年3月到1999年4月，一个独立纪录片摄制组跟随着网景公司的一个软件工程师团队，记录了他们公司和互联网历史上的分水岭。</p>
</blockquote>
<p>这部纪录片详实地记录了软件工程师的生活、对写代码的热情与执着、硅谷的淘金梦、投资银行家的贪婪，以及 2000 年当时尚未破灭的互联网泡沫。虽然我们没有经历那个年代，哪怕只是过去了 20 多年，对我们来说却十分陌生。强烈推荐大家观看该影片，也许能激起你对科技行业的热情，成为这个时代的爆肝工程师。</p>
]]></content>
      <categories>
        <category>movies</category>
      </categories>
      <tags>
        <tag>纪录片</tag>
        <tag>互联网</tag>
      </tags>
  </entry>
  <entry>
    <title>英语单词辨析：Diary vs. Journal</title>
    <url>/english/en-diary-vs-journal.html</url>
    <content><![CDATA[<blockquote>
<p>I was supposed to keep a journal all summer. It s due today.</p>
</blockquote>
<p>这里的 keep a journal 是“记日记”的意思，journal 所表示的日记和 diary 稍有不同。Journal 可以记录事情、感受，是可以给别人看的那种，而 Diary 更偏重于记录个人的事情、感受，一般只有自己看，别人不给看的。</p>
<p>比如，某天参观了某地的博物馆，很有感触，于是写了一篇游记跟大家分享，就叫 journal。而在日记本上记录自己的小心思，比如喜欢谁谁谁的那种，就叫 diary。</p>
<p>简单来说，可以给别人看的叫 journal，不能给别人看的叫 diary；偶尔记录的叫 journal，经常记录的叫 diary。</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="http://www.ifuun.com/a20177193989575/">http://www.ifuun.com/a20177193989575/</a></li>
<li><a href="https://www.trackinghappiness.com/diary-vs-journal-whats-the-difference/">https://www.trackinghappiness.com/diary-vs-journal-whats-the-difference/</a></li>
</ul>
]]></content>
      <categories>
        <category>english</category>
      </categories>
      <tags>
        <tag>英语</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>英语单词辨析：Home vs. House</title>
    <url>/english/en-home-vs-house.html</url>
    <content><![CDATA[<p>House 的中文意思更接近「房子」，而 Home 的中文意思更接近「家」。</p>
<ul>
<li>House 是一栋建筑物，这栋建筑物是给人住的，而即便里面没有住人，只是个空屋，你也可以说它是 house。</li>
<li>Home 则是家，意味着有人住。当你说某个地方是你的 home 时，通常代表你对那个地方感到舒适和安全。另外，Home 有时候还可以用来形容城市、小镇，甚至是国家。</li>
</ul>
<p>例句：</p>
<blockquote>
<p>What is home to you?</p>
</blockquote>
<blockquote>
<p>china is my home.</p>
</blockquote>
<blockquote>
<p>I have a house in China.</p>
</blockquote>
<blockquote>
<p>How much does a house cost in China?</p>
</blockquote>
]]></content>
      <categories>
        <category>english</category>
      </categories>
      <tags>
        <tag>英语</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>en-image-vs-figure-vs-picture</title>
    <url>/english/en-image-vs-figure-vs-picture.html</url>
    <content><![CDATA[<ul>
<li>Figure</li>
<li>Image</li>
<li>Picture</li>
</ul>
]]></content>
      <categories>
        <category>english</category>
      </categories>
      <tags>
        <tag>英语</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>英语单词辨析：Setting vs. Configuration</title>
    <url>/english/en-setting-vs-configuration.html</url>
    <content><![CDATA[<p>Setting 一般指设置，Configuration 一般指配置。两者的意思很接近，Setting 更偏向于给用户或运维人员使用的设定，而 Configuration 更偏向于给开发人员使用的设定，例如软件开发中用来避免一些 Hard Code 的可参数化的设定。</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://wikidiff.com/configuration/setting">https://wikidiff.com/configuration/setting</a></li>
</ul>
]]></content>
      <categories>
        <category>english</category>
      </categories>
      <tags>
        <tag>英语</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>en-state-vs-status</title>
    <url>/english/en-state-vs-status.html</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>english</category>
      </categories>
      <tags>
        <tag>英语</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>英语单词辨析：Update vs. Upgrade</title>
    <url>/english/en-update-vs-upgrade.html</url>
    <content><![CDATA[<p>“update”表示“更新电子设备的系统、软件”，指“通过添加新的信息使…变得更现代化，更适合当下”。</p>
<p>例句：</p>
<blockquote>
<p>To continue using the software, you have to update it to the latest version.<br>为了能继续使用这个软件，你需要把它升级到最新的版本。</p>
</blockquote>
<p>而 upgrade 则表示“给电子设备升级、更新换代”，不仅仅是简单的软件更新，而是强调“改善、提升产品的性能，使其更加高效”，尤指“给硬件升级”。</p>
<p>例句：</p>
<blockquote>
<p>I really need to upgrade my laptop. I bought it over five years ago and most of the current applications aren’t compatible with its system.<br>我真的得给电脑升级换代了。这是我五年前买的，现在大多数的应用程序都没法和这台电脑兼容了。</p>
</blockquote>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://www.bbc.co.uk/learningenglish/chinese/features/q-and-a/ep-180207">https://www.bbc.co.uk/learningenglish/chinese/features/q-and-a/ep-180207</a></li>
</ul>
]]></content>
      <categories>
        <category>english</category>
      </categories>
      <tags>
        <tag>英语</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>与时间相关的英语词汇</title>
    <url>/english/en-words-about-time.html</url>
    <content><![CDATA[<h2 id="星期（Days-of-the-Week）"><a href="#星期（Days-of-the-Week）" class="headerlink" title="星期（Days of the Week）"></a>星期（Days of the Week）</h2><table>
<thead>
<tr>
<th>单词</th>
<th>缩写</th>
<th>中文</th>
</tr>
</thead>
<tbody><tr>
<td>Monday</td>
<td>Mon.</td>
<td>星期一</td>
</tr>
<tr>
<td>Tuesday</td>
<td>Tue.</td>
<td>星期二</td>
</tr>
<tr>
<td>Wednesday</td>
<td>Wed.</td>
<td>星期三</td>
</tr>
<tr>
<td>Thursday</td>
<td>Thu.</td>
<td>星期四</td>
</tr>
<tr>
<td>Friday</td>
<td>Fri.</td>
<td>星期五</td>
</tr>
<tr>
<td>Saturday</td>
<td>Sat.</td>
<td>星期六</td>
</tr>
<tr>
<td>Sunday</td>
<td>Sun.</td>
<td>星期日</td>
</tr>
</tbody></table>
<h2 id="月份（Months）"><a href="#月份（Months）" class="headerlink" title="月份（Months）"></a>月份（Months）</h2><table>
<thead>
<tr>
<th>月份</th>
<th>缩写</th>
<th>中文</th>
</tr>
</thead>
<tbody><tr>
<td>January</td>
<td>Jan.</td>
<td>一月</td>
</tr>
<tr>
<td>February</td>
<td>Feb.</td>
<td>二月</td>
</tr>
<tr>
<td>March</td>
<td>Mar.</td>
<td>三月</td>
</tr>
<tr>
<td>April</td>
<td>Apr.</td>
<td>四月</td>
</tr>
<tr>
<td>May</td>
<td>May.</td>
<td>五月</td>
</tr>
<tr>
<td>June</td>
<td>Jun.</td>
<td>六月</td>
</tr>
<tr>
<td>July</td>
<td>Jul.</td>
<td>七月</td>
</tr>
<tr>
<td>August</td>
<td>Aug.</td>
<td>八月</td>
</tr>
<tr>
<td>September</td>
<td>Sep. / Sept.</td>
<td>九月</td>
</tr>
<tr>
<td>October</td>
<td>Oct.</td>
<td>十月</td>
</tr>
<tr>
<td>November</td>
<td>Nov.</td>
<td>十一月</td>
</tr>
<tr>
<td>December</td>
<td>Dec.</td>
<td>十二月</td>
</tr>
</tbody></table>
<h2 id="季节（Seasons）"><a href="#季节（Seasons）" class="headerlink" title="季节（Seasons）"></a>季节（Seasons）</h2><table>
<thead>
<tr>
<th>季节</th>
<th>缩写</th>
<th>中文</th>
</tr>
</thead>
<tbody><tr>
<td>Spring</td>
<td>SS（春夏）</td>
<td>春季</td>
</tr>
<tr>
<td>Summer</td>
<td>SS（春夏）</td>
<td>夏季</td>
</tr>
<tr>
<td>Winter</td>
<td>FW（秋冬）</td>
<td>秋季</td>
</tr>
<tr>
<td>Fall / Autumn</td>
<td>FW（秋冬）</td>
<td>冬季</td>
</tr>
</tbody></table>
<h2 id="时间表达（Expressions-of-Time）"><a href="#时间表达（Expressions-of-Time）" class="headerlink" title="时间表达（Expressions of Time）"></a>时间表达（Expressions of Time）</h2><table>
<thead>
<tr>
<th>英文</th>
<th>中文</th>
</tr>
</thead>
<tbody><tr>
<td>in the morning</td>
<td>在早上</td>
</tr>
<tr>
<td>last night</td>
<td>昨晚</td>
</tr>
<tr>
<td>next year</td>
<td>明年</td>
</tr>
<tr>
<td>today</td>
<td>今日</td>
</tr>
<tr>
<td>at night</td>
<td>晚上</td>
</tr>
</tbody></table>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://www.aderalingua.com/zh/learn-english/course/2/lesson/35">https://www.aderalingua.com/zh/learn-english/course/2/lesson/35</a></li>
</ul>
]]></content>
      <categories>
        <category>english</category>
      </categories>
      <tags>
        <tag>英语</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>平淡生活里的琐碎幸福</title>
    <url>/journal/happiness-in-ordinary-life.html</url>
    <content><![CDATA[<p>最近在尝试双城生活，因为听说北欧民众幸福感强的一个原因是他们普遍拥有双城生活，工作时在较为方便的繁华都市，休闲时则远离城市喧嚣。在两种截然不同的环境中切换，能够让自己的世界变得开阔，要是总在一个地方待着，生活难免会变得枯燥。</p>
<img src="/images/diary/2021-08-30_road.jpeg" style="zoom:30%;" />

<p>周一，虽然前一晚又晚睡了，但早上还是早早醒来，简单地吃了个早饭，然后准备前往高铁站。高铁站离我住的地方很近，十分钟车程就到了。嘻嘻~ 没有迟到，这是一次优雅的乘车体验。明媚的阳光透过玻璃洒满了整个车厢，让人变得温暖起来，让我不禁想说一句：“早上好”！</p>
<img src="/images/diary/2021-08-30_railway.jpeg" style="zoom:30%;" />

<p>很快，就到了广州。不过，今天的目的地不是公司，而是诊所，因为今天要做一次术后半年的复诊。得益于诊疗技术的提升和这半年来的呵护，康复情况不错。医生说：“你还很年轻，术后恢复较快，血流改道很成功，大隐静脉保住了！” 自己的身体自己最了解，虽然复诊结果是意料之中的，但还是按耐不住内心的激动 —— Yeah，我还可以为祖国健康工作五十年。虽然这些年饱受静脉曲张和神经性皮炎的困扰，但还是要感谢它们，让我对痛苦有了超强的忍耐力，这是成长路上重要的一环。</p>
<img src="/images/diary/2021-08-30_clinic.jpeg" style="zoom:30%;" />

<p>短暂的欢愉背后，是漫长一生的步步为营。人活一世，最后拼的都是健康，而好好吃饭，是人生最低成本的保险。于是，临近中午时分，我来到了附近一家蔬食餐厅。餐厅的特色是纯素的煲仔饭，“煲仔饭是广州的特色名菜，而纯素煲仔饭仅此一家” 老板自豪地说道。老板师从出家师父，潜心修炼，功夫不负有心人，经过多年研发，终于制作出一系列口感、味道极佳的纯素煲仔饭。我个人还是蛮喜欢的，尤其周末看了《The Game Changers》之后，vegan 的念头又在我心中重燃起来了，所以我现在正在学习素食营养搭配的知识。</p>
<img src="/images/diary/2021-08-30_lunch.jpeg" style="zoom:30%;" />

<p>最近这半年，我搬到了广州的最南端生活，因为我想每天都能看见大海，海阔天空能让人的心变宽，星辰大海能让人静下心来思考。偶尔站在窗边远眺，望着码头繁忙的景象，生活也燃起了熊熊斗志。</p>
<img src="/images/diary/2021-08-30_sea-02.jpeg" style="zoom:30%;" />

<p>小区有一个篮球场，不过人超少，刚搬过来的时候，哪怕是周末，通常也只有我一个人在练球。为了促进腿部血流改道，我把每天打球半小时列入了康复训练列表。这半年打球的天数可能比我过去五年还多，也重燃了我心中的体育梦。</p>
<img src="/images/diary/2021-08-30_basketball-01.jpeg" style="zoom:30%;" />

<p>后来慢慢地，找到了一起打球的小伙伴，甚至有了约定俗成的比赛日，而我也成了临时队长。如果说体育是生活的调节剂，能促进身心健康发展；那么篮球对我来说就是一种社交方式，能帮助融入当地社区，建立良好的人际关系。</p>
<img src="/images/diary/2021-08-30_basketball-03.jpeg" style="zoom:30%;" />

<p>由于地处南亚热带季风性海洋气候，加上小区地广人稀，到了夏天，果树就纷纷结出果实来，有莲雾、芒果、荔枝、李子、龙眼、菠萝蜜…… 惊喜之余，让人感受到大自然的神奇。这些水果不需要花钱买，只要你能摘到就可以吃，仿佛回到了原始社会。让人不禁思考：消费社会带给我们的便利，而为了维持这种便利，我们每天都要忙碌工作，这真的值得吗？</p>
<img src="/images/diary/2021-08-30_tree.jpeg" style="zoom:30%;" />

<p>说到工作，这半年在一家环保科技公司上班，参与了一款智能环保数采仪的设计，下个月就要在深圳宝安部署落地了。这是一个很经典的物联网应用场景，对我来说，能参与底层系统驱动和部分应用程序开发，不仅提升了物联网智能设备的设计能力，也加深了对环境监测领域的了解，从不同视角看待环保这件事。虽然本质上来说，它只是一家科技企业，恰巧从事环保设备研发而已，但却是我迈向身心对齐的重要一步。</p>
<img src="/images/diary/k37-device-framework.png" style="zoom:70%;" />

<p>不可否认，“环保”已经成为我生命中不可磨灭的一部分。作为一名重度环保强迫症患者，我平常会尽量控制自己，不流露出来。可又觉得很痛苦，美好的事情没有办法和身边的朋友分享，会带来一种强烈的挫败感和孤独感，这也是我接下来要着力解决的。</p>
<img src="/images/diary/2021-08-30_fruits.jpeg" style="zoom:30%;" />

<p>篮球场上经常被迫打4、5号位，时间一长，球风就变得比较硬朗，有一天晚上在练习投篮，可能是被我投篮时的压腕动作迷住了，队友竟和我说：“没想到 Captain 卢也有温柔的一面啊！？” 想想也是挺神奇的，不同阶段认识的朋友，对我的印象和评价会有十分巨大的差别。</p>
<p><img src="/images/diary/Shoot-a-Basketball-Step-11.png"></p>
<p>有的说我太瘦，有的说我强壮，有的说我文静，有的说我话痨，有的说我直爽，有的说我磨叽，有的说我内向，有的说我外向，有的说我随和，有的说我强势，还有的说我长得像女孩…… 想想也合理，人的成长是一个动态变化的过程，哪能用一两个标签所限定，只是力求在不同场合找到一种最适合自己的生存方式罢了。标签往往是是非善恶分明的，可世上的许多事却不是非黑即白的。</p>
<img src="/images/diary/2021-08-30_street.jpeg" style="zoom:40%;" />

<p>小时候总是很在意别人对自己的看法，后来又变得不在乎甚至我行我素了，其实这两种方式都不太好。不过，这也许是成长的必经过程吧，最近在学习接收别人的意见，学习更好地与人相处。希望自己不随波逐流、也不妄自菲薄，能够找到一种和自己、和他人相处都舒适的方式。更重要的是，达到身心对齐、内外一致，这样才能拥有一颗强大的内心去迎接未来的挑战。</p>
<p>人们常说，三十而立。可这只是孔夫子对自己人生的一段总结，并不足以证明三十立或不立对未来发展的必然影响。只要我们保持善良、保持学习、保持成长，年龄只是一个数字而已。每个人都有他的时区，用适合自己的方式认真做事就可以了，Great things take time！幸运的是，我找到了自己喜欢的事情，每天做一点点，慢一点，再慢一点。</p>
<img src="/images/diary/2021-08-30_sea-03.jpeg" style="zoom:30%;" />

<p>夏季的海风夹杂着淡淡的咸味，正如平淡的生活里也充满了琐碎的幸福。每一个小的善举，每一句鼓励的话语，都使我们坚定不移地走下去，让生活变得幸福一点，让世界变得美好一点。</p>
]]></content>
      <categories>
        <category>journal</category>
      </categories>
      <tags>
        <tag>成长</tag>
        <tag>幸福</tag>
      </tags>
  </entry>
  <entry>
    <title>为什么找不到灵魂伴侣</title>
    <url>/relationship/have-not-found-a-soulmate-yet.html</url>
    <content><![CDATA[<p>今天是大年初三，也是 2.14 情人节，希望有情人终成眷属~</p>
<blockquote>
<p>插画来自 IG：herta_burbe</p>
</blockquote>
<img src="/images/love_story/a001.jpg" style="zoom:50%;" />

<p>父母从小培养我，把我塑造成他们想要的样子。</p>
<img src="/images/love_story/a002.jpg" style="zoom:50%;" />

<p>我知道他们是为我好，所以我努力去达到他们的要求。可我还是我，没办法丢弃那些属于我的特质。我学会了伪装，甚至掩饰自己的内心，只有我才知道，真实的我是怎么样的。</p>
<img src="/images/love_story/a003.jpg" style="zoom:50%;" />

<p>有时候，我害怕受伤，我抱怨没人理解我，我把脆弱的那部分锁起来不让别人看见。</p>
<img src="/images/love_story/a004.jpg" style="zoom:50%;" />

<p>只有面对那浩瀚的大海，我才敢做自己，那么真实，那么自在！</p>
<img src="/images/love_story/b001.jpg" style="zoom:50%;" />

<p>家人朋友都催我早点结婚，他们说生活就是平平淡淡、简简单单，想太多只会徒增烦恼。（不过，他们简单的外表底下，没准还藏着一个复杂的内心，谁知道呢。）</p>
<img src="/images/love_story/b002.jpg" style="zoom:50%;" />

<p>有的人符合这个需求，有的人符合那个需求，可就是没有遇到完全契合的另一半。</p>
<img src="/images/love_story/b003.jpg" style="zoom:50%;" />

<p>有的人本身就足够完美，根本没必要读懂我。</p>
<img src="/images/love_story/b004.jpg" style="zoom:50%;" />

<p>有的人愿意接纳我、包容我，可又太贫瘠、太无趣。</p>
<img src="/images/love_story/c001.jpg" style="zoom:50%;" />

<p>好不容易遇到契合的人，却早已成为别人对象，而且他们看起来也挺好的。</p>
<img src="/images/love_story/c002.jpg" style="zoom:50%;" />

<p>我开始考虑要不要像别人一样，找个不那么契合的，慢慢磨合，说不定也挺好的。</p>
<p>可是当我看到他们为了配合另一方，改变自己，不惜把自己弄得遍体鳞伤。这真的值得吗？</p>
<img src="/images/love_story/c003.jpg" style="zoom:50%;" />

<p>一旦不想再改变了，或者不再能够满足对方的需求了，就会被无情地抛弃。</p>
<p>我不想，也不敢委屈自己，我害怕那些不好的事情会发生在我身上…… </p>
<img src="/images/love_story/d001.jpg" style="zoom:50%;" />

<p>我陷入了沉思，爱情是什么？婚姻又是什么？如果大家都变得不像自己，如果大家都难受，那还有意义吗？</p>
<img src="/images/love_story/d002.jpg" style="zoom:50%;" />

<p>孤单其实也没那么可怕，因为我已经能很好地和自己独处了呀~ 我不在乎别人的评价，那些别人看起来奇奇怪怪的特质，我知道它们一定会绽放绚丽的色彩，丰富我的生命。</p>
<img src="/images/love_story/d003.jpg" style="zoom:50%;" />

<p>我许了个愿，希望能早日找到那个合适的对象。</p>
<img src="/images/love_story/e001.jpg" style="zoom:50%;" />

<p>我问女神：怎么样才能像你这么完美？</p>
<p>女神回答：没有人生来就是完美的！完善自己，是你一生要完成的使命。</p>
<img src="/images/love_story/e002.jpg" style="zoom:50%;" />

<p>是啊！我们总是习惯向外索取，希望别人能填补我们的缺口，却忘了要努力做好自己，不断完善自己。</p>
<img src="/images/love_story/e003.jpg" style="zoom:50%;" />

<p>通过不断学习、培养兴趣，丰富自己的精神世界。</p>
<img src="/images/love_story/e005.jpg" style="zoom:50%;" />

<p>让自己成为一个懂得付出、充满爱的人。</p>
<img src="/images/love_story/f001.jpg" style="zoom:50%;" />

<p>虽然我在不断完善，但我偶尔还是会来到海边，跟真实的自己聊聊天，憧憬未来。</p>
<img src="/images/love_story/f002.jpg" style="zoom:50%;" />

<p>也许，那个契合的另一半，就在某个地方。和我一样，努力地完善自己，静静地等待着。</p>
<img src="/images/love_story/f004.jpg" style="zoom:50%;" />

<p>哪怕最后还是没有遇到，起码我已经在这场修行中完善了自己，不虚此行。</p>
<img src="/images/love_story/f003.jpg" style="zoom:50%;" />

<p>爱情的意义在于帮助对方提高，同时也提高自己。希望大家都能早日找到属于你的幸福~</p>
]]></content>
      <categories>
        <category>relationship</category>
      </categories>
      <tags>
        <tag>爱</tag>
      </tags>
  </entry>
  <entry>
    <title>「每日一问」你今天过得怎么样？</title>
    <url>/journal/how-are-you-today.html</url>
    <content><![CDATA[<p><img src="/images/rethink.jpeg"></p>
<blockquote class="blockquote-center">
<p>你今天过得怎么样？</p>
<p>你最近过得怎么样？</p>
<p>你这一生过得怎么样？</p>
<p>还行？</p>
<p>不，我想听到我说：“真棒，干得漂亮！”</p>

</blockquote>]]></content>
      <categories>
        <category>journal</category>
      </categories>
      <tags>
        <tag>成长</tag>
        <tag>修身</tag>
        <tag>奋斗</tag>
      </tags>
  </entry>
  <entry>
    <title>快速了解 Markdown 基础语法</title>
    <url>/markdown/markdown-basic-syntax.html</url>
    <content><![CDATA[<p><strong>【Markdown从入门到精通】</strong></p>
<p>语法规则是 Markdown 的核心，本节我们就来学习一下 Markdown 的基础语法，记不住不要紧，小伙伴们可以在用到的时候及时查阅，反复练习即可。用不了几天，你一定会掌握的！</p>
<p>在前面《<a href="https://luhuadong.blog.csdn.net/article/details/114465371">三分钟成为 Markdown 专家</a>》提到，目前有许多 Markdown-like language，还有一个提供无歧义语法规范的 CommonMark 项目。这就导致了各种存在差异的 Markdown 的语法，对初学者来说造成疑惑，比如在一个 Markdown 编辑器这么写没问题，换一个编辑器就不行了。</p>
<p>所以在学习 Markdown 语法之前，我们需要知道 Markdown 语法其实分为基础语法和扩展语法。<strong>基础语法</strong>基本上与 <a href="https://spec.commonmark.org/">CommonMark Spec</a> 一致（毕竟 CommonMark 还没成为真正的标准，只能说是参考标准，不过对于用户来说并没有什么影响，更多的影响在于对 Markdown 解释器的实现）。<strong>扩展语法</strong>则由不同的软件工具支持，包括 CommonMark 标准没有规定的上标、下标、高亮、删除线、任务列表、表格、块图等等，因此不同的 Markdown 编辑器可能会不一样。比较流行的扩展语法是 GFM（GitHub Flavored Markdown），即 Github 风格的 Markdown。</p>
<p>下面我们来看看 Markdown 的基础语法都有哪些？</p>
<h2 id="段落与换行"><a href="#段落与换行" class="headerlink" title="段落与换行"></a>段落与换行</h2><p>Markdown 语法中的段落由一行或多行文本组成，不同的段落之间使用空行来标记。（空行是 CommonMark Spec 规定的，但有些编辑器可能没有遵守，建议习惯性在段落间增加空行。）</p>
<p>语法说明：</p>
<ul>
<li>如果行与行之间没有空行，则会被视为同一段落；</li>
<li>如果行与行之间有空行，则会被视为不同段落；</li>
<li>空行是指行内什么都没有，或者只有空格和制表符；</li>
</ul>
<h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>Markdown 提供了两种标题风格：ATX headings 和 Setext headings。</p>
<h3 id="ATX-风格标题"><a href="#ATX-风格标题" class="headerlink" title="ATX 风格标题"></a>ATX 风格标题</h3><p>Markdown 语法中使用 # 号标记标题。支持六级标题：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 一级标题</span></span><br><span class="line"><span class="section">## 二级标题</span></span><br><span class="line"><span class="section">### 三级标题</span></span><br><span class="line"><span class="section">#### 四级标题</span></span><br><span class="line"><span class="section">##### 五级标题</span></span><br><span class="line"><span class="section">###### 六级标题</span></span><br></pre></td></tr></table></figure>

<p>语法说明：</p>
<ul>
<li>在行首插入 # 号即可将该行标记为标题；</li>
<li># 号的个数表示了标题的等级；</li>
<li>为提高兼容性，建议在 # 号后面加一个空格。</li>
</ul>
<h3 id="Setext-风格标题"><a href="#Setext-风格标题" class="headerlink" title="Setext 风格标题"></a>Setext 风格标题</h3><p>另外，还可以在标题下方添加 <code>=</code> 或 <code>-</code> 表示一级和二级标题。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">一级标题</span><br><span class="line">========</span><br><span class="line">二级标题</span><br><span class="line">--------</span><br></pre></td></tr></table></figure>

<p>语法说明：</p>
<ul>
<li>Setext 风格只支持 2 级标题；</li>
<li>底线的数量不限，但是为了避免歧义，建议使用连续三个符号；</li>
<li><code>===</code> 和 <code>---</code> 要紧跟在标题文字下方，不能有空行。</li>
</ul>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>Markdown 语法支持有序列表和无序列表。</p>
<ul>
<li>有序列表由“数字+英文句号+空格+列表内容”标记</li>
<li>无序列表由“星号/加号/减号+空格+列表内容”标记</li>
</ul>
<h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> 首先是...</span><br><span class="line"><span class="bullet">2.</span> 然后是...</span><br><span class="line"><span class="bullet">3.</span> 最后是...</span><br></pre></td></tr></table></figure>

<p>语法说明：</p>
<ul>
<li>数字后面紧跟英文句号，然后必须添加一个空格；</li>
<li>列表项之间可以不加空行。</li>
</ul>
<h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>无序列表支持使用星号 <code>*</code>、加号 <code>+</code>、减号 <code>-</code> 三种风格进行标记。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">*</span> 刘备</span><br><span class="line"><span class="bullet">*</span> 关羽</span><br><span class="line"><span class="bullet">*</span> 张飞</span><br></pre></td></tr></table></figure>

<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">+</span> 刘备</span><br><span class="line"><span class="bullet">+</span> 关羽</span><br><span class="line"><span class="bullet">+</span> 张飞</span><br></pre></td></tr></table></figure>

<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> 刘备</span><br><span class="line"><span class="bullet">-</span> 关羽</span><br><span class="line"><span class="bullet">-</span> 张飞</span><br></pre></td></tr></table></figure>

<p>语法说明：</p>
<ul>
<li>上面三种标记的结果是一样的，但是同一个列表需要使用同一种标记；</li>
<li><code>*</code>、<code>+</code>、<code>-</code> 后面必须添加一个空格。</li>
</ul>
<h3 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h3><p>列表支持嵌套，且有序列表和无序列表可以相互嵌套。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">+</span> 第一层列表</span><br><span class="line"><span class="bullet">    +</span> 第二层列表</span><br><span class="line"><span class="bullet">        +</span> 第三层列表</span><br><span class="line"><span class="bullet">    +</span> 第二层列表2</span><br><span class="line"><span class="bullet">        1.</span> A</span><br><span class="line"><span class="bullet">        2.</span> B</span><br></pre></td></tr></table></figure>

<p>语法说明：</p>
<ul>
<li>层与层之间使用 TAB 键缩进来标记；</li>
<li>列表之间不需要添加空行；</li>
<li>Markdown 标准没有对嵌套级数进行限定，但不宜过多（不美观）。</li>
</ul>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>单行引用</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="quote">&gt; 一分耕耘一分收获</span></span><br></pre></td></tr></table></figure>

<p>多行引用</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="quote">&gt; 一分耕耘一分收获</span></span><br><span class="line"><span class="quote">&gt; 是啊</span></span><br></pre></td></tr></table></figure>

<p>语法说明：</p>
<ul>
<li>段落前加小于号 <code>&gt;</code> 表示引用；</li>
<li><code>&gt;</code> 后面的空格不是必须的（个人感觉加上更美观）；</li>
<li>多行引用在每一行开头添加 <code>&gt;</code> 即可；</li>
<li>引用也可以嵌套；</li>
<li>引用里面可以添加标题、列表等内容。</li>
</ul>
<h2 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h2><p>分割线也有三种风格，分别是星号 <code>*</code>、减号 <code>-</code> 和下划线 <code>_</code>。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="strong">**<span class="emphasis">*</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">---</span></span></span><br><span class="line"><span class="strong"><span class="emphasis"><span class="strong">__<span class="emphasis">_</span></span></span></span></span><br></pre></td></tr></table></figure>

<p>语法说明：</p>
<ul>
<li>需要使用至少三个以上的同样的标记符；</li>
<li>行内不能有其他字符；</li>
<li>可以在标记符中间加上空格（为了避免歧义，不建议）</li>
<li>建议在分隔线上下插入空行（如果 <code>---</code> 上面有文字，会解析为标题）。</li>
</ul>
<h2 id="粗体和斜体"><a href="#粗体和斜体" class="headerlink" title="粗体和斜体"></a>粗体和斜体</h2><p>粗体使用两个星号 <code>**</code> 或两个下划线 <code>__</code> 包裹。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="strong">**Hello**</span></span><br><span class="line"><span class="strong">__World__</span></span><br></pre></td></tr></table></figure>

<p>斜体则使用一个星号 <code>*</code> 或一个下划线 <code>_</code> 包裹。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="emphasis">*Hello*</span></span><br><span class="line"><span class="emphasis">_World_</span></span><br></pre></td></tr></table></figure>



<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>Markdown 支持两种代码标记语法：行内代码和代码块。</p>
<h3 id="行内代码"><a href="#行内代码" class="headerlink" title="行内代码"></a>行内代码</h3><p>在行内引用一段代码，只需要使用反引号（TAB 键上面那个）进行包裹。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="code">`print(&quot;hello, world!&quot;)`</span></span><br></pre></td></tr></table></figure>



<h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><p>代码块使用三个反引号进行包裹，并且可以在第一行反引号后面添加编程语言名称，帮助 Markdown 解释器进行解析。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">​<span class="code">```python</span></span><br><span class="line"><span class="code">print(&quot;hello, world!&quot;)</span></span><br><span class="line"><span class="code">return</span></span><br><span class="line"><span class="code">​```</span></span><br></pre></td></tr></table></figure>



<h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![<span class="string">图片替代文字</span>](<span class="link">图片地址</span>)</span><br></pre></td></tr></table></figure>

<p>语法说明：</p>
<ul>
<li>“图片替代文字”中的内容是可选的，在图片无法正常加载时会显示该内容；</li>
<li>“图片地址”可以是本地图片，也可以是网络图片（URL）；</li>
<li>本地图片支持相对地址和绝对地址（为了便于打包和分享，建议使用相对地址）。</li>
</ul>
<p>示例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![<span class="string">本地图片</span>](<span class="link">images/20201124032511.png</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![<span class="string">网络图片</span>](<span class="link">https://img-home.csdnimg.cn/images/20201124032511.png</span>)</span><br></pre></td></tr></table></figure>



<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p>Markdown 支持多种链接语法，包括行内式链接、参考链接、自动链接。</p>
<h3 id="行内式链接"><a href="#行内式链接" class="headerlink" title="行内式链接"></a>行内式链接</h3><p>行内式链接是在行内需要进行链接标记的文字后面直接添加链接地址，使用方括号 <code>[]</code> 包裹链接文字，圆括号 <code>()</code> 包裹链接地址。格式如下：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">[<span class="string">链接文字</span>](<span class="link">链接地址 &quot;Title&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>语法说明：</p>
<ul>
<li>方括号和圆括号之间不能有空格；</li>
<li>Title 在链接地址后使用单引号或双引号括起来，是鼠标停留在链接时显示的文字，可以省略。</li>
</ul>
<p>示例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">[<span class="string">百度一下</span>](<span class="link">https://www.baidu.com/ &quot;点点看&quot;</span>)</span><br></pre></td></tr></table></figure>



<h3 id="参考式链接"><a href="#参考式链接" class="headerlink" title="参考式链接"></a>参考式链接</h3><p>与行内式链接不同，参考式链接将链接文字和链接地址分开，通过一个链接标记来匹配。语法格式如下：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">[<span class="string">链接文字</span>][<span class="symbol">链接标记</span>]</span><br><span class="line"></span><br><span class="line">[<span class="symbol">链接标记</span>]: <span class="link">链接地址 &quot;Title&quot;</span></span><br></pre></td></tr></table></figure>

<p>语法说明：</p>
<ul>
<li>链接标记可以是字母、数字、标点符号的组合；</li>
<li>链接标记不区分大小写；</li>
<li>链接内容（链接地址那行）可以放在当前文件的任意位置（通常放在末尾）；</li>
<li>Title 在链接地址后使用单引号或双引号括起来。</li>
</ul>
<p>示例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">[<span class="string">Markdown</span>][<span class="symbol">1</span>] 是一门轻量级标记语言。</span><br><span class="line"></span><br><span class="line">[<span class="symbol">1</span>]: <span class="link">https://zh.wikipedia.org/wiki/Markdown</span></span><br></pre></td></tr></table></figure>



<h3 id="自动链接"><a href="#自动链接" class="headerlink" title="自动链接"></a>自动链接</h3><p>如果想直接显示 URL 链接地址或邮箱地址，使用尖括号 <code>&lt;&gt;</code> 包裹起来就会自动转换为超链接。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">我的网站 <span class="xml"><span class="tag">&lt;<span class="name">https:</span>//<span class="attr">luhuadong.com</span>&gt;</span></span></span><br><span class="line">我的邮箱 <span class="xml"><span class="tag">&lt;<span class="name">luhuadong@163.com</span>&gt;</span></span></span><br></pre></td></tr></table></figure>



<h2 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h2><p>由于 Markdown 使用了一些符号作为标记，这时候如果想在文章中显示该字符，就需要使用反斜杠 <code>\</code> 进行转义了。</p>
<p>比如：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">显示星号 \<span class="emphasis">*</span></span><br><span class="line"><span class="emphasis">显示减号 \-</span></span><br><span class="line"><span class="emphasis">显示尖括号 \<span class="xml"><span class="tag">&lt; \&gt;</span></span></span></span><br><span class="line"><span class="emphasis">显示反斜杠 \\</span></span><br></pre></td></tr></table></figure>



<p>好啦，Markdown 的基础语法大概就是这些，是不是很简单？</p>
<p>把上述示例复制到你的 Markdown 编辑器中看看效果吧，下一节我们将介绍一些常见的 Markdown 的扩展语法。</p>
]]></content>
      <categories>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>盘点好用的 Markdown 编辑器</title>
    <url>/markdown/markdown-editor.html</url>
    <content><![CDATA[<p><strong>【Markdown从入门到精通】</strong></p>
<p>Markdown 是以文本形式保存的，基本上任何一款编辑器都可以完成 Markdown 写作（包括 Windows 的记事本、Linux 的 Vim 等等）。不过，如果你想更专注于写作，一款支持语法显示和实时渲染的工具能让你事半功倍！</p>
<p>下面列出的是我个人使用过一些 Markdown 编辑器，小伙伴们可以根据自己的需要安装使用。</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>特点</th>
<th>支持平台</th>
<th>费用</th>
</tr>
</thead>
<tbody><tr>
<td><a href="http://markdownpad.com/">MarkdownPad</a></td>
<td>Windows 平台最好用的 Markdown 编辑器</td>
<td>Windows</td>
<td>免费 + 付费</td>
</tr>
<tr>
<td><a href="https://atom.io/">Atom</a></td>
<td>开源，跨平台，超棒的编辑器，需安装插件</td>
<td>Windows、Linux、macOS</td>
<td>免费</td>
</tr>
<tr>
<td><a href="https://www.sublimetext.com/">Sublime Text 3</a></td>
<td>精致的代码编辑器，安装插件支持即时渲染</td>
<td>Windows、Linux、macOS</td>
<td>免费 + 付费</td>
</tr>
<tr>
<td><a href="https://www.jetbrains.com/">JetBrains’s IDE</a></td>
<td>需要安装插件，免费版有时长限制，适合程序员</td>
<td>Windows、Linux、macOS</td>
<td>免费 + 付费</td>
</tr>
<tr>
<td><a href="https://code.visualstudio.com/">VS Code</a></td>
<td>适合开发者，有众多插件</td>
<td>Windows、Linux、macOS</td>
<td>免费</td>
</tr>
<tr>
<td><a href="https://typora.io/">Typora</a></td>
<td>跨平台、即时渲染（所见即所得）</td>
<td>Windows、Linux、macOS</td>
<td>免费</td>
</tr>
<tr>
<td><a href="https://ulysses.app/">Ulysses</a></td>
<td>一站式写作平台，优良的写作体验</td>
<td>iPhone、iPad、macOS</td>
<td>付费（免费试用）</td>
</tr>
<tr>
<td><a href="https://bear.app/">Bear</a></td>
<td>高颜值，免费版本不能跨平台同步</td>
<td>iPhone、iPad、macOS</td>
<td>免费 + 付费</td>
</tr>
<tr>
<td><a href="http://zh.mweb.im/">MWeb</a></td>
<td>支持图床、博客发布等功能</td>
<td>iPhone、iPad、macOS</td>
<td>付费</td>
</tr>
<tr>
<td><a href="https://macdown.uranusjr.com/">MacDown</a></td>
<td>开源，可从 Mou 平滑过渡</td>
<td>macOS</td>
<td>免费</td>
</tr>
<tr>
<td><a href="https://www.gitbook.com/">GitBook Editor</a></td>
<td>跨平台，集成了 Git 和 Markdown</td>
<td>Windows、Linux、macOS</td>
<td>免费</td>
</tr>
<tr>
<td><a href="https://blog.csdn.net/">CSDN</a></td>
<td>国内程序员博客网站</td>
<td>Web</td>
<td>免费</td>
</tr>
<tr>
<td><a href="https://www.jianshu.com/">简书</a></td>
<td>最早支持 Markdown 写作的网站之一</td>
<td>Web</td>
<td>免费</td>
</tr>
<tr>
<td><a href="https://www.yinxiang.com/">印象笔记</a></td>
<td>支持多端同步，提供强大的 <a href="https://maxiang.io/">马克飞象</a> 编辑器</td>
<td>Windows、Linux、macOS</td>
<td>免费 + 付费</td>
</tr>
<tr>
<td><a href="https://note.youdao.com/">有道云笔记</a></td>
<td>支持多端同步</td>
<td>Windows、Linux、macOS</td>
<td>免费 + 付费</td>
</tr>
</tbody></table>
<p>当然，除了上面列出这些，还有许多优秀的 Markdown 编辑器，有待您进一步探索！</p>
<p>对于我来说，目前最常用的是 Typora 和 VS Code 这两款免费、跨平台的编辑器，下面简单介绍一下安装过程。</p>
<h2 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a>Typora</h2><p>打开 Typora 的官网 <a href="https://typora.io/">https://typora.io</a>，点击 Download 标签，对于 Windows 和 macOS 用户，直接下载安装包进行安装即可。对于 Linux 用户稍微复杂一些，比如 Ubuntu 用户可以执行如下命令进行安装或更新。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> or run:</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys BA300B7755AFCFAE</span></span><br><span class="line">wget -qO - https://typora.io/linux/public-key.asc | sudo apt-key add -</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> add Typora<span class="string">&#x27;s repository</span></span></span><br><span class="line">sudo add-apt-repository &#x27;deb https://typora.io/linux ./&#x27;</span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> install typora</span></span><br><span class="line">sudo apt-get install typora</span><br></pre></td></tr></table></figure>

<p>Typora 非常简洁，提供流畅的即时预览界面，而不是分栏设计，可以让你在一个屏幕上看到更多内容，甚至忘记自己在写 Markdown。</p>
<p><img src="https://img-blog.csdnimg.cn/20210307130330755.png" alt="在这里插入图片描述"></p>
<h2 id="VS-Code"><a href="#VS-Code" class="headerlink" title="VS Code"></a>VS Code</h2><p>打开 VS Code 的官网 <a href="https://code.visualstudio.com/">https://code.visualstudio.com</a> 下载对应平台的安装包，进行安装即可。也可以在系统的应用商店找到，直接安装。</p>
<p>唯一值得提醒的是，如何安装 Markdown 插件，并且启动预览界面。</p>
<p>点击左侧栏的 Extensions 图标，输入 Markdown 进行搜索。由于 VS Code 支持第三方插件，因此你会看到许多不同的 Markdown 插件，我们安装第一个 Markdown All in One 即可，点击 Install 进行安装。</p>
<p><img src="https://img-blog.csdnimg.cn/20210307130354210.png" alt="在这里插入图片描述"></p>
<p>安装完成后打开或新建一个 .md 文档，在编辑区的右上角可以看到几个小按钮，点击中间那个 preview 即可实时预览 Markdown 渲染后的效果。</p>
<p><img src="https://img-blog.csdnimg.cn/20210307130407531.png" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/20210307130420679.png" alt="在这里插入图片描述"></p>
<p>好啦，关于 Markdown 编辑器的选择与安装就先到这里了，下一节我们正式开始学习 Markdown 的语法。</p>
]]></content>
      <categories>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>俏皮的 Markdown Emoji 表情</title>
    <url>/markdown/markdown-emoji.html</url>
    <content><![CDATA[<p><strong>【Markdown从入门到精通】</strong></p>
<p><span class="github-emoji" alias="question" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2753.png?v8">&#x2753;</span> 如果不懂外语，在互联网上怎么交流？—— 别慌，可以用互联网时代全球通用语言 Emoji 呀！</p>
<h2 id="Emoji-的发展史"><a href="#Emoji-的发展史" class="headerlink" title="Emoji 的发展史"></a>Emoji 的发展史</h2><p><span class="github-emoji" alias="paperclip" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4ce.png?v8">&#x1f4ce;</span> ​Emoji 的演变主要分为三个阶段。</p>
<h3 id="x0031-xfe0f-x20e3-符号表情（颜文字）"><a href="#x0031-xfe0f-x20e3-符号表情（颜文字）" class="headerlink" title="&#x0031;&#xfe0f;&#x20e3; 符号表情（颜文字）"></a><span class="github-emoji" alias="one" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/0031-20e3.png?v8">&#x0031;&#xfe0f;&#x20e3;</span> <strong>符号表情（颜文字）</strong></h3><p>早在 1967 年，美国《Reader’s Digest》的一篇文章就提出了用符号表达情绪的概念，但这个想法并未付诸实践。直到  1982 年，卡耐基梅隆大学的 Scott Fahlman 教授提议在留言板上使用 <code>:-)</code> 和 <code>:-(</code> 符号来区分严肃的帖子和笑话。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">19-Sep-82 11:44    Scott E  Fahlman             :-)</span><br><span class="line">From: Scott E  Fahlman &lt;Fahlman at Cmu-20c&gt;</span><br><span class="line"></span><br><span class="line">I propose that the following character sequence for joke markers:</span><br><span class="line"></span><br><span class="line">:-)</span><br><span class="line"></span><br><span class="line">Read it sideways.  Actually, it is probably more economical to mark</span><br><span class="line">things that are NOT jokes, given current trends.  For this, use</span><br><span class="line"></span><br><span class="line">:-(</span><br></pre></td></tr></table></figure>

<p>之后开始出现各种不同形式的符号，比如 <code>:-o</code> 表示惊讶，<code>ORZ</code> 表示低头下跪等等。虽然符号表情需要把头逆时针转90度才能看懂，但在 BP 机时代给人们带来了许多快乐，现在仍然有许多人在使用（包括我）。</p>
<h3 id="x0032-xfe0f-x20e3-Emoji（绘文字）"><a href="#x0032-xfe0f-x20e3-Emoji（绘文字）" class="headerlink" title="&#x0032;&#xfe0f;&#x20e3; Emoji（绘文字）"></a><span class="github-emoji" alias="two" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/0032-20e3.png?v8">&#x0032;&#xfe0f;&#x20e3;</span> <strong>Emoji（绘文字）</strong></h3><p>基于 ASCII 的符号表情所能表达的内容有限，并且输入符号的体验并不是很好。日本移动通讯运营商 NTT DOCOMO 的工程师栗田穣崇在 1999 年设计了一套 12x12 像素的图形化表情。虽然今天我们所用的 emoji 与最初的相比已有了翻天覆地的变化，但都离不开栗田穣崇为 emoji 创造的原始基因。</p>
<p><img src="https://img-blog.csdnimg.cn/20210307230335427.jpg" alt="在这里插入图片描述"></p>
<p>Emoji 一词并不是栗田穣崇创造出来的，而是日语中早就存在的。大概是江户年代起就有将类似 emoji 的图形符号当做文字来用的历史了。e 是日文汉字「絵」（图画的意思），moji 是「文字」，所以 emoji，也称作绘文字。而 kao 是「颜」（脸的意思），所以 kaomoji 就是颜文字。</p>
<p>全世界第一个 Emoji 表情 <span class="github-emoji" alias="heart" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2764.png?v8">&#x2764;</span></p>
<h3 id="x0033-xfe0f-x20e3-Emoji-统一码"><a href="#x0033-xfe0f-x20e3-Emoji-统一码" class="headerlink" title="&#x0033;&#xfe0f;&#x20e3; Emoji 统一码"></a><span class="github-emoji" alias="three" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/0033-20e3.png?v8">&#x0033;&#xfe0f;&#x20e3;</span> <strong>Emoji 统一码</strong></h3><p>2010年，Unicode 6.0 首次收录了 emoji 编码，这是 emoji 发展史的里程碑之一，将有助于推动 emoji 的全球统一标准。</p>
<p>此前 emoji 仅在日本流行，直到 2011 年，苹果在 iPhone 系统中加入一套 Apple Color Emoji 后，emoji 才真正开始火爆，涌入全球用户的屏幕中，成为当今数字通讯中的一种新形式，逐渐成为一门世界通用语言。</p>
<p>Emoji 仍在不断发展，Unicode 8.0 就加入了5个修饰符，用来调节人形表情的肤色。</p>
<p>Unicode 10.0 版本的部分 emoji 编码如下：</p>
<p><img src="https://img-blog.csdnimg.cn/20210307230405868.png" alt="在这里插入图片描述"></p>
<h2 id="在-Markdown-中使用-Emoji"><a href="#在-Markdown-中使用-Emoji" class="headerlink" title="在 Markdown 中使用 Emoji"></a>在 Markdown 中使用 Emoji</h2><p><span class="github-emoji" alias="star" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">&#x2b50;</span> 重点：有两种方法可以将 emoji 表情符号添加到 Markdown 文档</p>
<ol>
<li>将表情符号直接复制粘贴到 Markdown 文档中，就像普通文字那样；</li>
<li>使用冒号 <code>:</code> 将表情代码（emoji shortcodes）包裹起来。</li>
</ol>
<h3 id="复制粘贴表情符号"><a href="#复制粘贴表情符号" class="headerlink" title="复制粘贴表情符号"></a>复制粘贴表情符号</h3><p>大多数情况下，你可以简单地从 <a href="">Emojipedia</a> 等来源复制表情符号，直接 Ctrl + V 粘贴到 Markdown 文档中。许多 Markdown 编辑器都会自动转换为其支持的表情符号显示类型，所以不同编辑器或网站看到的效果可能会有差别。</p>
<p>Tips：如果使用静态网站生成器，请确保将 HTML 页面编码修改为 UTF-8。</p>
<p>💰</p>
<h3 id="使用表情符号代码"><a href="#使用表情符号代码" class="headerlink" title="使用表情符号代码"></a>使用表情符号代码</h3><p>使用冒号包裹表情代码即可，比如下面这样：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">去露营了！ <span class="github-emoji" alias="tent" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/26fa.png?v8">&#x26fa;</span> 很快回来。</span><br><span class="line"></span><br><span class="line">真好笑！ <span class="github-emoji" alias="joy" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8">&#x1f602;</span></span><br></pre></td></tr></table></figure>

<p>效果是这样的：</p>
<blockquote>
<p>去露营了！ <span class="github-emoji" alias="tent" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/26fa.png?v8">&#x26fa;</span> 很快回来。</p>
<p>真好笑！ <span class="github-emoji" alias="joy" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8">&#x1f602;</span></p>
</blockquote>
<p>表情代码有上千个，记不住不要紧，很多 Markdown 编辑器都有提示和补全功能，输入冒号 <code>:</code> 加首字母就会给你提示。</p>
<p>具体的表情代码可以通过下面的网站查阅：</p>
<ul>
<li><a href="https://emojipedia.org/">https://emojipedia.org</a></li>
<li><a href="https://www.webfx.com/tools/emoji-cheat-sheet/">https://www.webfx.com/tools/emoji-cheat-sheet/</a></li>
<li><a href="https://gist.github.com/rxaviers/7360908">https://gist.github.com/rxaviers/7360908</a></li>
</ul>
<p>不同平台和编辑器对 emoji 的支持和显示效果可能会不一样，各位小伙伴们需要注意哦！同时注意文明使用 emoji 哟~</p>
<p><span class="github-emoji" alias="kiss" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f48b.png?v8">&#x1f48b;</span>​</p>
<br/>]]></content>
      <categories>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>了解常用 Markdown 扩展语法</title>
    <url>/markdown/markdown-extended-syntax.html</url>
    <content><![CDATA[<p><strong>【Markdown从入门到精通】</strong></p>
<p>虽然 Markdown 扩展语法不在 CommonMark Spec 标准中，但许多 Markdown 编辑器也都尽量支持，因此学习一些常用的 Markdown 扩展语法也是有必要的。本文介绍的主要是 GitHub Flavored Markdown，也就是 GitHub 风格的 Markdown 扩展语法。</p>
<h2 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h2><p>使用两个飘号 <code>~~</code> 包裹需要表示删除的文字。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">~~抽烟~~</span><br></pre></td></tr></table></figure>



<h2 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h2><p>由于 Markdown 和 HTML 的暧昧关系，因此在 Markdown 中，下划线可以通过 <code>&lt;u&gt; &lt;/u&gt;</code> 标签来实现。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">u</span>&gt;</span></span>下面有条线<span class="xml"><span class="tag">&lt;/<span class="name">u</span>&gt;</span></span></span><br></pre></td></tr></table></figure>



<h2 id="上标与下标"><a href="#上标与下标" class="headerlink" title="上标与下标"></a>上标与下标</h2><p>上标使用 <code>^</code> 包裹</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">a^2^</span><br></pre></td></tr></table></figure>

<p>下标使用 <code>~</code> 包裹</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">CO~2~</span><br></pre></td></tr></table></figure>



<h2 id="高亮"><a href="#高亮" class="headerlink" title="高亮"></a>高亮</h2><p>用两个等号 <code>==</code> 包裹表示高亮</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">==我会变亮哦==</span><br></pre></td></tr></table></figure>



<h2 id="锚点"><a href="#锚点" class="headerlink" title="锚点"></a>锚点</h2><p>锚点的作用是标记文档中的特定位置，使用锚点可以跳转到当前文档或其他文档中指定的标记位置（可以理解为相对链接）。锚点常见于目录链接，因此有时候也称其为书签。锚点的语法格式如下：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">[<span class="string">锚点描述</span>](<span class="link">#锚点名</span>)</span><br></pre></td></tr></table></figure>

<p>语法说明：</p>
<ul>
<li>锚点名不能含有空格；</li>
<li>锚点名不能含有特殊字符；</li>
<li>锚点名是区分大小写英文字母的；</li>
<li>锚点名建议使用字母和数字，也可以使用中文，不过要留意你所使用的编辑器或部署的网站是否支持。</li>
</ul>
<p>示例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 目录</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> [<span class="string">第1章</span>](<span class="link">Chapter1.md</span>)</span><br><span class="line"><span class="bullet">    -</span> [<span class="string">第1章 第1节</span>](<span class="link">Chapter1.md#Section1</span>)</span><br><span class="line"><span class="bullet">    -</span> [<span class="string">第1章 第2节</span>](<span class="link">Chapter1.md#Section2</span>)</span><br></pre></td></tr></table></figure>

<p>在 Chapter1.md 文档中，创建 Section1 和 Section2 标题</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># Chapter1</span></span><br><span class="line"></span><br><span class="line"><span class="section">## Section1</span></span><br><span class="line"></span><br><span class="line"><span class="section">## Section2</span></span><br></pre></td></tr></table></figure>



<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>表格的处理在 Markdown 中是比较有争议的，但大多数都遵循下面这种简单的表格标记语法：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">表头1 | 表头2 | 表头3</span><br><span class="line">---- | ---- | ----</span><br><span class="line">内容1 | 内容2 | 内容3</span><br><span class="line">内容4 | 内容5 | 内容6</span><br></pre></td></tr></table></figure>

<p>语法说明：</p>
<ul>
<li>单元格使用竖线 <code>|</code> 进行分隔；</li>
<li>表头与内容行使用短横线 <code>---</code> 分隔；</li>
<li>默认左对齐，可以在短横线在左侧或右侧添加冒号 <code>:</code> 来调整对齐方式，比如：<ul>
<li>左对齐 <code>:---</code></li>
<li>右对齐 <code>---:</code></li>
<li>居中对齐 <code>:---:</code></li>
</ul>
</li>
</ul>
<h2 id="待办事项"><a href="#待办事项" class="headerlink" title="待办事项"></a>待办事项</h2><p>待办事项也就是 Check Box，在 Markdown 扩展语法中的格式如下：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> [ ] 未勾选</span><br><span class="line"><span class="bullet">-</span> [x] 已勾选</span><br></pre></td></tr></table></figure>

<p>语法说明：</p>
<ul>
<li>方括号内填充小写字母 x 表示选中，填充空格表示未选中；</li>
<li>方括号外面两边的空格是必须的。</li>
</ul>
<h2 id="数学区块"><a href="#数学区块" class="headerlink" title="数学区块"></a>数学区块</h2><p>Markdown 扩展语法支持 LaTeX 数学表达式，使用 <code>$</code> 符包裹 LaTeX 表达式即可。与代码块类似，数学表达式也分为“行内”和“块”两种。</p>
<p>行内数学表达式：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">$\Delta+1$</span><br></pre></td></tr></table></figure>

<p>数学表达式块：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">$$</span><br><span class="line">\Delta+1</span><br><span class="line">$$</span><br></pre></td></tr></table></figure>

<p>语法说明：</p>
<ul>
<li>行内表达式使用一个 <code>$</code> 包裹；</li>
<li>块表达式使用两个 <code>$$</code> 包裹。</li>
</ul>
<p>LaTex 表达式比较复杂，后面会专门用一个篇幅来介绍。</p>
<h2 id="表情符号"><a href="#表情符号" class="headerlink" title="表情符号"></a>表情符号</h2><p>Markdown 是支持 Emoji 表情的，格式是使用冒号 <code>:</code> 包裹表情代码。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">:表情代码:</span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="github-emoji" alias="smile" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8">&#x1f604;</span></span><br></pre></td></tr></table></figure>

<p>表情的使用关键在于要知道支持哪些表情代码，后面也会专门用一个篇幅来介绍这个有趣的话题。</p>
<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p>Markdown 的标题本身可以作为目录，但是如果想在为当前文章增加目录，可以使用 <code>[TOC]</code> 自动生成目录。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">@[toc]</span><br></pre></td></tr></table></figure>



<h2 id="注脚"><a href="#注脚" class="headerlink" title="注脚"></a>注脚</h2><p>注脚（也称为脚注，英文 footnote）用于为正文条目补充注解，常见于论文引用资料来源的说明。在 Markdown 中注脚的写法与 <a href="https://luhuadong.blog.csdn.net/article/details/114491055#t16">上一节</a> 讲的参考式链接类似，格式如下：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">正文条目[^注脚]</span><br><span class="line"></span><br><span class="line">[<span class="symbol">^注脚</span>]: <span class="link">引用描述</span></span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">66.7%的受访者选择“就地过年”，中国铁路春运客流将下调至2.96亿人次，较往年同期下降了六成。[^1]</span><br><span class="line"></span><br><span class="line">[<span class="string">^1</span>]: [<span class="string">报告显示：超过六成职场人选择“就地过年”</span>](<span class="link">https://finance.sina.com.cn/china/gncj/2021-01-25/doc-ikftpnny1714325.shtml</span>)</span><br></pre></td></tr></table></figure>



<h2 id="YAML-头信息"><a href="#YAML-头信息" class="headerlink" title="YAML 头信息"></a>YAML 头信息</h2><p>如果你使用过 Hexo、Jekyll、Sphinx 等静态网站生成工具写博客或制作在线文档，你就会看到 Markdown 文档的头部有一些信息，这个头部信息就是 YAML 头信息。它的作用是描述该文档的信息，不会显示出来，类似于 HTML 的 <code>&lt;head&gt; &lt;/head&gt;</code> 包裹的头部信息。</p>
<p>YAML 头信息必须放在文件的开始位置，并且需要按照 YAML 的格式写在两行三虚线 <code>---</code> 之间。</p>
<p>比如你现在看到的这篇文章的 YAML 头信息是这样的：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 了解常用Markdown扩展语法</span><br><span class="line">date: 2021-03-07 09:51:19</span><br><span class="line">tags:</span><br><span class="line"><span class="bullet">  -</span> Markdown</span><br><span class="line"><span class="bullet">  -</span> 教程</span><br><span class="line">categories: Markdown从入门到精通</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>YAML 头信息的字段与你所使用的工具有关，具体的字段需要结合相关的工具来填写。后面我们讲博客和在线文档搭建的时候会详细介绍，现在你只要知道有这个东西就可以了~</p>
<h2 id="图表"><a href="#图表" class="headerlink" title="图表"></a>图表</h2><p>Markdown 扩展语法支持图表，但不同工具对图表的支持和兼容差别较大，后面会安排专门的章节来展开描述。</p>
<hr>
<p>关于 Markdown 扩展语法的介绍就先到这里啦，别忘了把上述示例复制到你的 Markdown 编辑器中看看效果哦。</p>
<br/>]]></content>
      <categories>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>学会用 Markdown 画流程图</title>
    <url>/markdown/markdown-flow-chart.html</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>一次搞定 Markdown 公式表达</title>
    <url>/markdown/markdown-formulas-expression.html</url>
    <content><![CDATA[<p>在前面《<a href="https://luhuadong.blog.csdn.net/article/details/114498117">了解常用 Markdown 扩展语法</a>》简单介绍了如何在 Markdown 中插入数学公式，关于这个话题还是蛮有趣的。尤其在专业领域，常常需要引入公式进行论证，如何呈现印刷级别的公式就很重要啦！好在 Markdown 扩展语法支持 LaTeX 公式表达，并且有像 MathJax 这样优秀的工具渲染 LaTeX 数学表达式。</p>
<p><img src="/images/md/LaTeX_in_Markdown.png"></p>
<p>MathJax 是一个跨浏览器的 JavaScript 库，它使用 MathML、LaTeX 和 ASCIIMathML 标记在 Web 浏览器中显示数学符号。MathJax项目始于2009年，是早期 JavaScript 数学格式化库 jsMath 的继承者，由美国数学学会管理。MathJax 是在 Apache 许可证下发布的开源软件，GitHub 地址是 <a href="https://github.com/mathjax/MathJax">https://github.com/mathjax/MathJax</a> 。</p>
<p>LaTeX 则是一个对数学公式进行排版的系统。他们的关系如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A[LaTeX表达式] --&gt; |MathJax| B[优美的公式]</span><br></pre></td></tr></table></figure>

<p>额，这一节其实跟 Markdown 没太大关系 <span class="github-emoji" alias="joy" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8">&#x1f602;</span></p>
<p>唯一要记住的就是行内标记使用一个 <code>$</code> 包裹，行间标记使用两个 <code>$$</code> 包裹 LaTeX 表达式。</p>
<h2 id="LaTeX-基本用法"><a href="#LaTeX-基本用法" class="headerlink" title="LaTeX 基本用法"></a>LaTeX 基本用法</h2><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><h3 id="字体命令"><a href="#字体命令" class="headerlink" title="字体命令"></a>字体命令</h3><p>字体命令用于定义字体，在 LaTeX 中用的字体有：</p>
<ul>
<li>罗马字体（<code>\rm</code>）</li>
<li>黑体（<code>\bf</code>）</li>
<li>意大利体（<code>\it</code>）</li>
<li>小号大写字体（<code>\sc</code>）</li>
<li>斜体（<code>\sl</code>）</li>
<li>打字机字体（<code>\tt</code>）</li>
<li>强调字体（<code>\em</code>）</li>
</ul>
<p>其中强调型字体不是一种新的字体，而仍是上述六种之一。LaTeX 规定：如果当前字体为罗马字体，则强调型为意大利字体；如果当前字体为非罗马字体，则强调型字体为罗马字体。</p>
<p>例如：</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line">&#123;<span class="tag">\<span class="name">it</span></span> 这是意大利体&#125;</span><br></pre></td></tr></table></figure>

<p>$$<br>{\it 这是意大利体}<br>$$</p>
<h3 id="字号命令"><a href="#字号命令" class="headerlink" title="字号命令"></a>字号命令</h3><p>字号命令用于定义字符的大小。字号命令有：</p>
<ul>
<li><code>\tiny</code></li>
<li><code>\scriptsize</code></li>
<li><code>\footnotesize</code></li>
<li><code>\small</code></li>
<li><code>\normalsize</code></li>
<li><code>\large</code></li>
<li><code>\Large</code></li>
<li><code>\LARGE</code></li>
<li><code>\huge</code></li>
<li><code>\Huge</code></li>
</ul>
<p>字号命令的引用格式为：<code>&#123;命令 内容&#125;</code>。</p>
<h2 id="数学表达式"><a href="#数学表达式" class="headerlink" title="数学表达式"></a>数学表达式</h2><h3 id="分数"><a href="#分数" class="headerlink" title="分数"></a>分数</h3><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line">&#123;<span class="tag">\<span class="name">frac</span><span class="string">&#123;a&#125;</span><span class="string">&#123;b&#125;</span></span>&#125;</span><br></pre></td></tr></table></figure>

<p>$$<br>{\frac{a}{b}}<br>$$</p>
<h3 id="导数"><a href="#导数" class="headerlink" title="导数"></a>导数</h3><h3 id="极限"><a href="#极限" class="headerlink" title="极限"></a>极限</h3><h3 id="求和"><a href="#求和" class="headerlink" title="求和"></a>求和</h3><h3 id="微积分"><a href="#微积分" class="headerlink" title="微积分"></a>微积分</h3><h3 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h3><h2 id="化学方程式"><a href="#化学方程式" class="headerlink" title="化学方程式"></a>化学方程式</h2><h3 id="在等号上下写字"><a href="#在等号上下写字" class="headerlink" title="在等号上下写字"></a>在等号上下写字</h3><p><strong>在等号上面写字</strong></p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="tag">\<span class="name">overset</span><span class="string">&#123;\text&#123;def&#125;</span></span>&#125;&#123;=&#125;</span><br></pre></td></tr></table></figure>

<p>效果：<br>$$<br>\overset{\text{def}}{=}<br>$$</p>
<p><strong>在等号下面写字</strong></p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="tag">\<span class="name">underset</span><span class="string">&#123;\text&#123;heated&#125;</span></span>&#125;&#123;=&#125;</span><br></pre></td></tr></table></figure>

<p>效果：<br>$$<br>\underset{\text{heated}}{=}<br>$$<br>我们发现这种方式显示的等号太短了，在输入化学方程式的时候，如果需要添加较多的附加条件就显得不协调。比如：<br>$$<br>\overset{\text{稀硫酸、}140^\circ{\rm C}}{=}<br>$$<br>这时候需要使用下面介绍的长等号。</p>
<h3 id="使用长等号"><a href="#使用长等号" class="headerlink" title="使用长等号"></a>使用长等号</h3><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="tag">\<span class="name">xlongequal</span><span class="string">[140^\circ&#123;\rm C&#125;]</span><span class="string">&#123;\text&#123;稀硫酸&#125;</span></span>&#125;</span><br></pre></td></tr></table></figure>


<p>$$<br>\xlongequal[140^\circ{\rm C}]{\text{稀硫酸}}<br>$$</p>
<p><code>\xlongequal</code> 的用法是：</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="tag">\<span class="name">xlongequal</span><span class="string">[下面]</span><span class="string">&#123;上面&#125;</span></span></span><br></pre></td></tr></table></figure>



<p>例如：</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="tag">\<span class="name">text</span><span class="string">&#123;左&#125;</span></span> <span class="tag">\<span class="name">xlongequal</span><span class="string">[\text&#123;上&#125;]</span><span class="string">&#123;\text&#123;下&#125;</span></span>&#125; <span class="tag">\<span class="name">text</span><span class="string">&#123;右&#125;</span></span></span><br></pre></td></tr></table></figure>

<p>$$<br>\text{左} \xlongequal[\text{上}]{\text{下}} \text{右}<br>$$</p>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line">&#123;2<span class="tag">\<span class="name">rm</span><span class="string">&#123;C_2H_5OH&#125;</span></span>&#125;&#123;<span class="tag">\<span class="name">overset</span><span class="string">&#123;\text&#123;稀硫酸、&#125;</span></span>140^<span class="tag">\<span class="name">circ</span><span class="string">&#123;\rm C&#125;</span></span>&#125;&#123;=&#125;&#125;&#123;<span class="tag">\<span class="name">rm</span></span> C_2H_5OC_2H_5+H_2O&#125;</span><br></pre></td></tr></table></figure>

<p>$$<br>{2\rm{C_2H_5OH}}{\overset{\text{稀硫酸、}140^\circ{\rm C}}{=}}{\rm C_2H_5OC_2H_5+H_2O}<br>$$</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line">&#123;2<span class="tag">\<span class="name">rm</span><span class="string">&#123;C_2H_5OH&#125;</span></span>&#125;<span class="tag">\<span class="name">xlongequal</span><span class="string">[140^\circ &#123;\rm C&#125;]</span><span class="string">&#123;\text&#123;稀硫酸&#125;</span></span>&#125;&#123;<span class="tag">\<span class="name">rm</span></span> C_2H_5OC_2H_5+H_2O&#125;</span><br></pre></td></tr></table></figure>

<p>$$<br>{2\rm{C_2H_5OH}}\xlongequal[140^\circ {\rm C}]{\text{稀硫酸}}{\rm C_2H_5OC_2H_5+H_2O}<br>$$</p>
<h2 id="LaTeX-符号"><a href="#LaTeX-符号" class="headerlink" title="LaTeX 符号"></a>LaTeX 符号</h2><h3 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h3><table>
<thead>
<tr>
<th align="center">名称</th>
<th align="center">大写</th>
<th align="center">写法</th>
<th align="center">小写</th>
<th align="center">写法</th>
</tr>
</thead>
<tbody><tr>
<td align="center">alpha</td>
<td align="center">$\Alpha$</td>
<td align="center"><code>$\Alpha$</code></td>
<td align="center">$\alpha$</td>
<td align="center"><code>$\alpha$</code></td>
</tr>
<tr>
<td align="center">beta</td>
<td align="center">$\Beta$</td>
<td align="center"><code>$\Beta$</code></td>
<td align="center">$\beta$</td>
<td align="center"><code>$\beta$</code></td>
</tr>
<tr>
<td align="center">gamma</td>
<td align="center">$\Gamma$</td>
<td align="center"><code>$\Gamma$</code></td>
<td align="center">$\gamma$</td>
<td align="center"><code>$\gamma$</code></td>
</tr>
<tr>
<td align="center">delta</td>
<td align="center">$\Delta$</td>
<td align="center"><code>$\Delta$</code></td>
<td align="center">$\delta$</td>
<td align="center"><code>$\delta$</code></td>
</tr>
<tr>
<td align="center">epsilon</td>
<td align="center">$\Epsilon$</td>
<td align="center"><code>$\Epsilon$</code></td>
<td align="center">$\epsilon$</td>
<td align="center"><code>$\epsilon$</code></td>
</tr>
<tr>
<td align="center">zeta</td>
<td align="center">$\Zeta$</td>
<td align="center"><code>$\Zeta$</code></td>
<td align="center">$\zeta$</td>
<td align="center"><code>$\zeta$</code></td>
</tr>
<tr>
<td align="center">eta</td>
<td align="center">$\Eta$</td>
<td align="center"><code>$\Eta$</code></td>
<td align="center">$\eta$</td>
<td align="center"><code>$\eta$</code></td>
</tr>
<tr>
<td align="center">theta</td>
<td align="center">$\Theta$</td>
<td align="center"><code>$\Theta$</code></td>
<td align="center">$\theta$</td>
<td align="center"><code>$\theta$</code></td>
</tr>
<tr>
<td align="center">iota</td>
<td align="center">$\Iota$</td>
<td align="center"><code>$\Iota$</code></td>
<td align="center">$\iota$</td>
<td align="center"><code>$\iota$</code></td>
</tr>
<tr>
<td align="center">kappa</td>
<td align="center">$\Kappa$</td>
<td align="center"><code>$\Kappa$</code></td>
<td align="center">$\kappa$</td>
<td align="center"><code>$\kappa$</code></td>
</tr>
<tr>
<td align="center">lambda</td>
<td align="center">$\Lambda$</td>
<td align="center"><code>$\Lambda$</code></td>
<td align="center">$\lambda$</td>
<td align="center"><code>$\lambda$</code></td>
</tr>
<tr>
<td align="center">mu</td>
<td align="center">$\Mu$</td>
<td align="center"><code>$\Mu$</code></td>
<td align="center">$\mu$</td>
<td align="center"><code>$\mu$</code></td>
</tr>
<tr>
<td align="center">nu</td>
<td align="center">$\Nu$</td>
<td align="center"><code>$\Nu$</code></td>
<td align="center">$\nu$</td>
<td align="center"><code>$\nu$</code></td>
</tr>
<tr>
<td align="center">xi</td>
<td align="center">$\Xi$</td>
<td align="center"><code>$\Xi$</code></td>
<td align="center">$\xi$</td>
<td align="center"><code>$\xi$</code></td>
</tr>
<tr>
<td align="center">omicron</td>
<td align="center">$\Omicron$</td>
<td align="center"><code>$\Omicron$</code></td>
<td align="center">$\omicron$</td>
<td align="center"><code>$\omicron$</code></td>
</tr>
<tr>
<td align="center">pi</td>
<td align="center">$\Pi$</td>
<td align="center"><code>$\Pi$</code></td>
<td align="center">$\pi$</td>
<td align="center"><code>$\pi$</code></td>
</tr>
<tr>
<td align="center">rho</td>
<td align="center">$\Rho$</td>
<td align="center"><code>$\Rho$</code></td>
<td align="center">$\rho$</td>
<td align="center"><code>$\rho$</code></td>
</tr>
<tr>
<td align="center">sigma</td>
<td align="center">$\Sigma$</td>
<td align="center"><code>$\Sigma$</code></td>
<td align="center">$\sigma$</td>
<td align="center"><code>$\sigma$</code></td>
</tr>
<tr>
<td align="center">tau</td>
<td align="center">$\Tau$</td>
<td align="center"><code>$\Tau$</code></td>
<td align="center">$\tau$</td>
<td align="center"><code>$\tau$</code></td>
</tr>
<tr>
<td align="center">upsilon</td>
<td align="center">$\Upsilon$</td>
<td align="center"><code>$\Upsilon$</code></td>
<td align="center">$\upsilon$</td>
<td align="center"><code>$\upsilon$</code></td>
</tr>
<tr>
<td align="center">phi</td>
<td align="center">$\Phi$</td>
<td align="center"><code>$\Phi$</code></td>
<td align="center">$\phi$</td>
<td align="center"><code>$\phi$</code></td>
</tr>
<tr>
<td align="center">chi</td>
<td align="center">$\Chi$</td>
<td align="center"><code>$\Chi$</code></td>
<td align="center">$\chi$</td>
<td align="center"><code>$\chi$</code></td>
</tr>
<tr>
<td align="center">psi</td>
<td align="center">$\Psi$</td>
<td align="center"><code>$\Psi$</code></td>
<td align="center">$\psi$</td>
<td align="center"><code>$\psi$</code></td>
</tr>
<tr>
<td align="center">omega</td>
<td align="center">$\Omega$</td>
<td align="center"><code>$\Omega$</code></td>
<td align="center">$\omega$</td>
<td align="center"><code>$\omega$</code></td>
</tr>
</tbody></table>
<h3 id="求和、积分"><a href="#求和、积分" class="headerlink" title="求和、积分"></a>求和、积分</h3><table>
<thead>
<tr>
<th align="center">符号</th>
<th align="center">写法</th>
<th align="center">示例</th>
<th align="center">Markdown 代码</th>
</tr>
</thead>
<tbody><tr>
<td align="center">求和</td>
<td align="center"><code>\sum</code></td>
<td align="center">$\sum_1^n$</td>
<td align="center"><code>$\sum_1^n$</code></td>
</tr>
<tr>
<td align="center">积分</td>
<td align="center"><code>\int</code></td>
<td align="center">$\int_1^\infty$</td>
<td align="center"><code>$\int_1^\infty$</code></td>
</tr>
</tbody></table>
<h3 id="分式、根式"><a href="#分式、根式" class="headerlink" title="分式、根式"></a>分式、根式</h3><table>
<thead>
<tr>
<th align="center">符号</th>
<th align="center">写法</th>
<th align="center">示例</th>
<th align="center">Markdown 代码</th>
</tr>
</thead>
<tbody><tr>
<td align="center">分式</td>
<td align="center"><code>\frac</code></td>
<td align="center">$\frac{1}{n}$</td>
<td align="center"><code>$\frac&#123;1&#125;&#123;n&#125;$</code></td>
</tr>
<tr>
<td align="center">根式</td>
<td align="center"><code>\sqrt</code></td>
<td align="center">$\sqrt[3]{1000}$</td>
<td align="center"><code>$\sqrt[3]&#123;1000&#125;$</code></td>
</tr>
</tbody></table>
<p><strong>LaTex 公式对照表</strong></p>
<p><a href="https://en.wikibooks.org/wiki/LaTeX/Mathematics">https://en.wikibooks.org/wiki/LaTeX/Mathematics</a></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://en.wikibooks.org/wiki/LaTeX/Mathematics">https://en.wikibooks.org/wiki/LaTeX/Mathematics</a></li>
<li><a href="https://liam.page/2014/09/08/latex-introduction/">一份其实很短的 LaTeX 入门文档</a></li>
<li><a href="https://blog.csdn.net/ViatorSun/article/details/82826664">超详细 LaTex数学公式</a></li>
</ul>
]]></content>
      <categories>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>三分钟成为 Markdown 专家</title>
    <url>/markdown/markdown-intro.html</url>
    <content><![CDATA[<p><strong>【Markdown从入门到精通】</strong></p>
<p>当你点开这篇文章的时候，相信你已经听过，甚至使用过 Markdown 了。现在，你希望进一步了解，使用好 Markdown。</p>
<p>那么，请先回答 3 个问题：</p>
<ol>
<li>Markdown 是什么？</li>
<li>Markdown 不是什么？</li>
<li>为什么使用 Markdown？</li>
</ol>
<img src="https://img-blog.csdnimg.cn/20210304185234809.png" width=200 />


<h2 id="Markdown-是什么"><a href="#Markdown-是什么" class="headerlink" title="Markdown 是什么"></a>Markdown 是什么</h2><p>Markdown 是一种轻量级标记语言。别被「标记语言」这个词吓到，其实就是用一些足够简单的符号作为标记来对文本内容进行修饰。比如像下面这张图，左边就是用 Markdown 进行标记的文本，右边是经过渲染后呈现给用户的效果。</p>
<p><img src="/images/md/markdown_show.png"></p>
<p><strong>Markdown 简史</strong></p>
<blockquote>
<p><a href="https://zh.wikipedia.org/wiki/Markdown">Markdown</a> 最早在 2004 年由著名科技博客 <a href="https://daringfireball.net/">Daring Fireball</a> 的作者 <a href="https://daringfireball.net/projects/markdown/">John Gruber</a> 所发布，并与 <a href="https://zh.wikipedia.org/wiki/%E4%BA%9A%E4%BC%A6%C2%B7%E6%96%AF%E6%B2%83%E8%8C%A8">Aaron Swartz</a>（互联网之子）共同完成语法设计与实现。因此 Markdown 从诞生之初就是为了更方便地进行互联网写作，也许是由于大家受够了 HTML 复杂的标签和糟糕的写作体验，Markdown 很快就在互联网上广泛流传开来。到 2014 年，已经出现了由多种语言编写的数十种 Markdown 实现，造成了许多不同的 Markdown 规范和兼容问题（Markdown-like language）。为了解决该问题，<a href="jgm@berkeley.edu">John MacFarlane</a> 等人成立了 <a href="https://commonmark.org/">CommonMark</a> 项目，旨在为 Markdown 提供一个具体、无歧义的语法规范。从一定程度上来说，CommonMark 已经成为了 Markdown 语法规范的事实标准。</p>
</blockquote>
<p>现在，你知道 Markdown 是什么了吧？</p>
<p>Markdown 有两层含义，一是对文本格式的规范性约束（也就是轻量级标签语言）；二是完成 text-to-html 过程的工具（也就是背后默默奉献的 Markdown 解释器，通常集成在 Markdown 编辑器中）。</p>
<p><img src="/images/md/text-to-html.png"></p>
<h2 id="Markdown-不是什么"><a href="#Markdown-不是什么" class="headerlink" title="Markdown 不是什么"></a>Markdown 不是什么</h2><p>随着 Markdown 的流行，有些小伙伴会产生一些误解，为了让大家在真正使用之前对 Markdown 有一个正确的认知。我觉得还是有必要捋一捋 Markdown 不是什么。</p>
<p>Markdown 不是用来替代 HTML。虽然 Markdown 的目标是转换成 HTML，但并不是为了取代 HTML。虽然 HTML 的语法复杂、标签繁多，但它已经形成工业标准，有其存在的重要价值。</p>
<p>Markdown 也不是用来替代 Word、Pages、PowerPoint 等工具。虽然 Markdown 流行至今，早已出圈，在网络写作之外的领域，如撰写书籍，文章，幻灯片，信件和讲义等也被广泛应用起来了。但 Markdown 作为轻量级的标签语言，在图文排版方面仍然难以胜任。</p>
<h2 id="为什么使用-Markdown"><a href="#为什么使用-Markdown" class="headerlink" title="为什么使用 Markdown"></a>为什么使用 Markdown</h2><p>既然 Markdown 比不过 HTML，也比不过 Word、Pages 等工具，为什么还有推荐呢？</p>
<p>Less is More，Markdown 的优势恰恰就在于足够简单！</p>
<ul>
<li><strong>容易编写</strong>（将文字变成标题只需要在前面加上一个 <code>#</code> 符号，还有比这更简单的吗？）</li>
<li><strong>可读性强</strong>（Markdown 文本本身的可读性也很好，即便与其他许多轻量级标记语言相比，比如 AsciiDoc、rST）</li>
<li><strong>易于转换</strong>（Markdown 语法很容易转换为 HTML，因此有许多编辑软件和网站都支持 Markdown 格式，你不用担心找不到好用的工具。如果你是作家，那更应该使用 Markdown，因为它也很容易转换成 azw3、ePub、mobi、pdf 等电子书格式）</li>
<li><strong>便于保存</strong>（Markdown 是纯文档格式保存的，跟 txt 一样，因此在文档分享和保存方面有很大优势，你还可以结合 Git 等版本管理工具对文档进行精确控制）</li>
<li><strong>无处不在</strong>（哪怕你现在还没开始用 Markdown，但你很可能早已看过 Markdown 渲染出来的网页，因为许多静态网站生成器都支持 Markdown）</li>
<li><strong>永不过时</strong>（足够简洁的语法，是我们相信 Markdown 永不过时的理由，你什么时候学都不会晚！）</li>
<li><strong>专注写作</strong>（别忘了，Markdown 的初衷，也是最重要的功能，是让用户专注于内容创作，而不是处理烦人的标签）</li>
</ul>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>看到这里，相信你对 Markdown 的理解又加深了一些。下次跟朋友介绍 Markdown 的时候，如果你能把这 3 个问题娓娓道来，一定会成为别人眼中的 Markdown 专家！</p>
]]></content>
      <categories>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>学会用 Markdown 画时序图</title>
    <url>/markdown/markdown-sequence-diagram.html</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>北京地铁线路图</title>
    <url>/map/metro-beijing.html</url>
    <content><![CDATA[<p><img src="/images/map/metro-beijing.gif"></p>
]]></content>
      <categories>
        <category>map</category>
      </categories>
      <tags>
        <tag>城市</tag>
        <tag>地铁</tag>
      </tags>
  </entry>
  <entry>
    <title>成都地铁线路图</title>
    <url>/map/metro-chengdu.html</url>
    <content><![CDATA[<p><img src="/images/map/metro-chengdu.gif"></p>
]]></content>
      <categories>
        <category>map</category>
      </categories>
      <tags>
        <tag>城市</tag>
        <tag>地铁</tag>
      </tags>
  </entry>
  <entry>
    <title>重庆地铁线路图</title>
    <url>/map/metro-chongqing.html</url>
    <content><![CDATA[<p><img src="/images/map/metro-chongqing.gif"></p>
]]></content>
      <categories>
        <category>map</category>
      </categories>
      <tags>
        <tag>城市</tag>
        <tag>地铁</tag>
      </tags>
  </entry>
  <entry>
    <title>世界上最快的地铁 —— 广州地铁18号线</title>
    <url>/map/metro-guangzhou-line18.html</url>
    <content><![CDATA[<p>你知道吗？全球速度最快的地铁是我们广州的地铁18号线！首通段（冼村-万顷沙）58.3公里，计划2021年内开通，预计开通后最高运行时速为160公里/小时，最高票价为11元。</p>
<p>其实就在今年三月份，广州地铁18号、22号线就成功完成逐级提速试验，运行时速最高达176公里，创造了全球地铁运行速度的最快纪录。而据《中国知网》数据库显示，目前全世界大部分地铁线路速度都不会超过每小时100公里，美国旧金山的地铁最高时速为128公里，在2019年以前被认为是世界上最快的地铁。</p>
<p><img src="/images/map/metro-guangzhou-line18.jpg"></p>
<p>全长61.3公里的广州地铁18号线（南沙快线）大致呈南北走向，起于南沙区万顷沙枢纽，经明珠湾区、番禺广场、琶洲电商区、珠江新城，止于广州东站枢纽，均为地下线。全线设车站9座，其中换乘8座。它有利于广州市中心城区与南沙新区的快速轨道交通联系，促进南沙新区、南沙自贸区发展，补充南北轴向客流发展走廊，并增强广州东站的综合交通枢纽功能，是国内首批可以实现地铁服务水平的全地下市域快线之一。</p>
<p>广州地铁18号线的建设，有助于实现广州中心城区30分钟内直通南沙自贸区，1小时到达深圳、东莞、佛山等邻近城市达珠三角其他城市。未来，广州地铁18和22号线计划向南延伸至珠海、中山，向北延伸连接广清城际铁路，从而把广州打造成为国际性综合交通枢纽。而广州地铁18号线无疑将成为大湾区地铁网南北向交通大动脉，贯通粤港澳大湾区1小时生活圈。</p>
]]></content>
      <categories>
        <category>map</category>
      </categories>
      <tags>
        <tag>城市</tag>
        <tag>地铁</tag>
      </tags>
  </entry>
  <entry>
    <title>广州地铁线路图</title>
    <url>/map/metro-guangzhou.html</url>
    <content><![CDATA[<p><img src="/images/map/metro-guangzhou.gif"></p>
]]></content>
      <categories>
        <category>map</category>
      </categories>
      <tags>
        <tag>城市</tag>
        <tag>地铁</tag>
      </tags>
  </entry>
  <entry>
    <title>杭州地铁线路图</title>
    <url>/map/metro-hangzhou.html</url>
    <content><![CDATA[<p><img src="/images/map/metro-hangzhou.gif"></p>
]]></content>
      <categories>
        <category>map</category>
      </categories>
      <tags>
        <tag>城市</tag>
        <tag>地铁</tag>
      </tags>
  </entry>
  <entry>
    <title>香港地铁线路图</title>
    <url>/map/metro-hongkong.html</url>
    <content><![CDATA[<p><img src="/images/map/metro-hongkong.jpg"></p>
]]></content>
      <categories>
        <category>map</category>
      </categories>
      <tags>
        <tag>城市</tag>
        <tag>地铁</tag>
      </tags>
  </entry>
  <entry>
    <title>澳门地铁线路图</title>
    <url>/map/metro-macau.html</url>
    <content><![CDATA[<p><img src="/images/map/metro-macau.jpg"></p>
]]></content>
      <categories>
        <category>map</category>
      </categories>
      <tags>
        <tag>城市</tag>
        <tag>地铁</tag>
      </tags>
  </entry>
  <entry>
    <title>南京地铁线路图</title>
    <url>/map/metro-nanjing.html</url>
    <content><![CDATA[<p><img src="/images/map/metro-nanjing.png"></p>
]]></content>
      <categories>
        <category>map</category>
      </categories>
      <tags>
        <tag>城市</tag>
        <tag>地铁</tag>
      </tags>
  </entry>
  <entry>
    <title>巴黎地铁线路图</title>
    <url>/map/metro-paris.html</url>
    <content><![CDATA[<p><img src="/images/map/metro-paris.gif"></p>
]]></content>
      <categories>
        <category>map</category>
      </categories>
      <tags>
        <tag>城市</tag>
        <tag>地铁</tag>
      </tags>
  </entry>
  <entry>
    <title>上海地铁线路图</title>
    <url>/map/metro-shanghai.html</url>
    <content><![CDATA[<p><img src="/images/map/metro-shanghai.gif"></p>
]]></content>
      <categories>
        <category>map</category>
      </categories>
      <tags>
        <tag>城市</tag>
        <tag>地铁</tag>
      </tags>
  </entry>
  <entry>
    <title>深圳地铁线路图</title>
    <url>/map/metro-shenzhen.html</url>
    <content><![CDATA[<p><img src="/images/map/metro-shenzhen.gif"></p>
]]></content>
      <categories>
        <category>map</category>
      </categories>
      <tags>
        <tag>城市</tag>
        <tag>地铁</tag>
      </tags>
  </entry>
  <entry>
    <title>新加坡地铁线路图</title>
    <url>/map/metro-singapore.html</url>
    <content><![CDATA[<p><img src="/images/map/metro-singapore.jpg"></p>
]]></content>
      <categories>
        <category>map</category>
      </categories>
      <tags>
        <tag>城市</tag>
        <tag>地铁</tag>
      </tags>
  </entry>
  <entry>
    <title>苏州地铁线路图</title>
    <url>/map/metro-suzhou.html</url>
    <content><![CDATA[<p><img src="/images/map/metro-suzhou.gif"></p>
]]></content>
      <categories>
        <category>map</category>
      </categories>
      <tags>
        <tag>城市</tag>
        <tag>地铁</tag>
      </tags>
  </entry>
  <entry>
    <title>台中地铁线路图</title>
    <url>/map/metro-taichung.html</url>
    <content><![CDATA[<p><img src="/images/map/metro-taichung.png"></p>
]]></content>
      <categories>
        <category>map</category>
      </categories>
      <tags>
        <tag>城市</tag>
        <tag>地铁</tag>
      </tags>
  </entry>
  <entry>
    <title>台北地铁线路图</title>
    <url>/map/metro-taipei.html</url>
    <content><![CDATA[<p><img src="/images/map/metro-taipei.jpg"></p>
]]></content>
      <categories>
        <category>map</category>
      </categories>
      <tags>
        <tag>城市</tag>
        <tag>地铁</tag>
      </tags>
  </entry>
  <entry>
    <title>软件专利的荒谬性（Patent Absurdity）</title>
    <url>/movies/patent-absurdity.html</url>
    <content><![CDATA[<iframe src="//player.bilibili.com/player.html?aid=15221360&bvid=BV1sx411u7qy&cid=24774214&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>



<p>官网：<a href="http://patentabsurdity.com/watch.html">http://patentabsurdity.com/watch.html</a></p>
<ul>
<li>导演、拍摄、编辑：Luca Lucarini</li>
<li>制片人：Jamie King</li>
<li>动画制作：Christopher Allan Webber</li>
<li>混音：Matt Smith</li>
<li>由自由软件基金会赞助</li>
<li>简体中文字幕制作者：阮一峰</li>
<li>本片讲述了软件专利案件以及软件专利对软件开发者和整体经济的伤害</li>
<li>本片的官方网站：<a href="http://patentabsurdity.com/">http://patentabsurdity.com</a></li>
<li>本片以及本片中文字幕的使用遵循以下协议：<a href="http://creativecommons/">http://creativecommons</a>.</li>
</ul>
]]></content>
      <categories>
        <category>movies</category>
      </categories>
      <tags>
        <tag>纪录片</tag>
        <tag>自由软件</tag>
        <tag>开源软件</tag>
      </tags>
  </entry>
  <entry>
    <title>The Powerful Words</title>
    <url>/reading/powerful-words.html</url>
    <content><![CDATA[<blockquote>
<p>Make the most of everyday.<br>每一天都要做到最好</p>
</blockquote>
<blockquote>
<p>Intelligence is the ability to avoid doing work, yet getting the work done. —— Linus Torvalds</p>
</blockquote>
<blockquote>
<p>允许自己检讨自己，生命就会开始改变。</p>
</blockquote>
<blockquote>
<p>人生最大的风险，就是从不冒险。</p>
</blockquote>
<blockquote>
<p>有勇氣離開海岸，才能發現新海洋。—— 美國作家丹尼爾‧亞伯拉罕（Daniel Abraham）</p>
</blockquote>
<blockquote>
<p>从小我父母就一直鼓励我去追我的梦想。他们会说：“大不了就是你不成功，但是不能不去追求你的梦想。不能放弃，去试试看。” —— JeremyLin 林书豪</p>
</blockquote>
<blockquote>
<p>“You got a dream, you gotta protect it. people can’t do something themselves, they wanna tell you you can’t do it. If you want something, go get it.”<br>不要別人告訴你該做什麼，有夢想，就自己去保護。他人做不成什麼事情，就會跟你說你也做不成。如果你想要什麼，就要去爭取！ ——《當幸福來敲門》</p>
</blockquote>
<blockquote>
<p>如果有一天：你不再寻找爱情，只是去爱；你不再渴望成功，只是去做；你不再追求空泛的成长，只是开始修养自己的性情；你的人生一切，才真正开始。—— 纪伯伦</p>
</blockquote>
<blockquote>
<p>命定的局限尽可永在，不屈的挑战却不可须臾或缺。—— 史铁生</p>
</blockquote>
]]></content>
      <categories>
        <category>reading</category>
      </categories>
      <tags>
        <tag>名言</tag>
        <tag>激励</tag>
        <tag>力量</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 临时启动简单的 HTTP 服务器</title>
    <url>/coding/python-run-simple-http-server.html</url>
    <content><![CDATA[<p>有时候我们需要临时启动一个简单的 Web Server 进行测试或分享文件，当然可以用 Apache、Nginx 这些 HTTP 服务，不过又显得过于麻烦。其实 Python 自带了一个简单的内建 HTTP 服务器，这时候用它就特别合适了！</p>
<p>基本命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python -m Web服务器模块 [端口号，默认8000]</span><br></pre></td></tr></table></figure>

<p>这里的“Web服务器模块”有以下三种：</p>
<ul>
<li>BaseHTTPServer: 提供基本的 Web 服务和处理器类，分别是 HTTPServer 和 BaseHTTPRequestHandler；</li>
<li>SimpleHTTPServer: 包含执行 GET 和 HEAD 请求的 SimpleHTTPRequestHandler 类；</li>
<li>CGIHTTPServer: 包含处理 POST 请求和执行 CGIHTTPRequestHandler 类。</li>
</ul>
<p>例如：对于 Python2，只需要在你希望作为 Web 服务器根目录的位置，执行如下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python -m SimpleHTTPServer 8080</span><br></pre></td></tr></table></figure>

<p>这将会使用 8080 端口提供 Web 服务，你可以访问 <a href="http://localhost:8080/">http://localhost:8080</a> 试试。</p>
<p>对于 Python3，则可以使用如下命令启动 Web 服务：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 -m http.server 8080</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统革命-Revolution OS</title>
    <url>/movies/revolution-os.html</url>
    <content><![CDATA[<iframe src="//player.bilibili.com/player.html?aid=796140504&bvid=BV1iC4y187nT&cid=235560964&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>


<p>非常经典的有关自由软件运动的纪录片</p>
<p><a href="http://www.revolution-os.com/">http://www.revolution-os.com</a></p>
]]></content>
      <categories>
        <category>movies</category>
      </categories>
      <tags>
        <tag>纪录片</tag>
        <tag>自由软件</tag>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>Source List for GetIoT</title>
    <url>/common/source-list-getiot.html</url>
    <content><![CDATA[<h2 id="DOMESTIC"><a href="#DOMESTIC" class="headerlink" title="DOMESTIC"></a>DOMESTIC</h2><ul>
<li><a href="https://tinylab.org/">泰晓科技</a></li>
<li><a href="https://www.esbf.org/">嵌入式系统联谊会</a></li>
</ul>
<h2 id="HACKER"><a href="#HACKER" class="headerlink" title="HACKER"></a>HACKER</h2><ul>
<li><a href="https://hackaday.com/">HACKADAY</a></li>
<li><a href="https://hackaday.io/">HACKADAY.IO</a></li>
</ul>
<h2 id="OPEN-SOURCE"><a href="#OPEN-SOURCE" class="headerlink" title="OPEN SOURCE"></a>OPEN SOURCE</h2><ul>
<li><a href="https://itsfoss.com/">It’s FOSS</a></li>
<li><a href="https://bootlin.com/">bootlin</a></li>
<li><a href="https://opensource.com/">opensource.com</a></li>
</ul>
<h2 id="INFO"><a href="#INFO" class="headerlink" title="INFO"></a>INFO</h2><ul>
<li><a href="https://www.linuxfordevices.com/">Linux for Devices</a></li>
<li><a href="https://linux.cn/">Linux 中国◆开源社区</a></li>
</ul>
<h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><ul>
<li><a href="https://linux.cn/">Linux 中国 (opens new window)</a> ：提供各种资讯、文章、技术</li>
<li><a href="https://www.shiyanlou.com/">实验楼 (opens new window)</a> ：免费提供了 Linux 在线环境，不用在自己机子上装系统也可以学习 Linux，超方便实用。</li>
<li><a href="http://linux.vbird.org/">鸟哥的 linux 私房菜 (opens new window)</a> ：非常适合 Linux 入门初学者看的教程。</li>
<li><a href="http://www.linuxidc.com/">Linux 公社 (opens new window)</a> ：Linux 相关的新闻、教程、主题、壁纸都有。</li>
<li><a href="http://www.linuxde.net/">Linux Today (opens new window)</a> ：Linux 新闻资讯发布，Linux 职业技术学习！。</li>
</ul>
<h2 id="IoT"><a href="#IoT" class="headerlink" title="IoT"></a>IoT</h2><ul>
<li><a href="https://iottechnews.com/">IoTnews</a></li>
<li><a href="https://www.iotforall.com/">IoT for all</a> <span class="github-emoji" alias="star" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">&#x2b50;</span></li>
</ul>
<h2 id="COMMUNITY"><a href="#COMMUNITY" class="headerlink" title="COMMUNITY"></a>COMMUNITY</h2><ul>
<li><a href="https://dev.to/">Dev Community</a></li>
</ul>
<h2 id="SCIENCE"><a href="#SCIENCE" class="headerlink" title="SCIENCE"></a>SCIENCE</h2><ul>
<li><a href="https://www.sciencedirect.com/">ScienceDirect</a></li>
</ul>
]]></content>
      <tags>
        <tag>信息世界</tag>
      </tags>
  </entry>
  <entry>
    <title>Source List for ZeroTogether</title>
    <url>/common/source-list-zerotogether.html</url>
    <content><![CDATA[<h2 id="NGO"><a href="#NGO" class="headerlink" title="NGO"></a>NGO</h2><ul>
<li><a href="https://wwf.panda.org/">WWF</a></li>
<li><a href="https://www.greenpeace.org/">绿色和平</a></li>
<li><a href="http://www.fon.org.cn/">自然之友</a></li>
<li><a href="http://www.lingfeiqi.org/">零废弃联盟</a></li>
<li><a href="http://www.yjgz.org/">宜居广州</a></li>
<li><a href="http://www.cdgyy.org/">成都根与芽</a></li>
<li><a href="http://aifen.org/">上海爱芬环保</a></li>
<li><a href="http://www.ipe.org.cn/">IPE 公共环境研究中心</a></li>
<li><a href="http://www.betterblue.net/">无境深蓝</a></li>
<li><a href="https://www.zhihu.com/org/bai-tuo-su-fu">摆脱塑缚</a></li>
<li><a href="https://pcd.org.hk/">社区伙伴 PCD</a></li>
<li><a href="https://www.c40.org/">C40 Cities</a></li>
<li><a href="https://www.chinagoingout.org/">中南屋</a></li>
</ul>
<h2 id="INFO"><a href="#INFO" class="headerlink" title="INFO"></a>INFO</h2><ul>
<li><a href="https://www.drawdown.org/">DRAW DOWN</a></li>
<li><a href="https://cn.weforum.org/">世界经济论坛</a></li>
<li><a href="https://chinadialogue.net/">中外对话</a> <span class="github-emoji" alias="star" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">&#x2b50;</span></li>
<li><a href="http://www.reei.org.cn/">磐之石环境与能源研究中心</a> <span class="github-emoji" alias="star" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">&#x2b50;</span></li>
<li><a href="https://www.wri.org.cn/">世界资源研究所</a></li>
<li><a href="http://www.sdg-china.net/">可持续发展经济导刊</a></li>
<li><a href="https://huanbao.bjx.com.cn/">北极星环保网</a></li>
<li><a href="http://eastasia.iclei.org/">ICLEI</a></li>
<li><a href="http://stateofgreen.cn/">State of Green</a></li>
<li><a href="https://www.decadeonrestoration.org/">Ecosystem Restoration 2021-2030</a></li>
<li><a href="https://climatefresk.org/">Climate Fresk</a></li>
<li><a href="https://www.energy-reporters.com/">Energy Reporters</a></li>
<li><a href="https://allafrica.com/">allAfrica</a></li>
<li><a href="https://www.treehugger.com/">Treehugger | Sustainability for All</a></li>
<li><a href="https://www.shiwuzq.com/portal.php">人民食物主权</a></li>
<li><a href="https://e-info.org.tw/">环境资讯中心（台湾）</a> <span class="github-emoji" alias="star" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">&#x2b50;</span></li>
</ul>
<h2 id="COMMUNITY"><a href="#COMMUNITY" class="headerlink" title="COMMUNITY"></a>COMMUNITY</h2><ul>
<li><a href="https://www.pachamama.org/">地球妈妈</a></li>
<li><a href="https://www.onearmy.earth/">One Army</a></li>
</ul>
<h2 id="FOUNDATION"><a href="#FOUNDATION" class="headerlink" title="FOUNDATION"></a>FOUNDATION</h2><ul>
<li><a href="http://www.vankefoundation.org/">万科公益基金会</a></li>
<li><a href="http://www.cbcgdf.org/">中国绿发会</a></li>
</ul>
<h2 id="ZERO-WASTE"><a href="#ZERO-WASTE" class="headerlink" title="ZERO WASTE"></a>ZERO WASTE</h2><ul>
<li><a href="https://zerowastehome.com/">ZERO WASTE HOME</a></li>
<li><a href="https://zerowastemalaysia.org/">Zero Waste Malaysia</a></li>
<li><a href="https://zerowasteworld.org/">Zero Waste World</a></li>
</ul>
<h2 id="BUSINESS"><a href="#BUSINESS" class="headerlink" title="BUSINESS"></a>BUSINESS</h2><ul>
<li><a href="https://www.wm.com/">Waste Management</a></li>
<li><a href="https://www.terracycle.cn/">泰瑞环保</a></li>
<li><a href="https://www.aobag.com/">奥北环保</a></li>
<li><a href="https://www.fmy90.com/">飞蚂蚁</a></li>
<li><a href="https://www.duozhuayu.com/">多抓鱼</a></li>
<li><a href="https://www.starfieldcn.com/">星期零</a></li>
<li><a href="https://www.zerozero.com.tw/">Zero Zero | 台湾</a></li>
<li><a href="https://www.mymizu.co/">Mymizu | 日本</a></li>
<li><a href="https://www.resq-club.com/">ResQ CLUB | 欧洲</a></li>
<li><a href="https://www.valuevillage.com/">Value Village 二手商店</a></li>
<li><a href="https://www.foodinc.com.cn/">小食代</a></li>
</ul>
<h2 id="UP"><a href="#UP" class="headerlink" title="UP"></a>UP</h2><ul>
<li><a href="https://space.bilibili.com/18979787">Eco梦儿</a></li>
<li><a href="https://space.bilibili.com/524809503">壹个袋子</a></li>
<li><a href="">山東女孩JING</a></li>
<li><a href="">素食南安</a></li>
<li><a href="https://www.youtube.com/c/%E6%89%BE%E8%94%AC%E9%A3%9FTraveggo/">找蔬食 Traveggo</a></li>
<li><a href="https://www.instagram.com/rethink.tw/">RE-THINK 重新思考 | 海岛子民的环保态度</a></li>
</ul>
<h2 id="播客"><a href="#播客" class="headerlink" title="播客"></a>播客</h2><ul>
<li>海外智库能源与气候变化报告解读</li>
<li>碳笑风生</li>
<li>七个白菜</li>
<li>八九不离食</li>
<li>声东击西</li>
<li>环球地理</li>
</ul>
<h2 id="NEWS"><a href="#NEWS" class="headerlink" title="NEWS"></a>NEWS</h2><ul>
<li><a href="https://www.sciencenews.org/">ScienceNews</a></li>
<li><a href="https://www.globaltimes.cn/">GLOBAL TIMES</a></li>
<li><a href="https://weekly.caixin.com/">财新周刊</a></li>
</ul>
]]></content>
      <tags>
        <tag>信息世界</tag>
      </tags>
  </entry>
  <entry>
    <title>TED：改变自己，只需要两年时间</title>
    <url>/movies/ted-you-dont-need-more-than-two-years.html</url>
    <content><![CDATA[<h2 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h2><p><strong>You don’t Need More Than Two Years</strong></p>
<iframe src="//player.bilibili.com/player.html?aid=883417381&bvid=BV1TK4y1b77M&cid=199198207&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>

<hr>
<h2 id="中英文对照"><a href="#中英文对照" class="headerlink" title="中英文对照"></a>中英文对照</h2><p><strong>两年可以做什么</strong></p>
<p>Two years is nothing, but at the same time, a lot can be accomplished in two years. You can try a sport you’ve always wanted to start, and become a great at it.</p>
<p>两年时间不算什么，但在这段时间里，我们可以做很多事情。你可以尝试练习一项你一直想要开始的运动，然后成为一名高手。</p>
<p>You can start a morning routine, and affect your mood and stress at a deep level. You can meditate for a few minutes per day, become more self-aware and change the way you react to problem.</p>
<p>你可以开始制定某项早间习惯，它会从深层次影响你的情绪和压力。你每天可以冥想一分钟，这样就可以加强自我意识，提高应对问题的能力。</p>
<p>You can start a business and make it a big success.</p>
<p>你可以开创一项事业，并让它走向成功。</p>
<p>Two years is nothing and extremely easy to waste.</p>
<p>but with small actions , substantial commitment and consistency, you can make it count, a lot.</p>
<p>两年的时间不算什么，也很容易浪费掉，但只要有微小的行动、实质性的付出和坚持，你就可以让它变得更有价值。</p>
<p>Two years being passive is a blink of an eye. Two years moving towards goals every single day is plenty of time. It’s just a matter of perspective.</p>
<p>消极度日，两年转眼即逝。每天有目标地前进，两年就意味着更多的时间。这仅仅是看问题的角度不同而已。</p>
<p>There is nothing that cannot be accomplished in two years with enough effort.</p>
<p>如果足够努力，没有什么事情是两年内不能实现的。</p>
<p><strong>Start something you’ve wanted to do.</strong></p>
<p><strong>开始做你一直想做的事情。</strong></p>
<p>You’re not too old for the things you were dreaming of doing when you were a kid. You can still do extreme sports if you wish to. You can start playing a musical instrument. You can become a photographer. In two years from now, you’ll be great at it if you really want to.</p>
<p>对你年少时的梦想来说，你永远不会太老。只要你想，你还是能去做极限运动。你还是能去学习乐器。你还是能成为一名摄影师。从现在起的两年时间，只要你真的想要，你就能变得很厉害。</p>
<p>Don’t let your past indicate who you are. You don’t have to be the same person you have always been. Don’t let fear control you. Don’t let the social standards conform you. Age is just a number.</p>
<p>不要让你的过去决定你是谁。你也不必一直和以前一样。不要让恐惧支配你。不要让社会标准囚禁你。年龄只是个数字而已。</p>
<p>We should all empower our uniqueness and fight against our own limitations.</p>
<p>我们所有人都应赋予我们独特性，并与自己的局限作斗争。</p>
<p>By doing things you love on daily basis even for a few minutes, you’ll learn to enjoy the journey.</p>
<p>每天去做你喜欢做的事情，哪怕只有几分钟，你也会享受这个过程。</p>
<p>The days will become more than just a means to an end. You’ll see yourself evolving.</p>
<p>每天会变得更有意义，不会被虚度。你也会看到自己的进步。</p>
<p><strong>Be in control</strong></p>
<p><strong>保持自律</strong></p>
<p>If you have the choice between feeling great, energetic and in a positive mood, versus feeling sleepy and moody, what would you choose? It’s just a choice which combined with small, even tiny actions like reducing meat or alcohol consumption.</p>
<p>如果你能选择让自己感觉棒棒的，精力旺盛，乐观向上，亦或是疲惫着，喜怒无常，你会选哪一个？这就是个简单的选择，再加上小小的行动比如少吃肉或少喝酒.</p>
<p>or simply drinking more water, walking the stairs or biking to the office, you can do wonders. It’s not about the end goal, it’s about daily actions towards it.</p>
<p>再或是多喝点水，爬楼梯或骑脚踏车上班，你就会创造奇迹了。这么做不是为了简单地达到目标，而是为了每天都能够朝这个方向进步。</p>
<p>It’s also the reason why morning routines, or ten minutes daily meditation sessions are bringing such great changes in terms of mood, productivity, stress management, ect.</p>
<p>这也是为什么早间的习惯和十分钟的每日冥想都能带给人巨大的改变，比如情绪、生产力和压力管理能力的改善。</p>
<p>Replace TV shows and movies by documentaries and books. Minitor your days more getting control of how you spend your time. Take back the control of your health, mood and time.</p>
<p>用纪录片和书籍取代电视节目和电影。加强监督自己的日常，控制自己利用时间的方式。夺回你对健康、情绪和时间的掌控权。</p>
<p>Practive gratefulness. See the results in two years.</p>
<p>学会感激。两年后见分晓。</p>
<p><strong>Silence your ego</strong></p>
<p><strong>压制你的自负</strong></p>
<p>Be kind with people. Start with your family, don’t go mad one more time. Stop judging, see the good in them, and remember that you love them more than anything.</p>
<p>善待他人，再也不要和家人发火。停止批判，看见他们好的那面，并记得你爱他们超过一切。</p>
<p>In your working life, being kind and nice can bring you more respect from people who surround you than being bossy and aggressive. Learn to say ‘No’ often (for the right reasons), people will accept it more and value your ‘Yes’ more, because your times’ value will increase.</p>
<p>在职场上，与人为善，相比发号施令和争强好胜，这会让你周围的人更尊重你。学会在正当理由下多说“不”，这样人们会更容易接受，且更看重你说的“好”，因为你的时间价值会增加。</p>
<p>You don’t need to be scary to be respected. It’s about building trust and healthy long term relationships. Try this and in two years from now your reality will be so different. Silence your ego, love and trust others enough for two years, harvest for ten years or more.</p>
<p>你不用通过变得吓人去获得尊重。重点是要建立起相互信任且健康的长期关系。试试看，从现在开始起的两年，你的生活将会变得大不同。用两年时间去压制你的自负，去爱和信任他人，十年甚至更长的时间你都会因此受益。</p>
<p><strong>Set long term goals and do small actions everyday towards them.</strong></p>
<p><strong>设定一个长期的目标，然后坚持每天即便是微小的行动。</strong></p>
<p>It has a lot to do with setting goals, but goals without actions are just wishes. The easiest way to reach goals is through daily and consistent small (even tiny) actions. It’s all about consistency, commitment, and regularity. Success is not an event, it’s a process and a mindset.</p>
<p>这和目标的设定有很大的关系，但光有目标没有行动就只能是美好的愿望而已。最简单达成目标的方法就是，每天都坚持微小的行动。一切都在于要建立一致性、要坚持付出和养成规律。成功不是一个偶然事件，它是个长久的过程和心态。</p>
<p>Small actions are putting you in the position of succeeding. Small actions make huge differences.</p>
<p>微小的行动能让你走向成功的道路。微小的行动能带来巨大的改变。</p>
<p>Look at yourself in the mirror in two years and you’ll think ‘that was quick’.</p>
<p>两年后在镜子中看看自己，你会想“时间过的真快”。</p>
<p><strong>Every day counts.</strong></p>
<p><strong>每一天都很重要。</strong></p>
]]></content>
      <categories>
        <category>movies</category>
      </categories>
      <tags>
        <tag>TED演讲</tag>
        <tag>改变</tag>
      </tags>
  </entry>
  <entry>
    <title>秘密 —— 宇宙吸引力法则</title>
    <url>/reading/the-secret.html</url>
    <content><![CDATA[<p><img src="/images/static/The_Secret_1.jpeg"></p>
<p>第一次知道《秘密》这本书，是 Mr.Yang 推荐的，他分享了他是如何从沮丧、迷茫的状态中获得能量，找到自己的人生方向，并逐步把它实现的。</p>
<p>前段时间在老板的书架上看到了这本书，于是我就借过来看了一遍。</p>
<h2 id="吸引力法则"><a href="#吸引力法则" class="headerlink" title="吸引力法则"></a>吸引力法则</h2><p>这本书其实很简单，只讲了一个东西，就是所谓的秘密——吸引力法则。主要分为两部分，前面一部分介绍吸引力法则的概念和方法，后面一部分介绍吸引力法则在金钱、关系、世界、生命健康还有个人成长方面的运用。</p>
<p>所谓的吸引力法则，就是你心里面一直想呀想呀，你就会得到你想要的东西。</p>
<p><img src="/images/static/%E5%86%A5%E6%83%B3%E5%8A%A8%E7%94%BB.gif"></p>
<p>听起来很玄学对不对？我一开始也是这么认为的。尤其是这本书一直在强调通过想象力向宇宙发出讯号，而对于如何执行、如何落实却只字不提，这让我们这些工科男很是怀疑。</p>
<p>不过我感觉这是本书有意为之，毕竟吸引力法则更多是属于心理学范畴的内容。书里面有一句话很有意思 ——  “<strong>对宇宙来说，做每件事情都是毫不费力的，小草不需要努力就可以生长，它毫不费力。</strong>”从这句隐晦的话中，也验证了我对本书的理解。这也就是为什么本书不讲实际操作，只强调你要想象、相信你想成为的模样就可以了。</p>
<p>小草的生长是不会痛的，如果感觉到痛，那一定是哪里出现了问题，你需要重新审视一下。用我自己的话来说，就是当你真的真的很想做成一件事情的时候，你的注意力就会放在这件事情上面，投入时间、精力，去寻找、去思考、去实践，这个过程对于外人来说可能是非常痛苦的，但对于你来说是愉悦的、有趣的，因为你就是很想做成这件事情，你乐在其中。</p>
<p><img src="/images/static/The_Secret_2.jpeg"></p>
<h2 id="创造你的生活"><a href="#创造你的生活" class="headerlink" title="创造你的生活"></a>创造你的生活</h2><p>我相信很多人在漫长的生命岁月里，都会在某些时刻对自己的状况产生不满。如果你仔细想想，统计一下每天的时间都花在了哪些地方，在想些什么、看些什么、做些什么，你马上就会知道问题根源。</p>
<p>我很认同书中的一句话 —— 你的思想和感受，创造了你的生活。</p>
<blockquote>
<p>我们现在的一切，都是过去思想的结果。—— 佛陀</p>
</blockquote>
<p>所以思想真的很重要，它能在你意识不到的情况下影响你的行为。那我们该如何创造想要的生活呢？</p>
<p>按照吸引力法则，只需要三个步骤就能重新创造你的生活！</p>
<h3 id="步骤一：要求"><a href="#步骤一：要求" class="headerlink" title="步骤一：要求"></a>步骤一：要求</h3><p>向宇宙发出讯号，提出你的要求。</p>
<p>你可以提任何要求，只要你真的想要就可以。比如要成为百万富翁，要一个灵魂伴侣，要一个强壮的身体……</p>
<p>关键是你要先理清你想要的到底是什么？不能随便向宇宙发出讯号哦，因为宇宙只会帮你实现，不会帮你判断。如果你想成为一个坏人，宇宙也会帮你实现的。</p>
<h3 id="步骤二：相信"><a href="#步骤二：相信" class="headerlink" title="步骤二：相信"></a>步骤二：相信</h3><p>想象并且相信你能拥有，相信“它”已经是你的了，要有“不动摇的信心”！</p>
<p>这是吸引力法则的关键所在，你要开始转变你的思想。比如你的要求是成为百万富翁，即使你现在还没拥有一百万，但你要“假装”已经拥有了。每天早上对着镜子说：“你好，百万富翁！” 这么做的目的是要调整你的频率，源源不断地向宇宙发送讯号。</p>
<p>你不能说：“如果我是百万富翁，我要怎么怎么样……” 而是直接、马上想象自己现在就是百万富翁，相信自己现在就是百万富翁。</p>
<h3 id="步骤三：接收"><a href="#步骤三：接收" class="headerlink" title="步骤三：接收"></a>步骤三：接收</h3><p>最后一步是“接收”，想象自己现在就是百万富翁，以百万富翁的思维和方式去行动，在这个过程感受它。如果你感受到喜悦、快乐，那说明你已经把自己放在你所要的事物的频率上了，等着吧，你很快就会成为百万富翁！</p>
<p>举个例子，如果你只是口头说说，我要成为百万富翁，然后转头去玩游戏、刷微博，晚上回想一天的时候又感觉空虚、无聊、痛苦…… 那这种感觉就不对了，说明你其实并没有那么想成为百万富翁。而如果你将注意力放在你的兴趣或事业上，为了它废寝忘食，更加珍惜时间、更加自律，晚上回想一天的时候动力满满，迫不及待开始明天的工作，还变得愿意分享、帮助他人，感恩现在的所得，那你的物质和精神就会越来越富足。</p>
<p><img src="/images/static/%E5%90%B8%E5%BC%95%E5%8A%9B%E6%B3%95%E5%88%99%E6%A8%A1%E5%9E%8B.png"></p>
<p>我觉得最难的是第一步，因为当你心中清楚想要什么的时候，要求才能完成。这就需要你敢于面对真实的自己、了解自己，知道自己到底想要什么，想成为什么样的人。这真的很难，但也必须要做，因为没有人能替你完成！</p>
<blockquote>
<p> 有信心地踏出第一步，你不需要看到整个楼梯，只要踏出第一步就好。 —— 马丁·路德·金</p>
</blockquote>
<p>你准备好向宇宙下订单了吗？</p>
<h2 id="过去的你不是你"><a href="#过去的你不是你" class="headerlink" title="过去的你不是你"></a>过去的你不是你</h2><p>据不完全统计，世界上 85% 的人都受到原生家庭的不良影响，换句话说，只有 15% 的人觉得自己的家庭是幸福的。所以，你不用觉得自己有多么不幸，不用因为原生家庭的不好而抱怨。如果你总是把焦点放在过去的困境，这样做只会给你带来更多困境。</p>
<p>以前看过一个视频，现在找不到了。讲的是一名交警拦下了一位骑着三轮车的老人，车上除了载有七八百斤木头，还坐着一个生活不能自理的弟弟。他看见交警一脸惶恐，一问才知道，父亲、母亲、妻子、子女相继离世。他带着唯一的亲人在这个世界苦苦挣扎，交警问他为什么还能面带笑容，他回答说：往前看，向前走！</p>
<p>一切都让它过去，不管它是什么。为自己这么做吧。如果你一直抱怨或责怪过去的某人或某事，你只是在伤害自己。你是唯一创造自己“该有的生活”的人。当你刻意把焦点放在你想要的事物上，开始散发出美好的感觉时，吸引力法则就会予以回应。你只要开始去做，之后，你就能释放出魔法。</p>
<blockquote>
<p>一个人若是一直想着人生的黑暗面，不断地活在过去的不幸和失望之中，他就是在祈求未来有着相同的不幸和失望。如果你认为未来只有噩运，你就是在祈求它，当然就会得到噩运。——普兰特斯·马德福</p>
</blockquote>
<h2 id="我的秘密"><a href="#我的秘密" class="headerlink" title="我的秘密"></a>我的秘密</h2><p>虽然我以前不知道这个“秘密”，不过我好像已经在运用吸引力法则了。</p>
<ul>
<li>比如有时候特别想见一个人，然后突然就遇见了。</li>
<li>比如工作中特别想解决一个问题，想呀想呀，然后就解决了。</li>
<li>比如我小时候生活在山区小镇上，以前的成绩一般，但是因为我太想离开那个地方了，知道要考高中之后开始想象以后的生活，于是初三那年成绩突然变得超好。</li>
<li>比如以前练习打篮球，不断地看科比的录像，想象自己在场上的表现和打法，甚至是动作细节，然后就真的能把动作做出来。</li>
<li>还有前段时间获得了 2020 RT-Thread 社区杰出贡献奖，其实在 2019 年的开发者大会上，我就开始想象明年我站在领奖台上的情景，结果真的实现了。</li>
</ul>
<p>当然，吸引力法则也会带来不好的一面。</p>
<ul>
<li>比如我以前打橄榄球比赛，就因为自信心不足，不够相信自己和球队能赢，所以常常是屡战屡败。</li>
<li>比如谈恋爱的时候，会放大对方的缺点，并且给对方贴标签，然后在脑海里不断加强，结果对方就真的在你面前表现成你所想的那样，最后不欢而散。</li>
<li>还有在创业的阶段，如果创始人自己都不敢想象成功的场景，不敢相信项目的意义和价值，团队就会慢慢失去活力，直到消亡。</li>
</ul>
<h2 id="互联网的秘密"><a href="#互联网的秘密" class="headerlink" title="互联网的秘密"></a>互联网的秘密</h2><p>仔细一想，如今的互联网可真是把吸引力法则展现得淋漓尽致！</p>
<p>你在网络上浏览了什么，系统就会记录下来，帮你分类，给你贴标签。然后通过分类和推荐算法，实现千人千面，吸引来了更多和你一样频率的人和事。所谓物以类聚，人以群分。</p>
<p>凡事都有两面性，好处是这样真的能够帮你节省时间，让你更快找到你想要的资源，加速你的成长。坏处是这样会让你产生错觉，觉得大部分人都跟你一样，慢慢影响你的世界观，失去同理心和敏感度，对于自控力不强的人，更是深陷推荐算法当中无法自拔。</p>
<p>只有意识到这一点，你才能掌握这些网络工具，为你所用，而不是成为平台和巨头的附庸。</p>
<p>如果你问我：“我要怎么样才能成为优秀的人？” 我的回答是：“多跟优秀的人在一起，对不好的东西 say NO！”</p>
<p>近朱者赤近墨者黑，说的不就是吸引力法则吗？</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我读完这本书有一周时间了，神奇的是我真的开始有意识地控制我的思想。</p>
<p>比如我以前对某一类人有偏见，现在就会更多从好的方面去想，于是就能发现他们的优点。还有工作当中听到有人说：“这个事情不好搞，可能不行哦”，我就会刻意让那些消极的词语在我大脑里消失，告诉自己：“这个事情能做好，一定有更好的办法”！</p>
<p>我觉得吸引力法则在人际关系的处理中效果是很明显的，你对他人表现更多善意，你也会收获更多善意，推动整个事情往好的方向发展。其他方面，包括财富、创业、健康等等也有作用，但需要更多方法和练习，在执行过程也需要更多耐心和等待。</p>
<p>但一定要敢于想象、勇于踏出第一步！心想才能事成嘛~ 有句话不是这样说的嘛，如果你知道去哪，全世界都会为你让路。</p>
<p><img src="/images/static/imPOSSIBLE.jpg"></p>
<p>最后我总结了一下，吸引力法则的本质 —— 通过想象力不断强化目标，从而影响我们的行为，达到改变结果的效果。</p>
<p>试想一下，如果我们能提高主观能动性、提高大脑的利用率、提高时间的利用率，我们一定会做成很多事情！</p>
<p>我已经向宇宙下订单了，你呢？</p>
<p><img src="/images/static/%E7%A7%98%E5%AF%86%E6%B3%95%E5%88%99.jpg"></p>
]]></content>
      <categories>
        <category>reading</category>
      </categories>
      <tags>
        <tag>心理学</tag>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>这个部落格</title>
    <url>/journal/this-blog.html</url>
    <content><![CDATA[<p>终于还是开通了这个部落格（Blog），而这，就是第一篇文章。我将会在这里记录、发布我的所思所想，内容范围不固定，更新频度也不固定，但是我会尽量保证所分享的内容都是有趣、实用的。</p>
<p>如果你想了解我，可以在导航栏点击“关于”，找到关于我的一些信息以及我的联系方式。</p>
<h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>早在2013年，我就开始在 CSDN 上面写博客，只不过内容偏向于软件技术。在漫长的学习、工作和生活当中，其实有许许多多的事情值得我们去记录。有时候，我们需要停下来，等一下我们的灵魂，充实一下我们的精神世界。</p>
<p>人生有无限可能，所以我想重新开辟一个空间，展示 A 面、B 面、C 面……</p>
<p>我也不知道哪个才是“真正的自我”，也许就是这一个个“可能的自我”，组合起来，才是那个真实的我，管他呢！</p>
<h3 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h3><p>这里可能会分享：</p>
<ul>
<li>软件技术</li>
<li>行业分析</li>
<li>环境保护</li>
<li>读书笔记</li>
<li>生活感悟</li>
<li>运动保健</li>
<li>投资理财</li>
<li>……</li>
</ul>
<p>显然，在有限的生命的，我所触及的事物是有限的，且必然带有主观色彩。所以你们要带着辩证思维去阅读。</p>
<h3 id="愿景"><a href="#愿景" class="headerlink" title="愿景"></a>愿景</h3><p>正如这个网站的 Title 那样，我的目标是 —— <strong>成为自由人</strong>。</p>
<p>人生中有许多值得我们去追求的东西，比如，考一个好大学、找一份好工作、买车、买房、结婚、生子……</p>
<p>然而，对于我来说，我更希望能尽早成为一个自由人。</p>
<p>当我不再需要为钱而工作，不再被各种精神枷锁抑制，我知道，我一定会迸发出强大的创造力，一定会创造更大的价值！</p>
<p>我想，你们也一样。</p>
<h3 id="联系"><a href="#联系" class="headerlink" title="联系"></a>联系</h3><p>邮箱：<a href="mailto:&#108;&#x75;&#104;&#x75;&#97;&#100;&#111;&#x6e;&#103;&#64;&#49;&#54;&#x33;&#46;&#x63;&#x6f;&#109;">&#108;&#x75;&#104;&#x75;&#97;&#100;&#111;&#x6e;&#103;&#64;&#49;&#54;&#x33;&#46;&#x63;&#x6f;&#109;</a></p>
<hr>
<p>2014年夏天</p>
]]></content>
      <categories>
        <category>journal</category>
      </categories>
      <tags>
        <tag>milestone</tag>
      </tags>
  </entry>
  <entry>
    <title>时间和世界时区</title>
    <url>/geography/time-and-timezone-list.html</url>
    <content><![CDATA[<p><img src="/images/science/timezone-map.png"></p>
<ul>
<li>UTC</li>
<li>GMT</li>
<li>CST</li>
<li>PST</li>
</ul>
<p><a href="https://24timezones.com/">https://24timezones.com</a></p>
]]></content>
      <categories>
        <category>geography</category>
      </categories>
      <tags>
        <tag>地理</tag>
      </tags>
  </entry>
  <entry>
    <title>丑苹果</title>
    <url>/journal/ugly-apple.html</url>
    <content><![CDATA[<img src="/images/diary/ugly-apple-01.jpeg" width=600 />

<p>35块买了一箱丑苹果，为了放苹果，收拾了一下，终于腾出了小餐桌。苹果虽然丑了点，却包裹着一颗超甜的冰糖心，突然有点心疼丑果。好像人类社会也一样，不仅要有实力，还要懂得自我营销才行。</p>
<p>以前租房子只会整理两次，第一次是搬进去那天，第二次是搬走那天，现在才发现原来整理东西真的会解压，整理物品的同时也在整理人生。周末删了几十个群、几千张照片和躺在硬盘里的那堆过期代码…… 那些曾经以为是资产的东西，原来是负债。嗯，还是简单一点好。</p>
<img src="/images/diary/ugly-apple-02.jpeg" width=600 />
]]></content>
      <categories>
        <category>journal</category>
      </categories>
      <tags>
        <tag>思考</tag>
      </tags>
  </entry>
  <entry>
    <title>网站备案的流程与注意事项</title>
    <url>/entrepreneurship/whats-the-problem-of-beian.html</url>
    <content><![CDATA[<p>个人网站不能有“关于我们”和“商务合作”之类的页面。</p>
]]></content>
      <categories>
        <category>entrepreneurship</category>
      </categories>
      <tags>
        <tag>创业</tag>
      </tags>
  </entry>
  <entry>
    <title>钱从哪里来 —— 中国家庭的财富方案</title>
    <url>/reading/where-does-the-money-come-from.html</url>
    <content><![CDATA[<p><img src="/images/static/book_money-come_001.jpeg"></p>
<p>香帅老师的这本书，讲的是中国家庭财富积累的底层逻辑。不是理财、投资的具体策略，而是分析在当代社会，一个普通家庭该如何积累财富，也就是 —— 钱从哪里来？</p>
<p>本书结合许多普通人的案例进行论述，从不同的例子当中多少让人看到自己的影子。抛开宏观经济因素，影响一个人或一个家庭财富水平的，主要有三个方面：职业方向、城市选择、资产配置。</p>
<h2 id="职业方向"><a href="#职业方向" class="headerlink" title="职业方向"></a>职业方向</h2><p><img src="/images/static/book_money-come_002.png"></p>
<p>首先是<strong>职业方向</strong>。普通家庭的主要收入来源其实还是工资收入，一份“<strong>滚雪球型</strong>”的职业，能够帮助家庭较快地积累财富。而一份“<strong>推石头型</strong>”的职业，则会延缓财富的积累，这种职业往往也是创造价值增速低、折旧率高的，因此在未来很可能会被机器所取代，面临失业的尴尬。</p>
<p>那什么职业容易被机器和人工智能取代呢？就是那些可编码的工作，即需要重复劳动的工作，而且在这方面机器可能做得比人还好。比如普工/操作工、电话销售员、保险理赔师、出纳员、收银员、新闻编辑等。与此相反，那些需要创新、需要个性化服务的领域，比如软件工程师、医生、教师、律师、理发师等职业，则较难被替代。</p>
<p>职业选择通常与所受教育相关，学历的提升可以直接作用于收入水平。相对来说，高学历会更容易找到“滚雪球型”的职业赛道，并且会带来“学历溢价”。那学历不高的人是不是没有机会呢？也不是，随着中国进入“万元美金社会”，“怕死、爱美、孤独”等社会新常态将激活一些新的职业赛道，比如康复治疗师、美容师、健身教练、心理咨询师、宠物驯导师等。只要找到恰当的职业赛道，也会带来“年资溢价”。</p>
<div class="note default">
    <p>学历溢价 —— 随着学历要求上升，招聘工资随之上升。</p>
    <p>年资溢价 —— 随着工作经验要求上升，招聘薪酬上涨。</p>
</div>

<p><img src="/images/static/book_money-come_003.gif"></p>
<div class="note info"><p>小结：要尽量选择职业坡道长、能快速成长、折旧率低、收入高的职业。</p></div>

<h2 id="城市选择"><a href="#城市选择" class="headerlink" title="城市选择"></a>城市选择</h2><p>然后是<strong>城市选择</strong>。自从改革开放以来，城市化进程不断推进，然而不同的城市拥有不同的财富创造力。可以说，城市决定着你财富的上限，也决定着你财富的下限。</p>
<p>在城市的选择上，通常遵循“就近聚集”的原则，即选择离家最近的经济发达的城市。由于规模越大的城市，学历和工作经验的溢价越高，因此“北上广深”拥有着超强的人口吸附能力。大城市支付给我们的高薪酬，不是因为房价和生活成本更高，而是因为我们的人力资本成长更快。城市规模带来的了许多好处，比如“知识外溢效应”和“专业化溢价”，这也让越来越多人不愿意离开大城市。</p>
<div class="note default">
    <p>知识外溢效应 —— 人口越集聚，我们越有机会和更有经验的人在一起，向更优秀的人学习。</p>
    <p>专业化溢价 —— 随着人们收入的提高，自己完成很多工作的机会成本越来越高，于是大城市对专业化从业人员的数量需求越来越大，愿意支付的溢价也越来越高。</p>
</div>

<p>那小城镇是不是就此没落？也不一定，大城市发展带来规模溢出效应，实际上就是城市规模在进一步扩张。生长在大城市周边的小城镇会夺得先机，形成具备生产能力、产业聚集、劳动力充足的小城镇。而不在大城市群周边的城镇，比如鄂尔多斯依靠便宜的电价、土地以及得天独厚的气候，吸引了众多云计算厂商；甘孜藏族自治州丹巴县八科村依靠新零售物流体系，使得特色农产品进入大城市的市场。</p>
<p><img src="/images/static/book_money-come_004.gif"></p>
<div class="note info"><p>小结：大城市基础设施好、创新能力强、市场发育完善，有助于个人成长和财富积累。</p></div>

<h2 id="资产配置"><a href="#资产配置" class="headerlink" title="资产配置"></a>资产配置</h2><p>最后是<strong>资产配置</strong>。无论国内还是国外，房地产都占了普通居民总财富中的大头。自2000年以来，中国的平均房价大约上涨了2倍，一线城市核心区域的房价涨幅甚至达到10倍以上，如果同样的资金存在银行，很可能连通货膨胀都抵不过。</p>
<p>由于房价上涨过快，各地政府加强了房地产调控，目的在于控制贫富差距，避免炒房，让还没买房的年轻人有机会买房，享受城市的福利。</p>
<p>地理位置是稀缺资源，房价反映的是房子所在土地的价值，即这片土地上的经济增长潜力。未来中国的房价仍然会继续上升，但房价的分化程度也会不断加剧。因此只有买到真正有价值的房子，才能保证投资的回报。</p>
<p>至于其他金融资产，比如股票、基金、债券等，先配置低风险的再配置高风险的。受国际经济形势影响，更要理性投资、适当投资。</p>
<p><img src="/images/static/book_money-come_005.gif"></p>
<div class="note info"><p>小结：中国的经济增速放缓，但不必过度悲观，作为个人要理性投资，作为企业要增强核心竞争力。</p></div>


<p>由于2020年开局不利，建议各位：</p>
<ul>
<li>努力工作</li>
<li>存钱</li>
<li>接受教育</li>
<li>继续努力</li>
</ul>
<p><img src="/images/static/book_money-come_006.gif"></p>
<blockquote>
<p>购买链接：<a href="https://union-click.jd.com/jdc?e=&p=AyIGZRprFQEUAV0cWxwyVlgNRQQlW1dCFFlQCxxKQgFHRE5XDVULR0UVARQBXRxbHB1LQglGaxRKUx0THyNgYnFXIGkCZlwTXgdML0MOHjdUK1sUAxACVR9eFwQiN1Uca0NsEgZUGloUBxEFUStaJQIVB1AfUx0LFgNVHVslBRIOZUYfR1haUgVYCV0yIjdWK2slAiIEZVk1ElYVBgJOXBABQgEGHgtBUEJSUksPFlEQU1MSUxwCGg9lGVoUBhs=">京东</a>、<a href="https://s.click.taobao.com/t?e=m=2&s=yZLdPy06FwYcQipKwQzePOeEDrYVVa64K7Vc7tFgwiHjf2vlNIV67hNZ6tPKWe/8PLNzIt/z56inFi3wFBXvYUtYIXyQ5+daGX93X4IFTwPx/VncyXNiWXW0BscCR/BjdZr7RBnLmJomXO35yxsacVu/Aug5mCZctaSVhgwkRkCwTfVrJiO1T2RsSsXPAUZ0&scm=null&pvid=null&app_pvid=59590_33.5.62.17_633_1614599968567&ptl=floorId:17741&originalFloorId:17741&app_pvid:59590_33.5.62.17_633_1614599968567&union_lens=lensId:PUB@1614599948@0b1a2517_0e71_177eda808d8_308f@026Hzwm1WaB5Mq75ZsMWKJJh">淘宝</a></p>
</blockquote>
]]></content>
      <categories>
        <category>reading</category>
      </categories>
      <tags>
        <tag>城市</tag>
        <tag>财富</tag>
        <tag>职业</tag>
      </tags>
  </entry>
  <entry>
    <title>至少需要多少颗卫星才能准确定位？</title>
    <url>/science/why-do-we-need-four-satellites-for-gps.html</url>
    <content><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>说到卫星定位系统，大家都会想到 GPS（Global Positioning System，全球定位系统）。GPS 是美国从上世纪 70 年代开始研制，历时 20 年，耗资 200 亿美元，于 1994 年全面建成，具有在海、陆、空进行全方位实时三维导航与定位能力的新一代卫星导航与定位系统。早期仅限于军方使用，时至今日，GPS 早已开放给民间做为定位使用，广泛应用于资源勘查、航空、交通、灾害现场等领域。</p>
<p>除了美国的 GPS 系统，世界上知名的卫星导航与定位系统还有：俄罗斯的 GLONASS、欧盟的 GALILEO 以及中国的北斗卫星导航系统（BDS）。</p>
<p><img src="https://img-blog.csdnimg.cn/20200625011353483.png" alt="在这里插入图片描述"></p>
<p>自1994年北斗一号系统工程立项至今，我国用26年的时间实现了59颗北斗卫星（包括55颗北斗导航卫星和4颗北斗导航试验卫星）的发射。2020年6月23日，北斗三号最后一颗全球组网卫星在西昌卫星发射中心点火升空，随着该星进入预定工作轨道，标志着北斗三号全球卫星导航系统星座部署全面完成，北斗系统完整服务全球的目标指日可待。</p>
<p><img src="https://img-blog.csdnimg.cn/2020062501141371.gif" alt="在这里插入图片描述"></p>
<p><strong>北斗卫星导航系统包括三个阶段：</strong></p>
<ul>
<li>第一阶段，2000年年底，发射2颗北斗一号卫星，建成北斗一号系统，向中国提供服务；</li>
<li>第二阶段，2007年-2012年，发射14颗北斗二号卫星，建成北斗二号系统，向亚太地区提供服务；</li>
<li>第三阶段，计划在2020年前后，发射30余颗北斗三号卫星，建成北斗三号系统，即北斗全球系统，向全球提供服务。</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20200625011437777.jpg" alt="在这里插入图片描述"></p>
<h2 id="计算"><a href="#计算" class="headerlink" title="计算"></a>计算</h2><p>那么，问题来了！我们是怎么通过卫星进行定位的呢？至少需要多少颗卫星才能准确定位呢？</p>
<p>下图是卫星定位系统的结构示意图，包括上空的若干颗卫星、地面的监控站以及需要定位的接收器（比如手机）。</p>
<ul>
<li>导航卫星：发射出包含时刻信息（t）和轨道信息（x, y, z）的无线电波；</li>
<li>监控站：负责监测卫星状态，确认卫星轨道并修正卫星时刻偏差；</li>
<li>接收器：接收卫星发射出来的无线电波。</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20200625011612807.png" alt="在这里插入图片描述"></p>
<p>要实现全球定位，需要至少24颗人造卫星，这些卫星无时无刻都围绕着地球旋转。实际上，为了提高精确度和可靠性，无论是北斗还是 GPS、格洛纳斯、伽利略导航系统都有超过24颗卫星。</p>
<p><img src="https://img-blog.csdnimg.cn/20200625011640606.gif" alt="在这里插入图片描述"></p>
<p>那么接收器需要同时接收多少颗卫星的信息才能计算出自身的定位信息呢？</p>
<p>假设接收器在 T 时刻接收到导航卫星 A 的位置信息 ($X_a$, $Y_a$, $Z_a$) 和时刻信息 $T_a$，根据勾股定理，接收器到卫星 A 的距离 $AO$ 与卫星 A 的位置之间的关系表示如下。</p>
<p>$$<br>AO^2 = {((T_a - T) \times c)}^2 = (X_a - X_o)^2 + (Y_a - Y_o)^2 + (Z_a - Z_o)^2<br>$$</p>
<p>其中，$c$ 为无线电波的传播速度（光速：2.99792458 x 10^8^ m/s），$T$ 为接收器接收信号的时刻，($X_o$, $Y_o$, $Z_o$) 为接收器的坐标位置，也就是我们需要求的值。</p>
<p><img src="https://img-blog.csdnimg.cn/20200625011707895.png" alt="在这里插入图片描述"></p>
<p>显然，一个方程无法解出三个变量值，那怎么办？很简单，再接收两颗卫星 B 和 C 的信息，组成三个方程呗！</p>
<p>$$<br>AO^2 = {((T_a - T) \times c)}^2 = (X_a - X_o)^2 + (Y_a - Y_o)^2 + (Z_a - Z_o)^2<br>$$</p>
<p>$$<br>BO^2 = {((T_b - T) \times c)}^2 = (X_b - X_o)^2 + (Y_b - Y_o)^2 + (Z_b - Z_o)^2<br>$$</p>
<p>$$<br>CO^2 = {((T_c - T) \times c)}^2 = (X_c - X_o)^2 + (Y_c - Y_o)^2 + (Z_c - Z_o)^2<br>$$</p>
<p>实在太聪明啦，耶！</p>
<p><img src="https://img-blog.csdnimg.cn/20200625011721956.gif" alt="在这里插入图片描述"></p>
<p>然而，这里有个陷阱 —— 时刻的一致性问题！为了让上面三组方程成立，卫星的 $T_a$、$T_b$、$T_c$ 以及接收器的 $T$ 时刻需要以同一时钟进行测算。由于导航卫星使用十分精密的原子钟，并且由监控站进行修正，因此可认为 $T_a$、$T_b$、$T_c$ 时刻是一致的。但是接收器的时间就不一样啦，只能标识接收器的时钟上的某个时刻，这个时刻可能滞后，也可能超前，无法控制。</p>
<p>那怎么办呐？很简单，把接收器的时钟产生的误差 $\delta$ 提前加入公式里就好啦。也就是说，用 ($T$ - $\delta$) 表示接收器接收到无线电波的准确时刻，多了一个变量，就再增加一组方程呗！</p>
<p><img src="https://img-blog.csdnimg.cn/20200625011804867.png" alt="在这里插入图片描述"></p>
<p>列出四个方程：<br>$$<br>{((T_a - (T - \delta) \times c)}^2 = (X_a - X_o)^2 + (Y_a - Y_o)^2 + (Z_a - Z_o)^2<br>$$</p>
<p>$$<br>{((T_b - (T - \delta) \times c)}^2 = (X_b - X_o)^2 + (Y_b - Y_o)^2 + (Z_b - Z_o)^2<br>$$</p>
<p>$$<br>{((T_c - (T - \delta) \times c)}^2 = (X_c - X_o)^2 + (Y_c - Y_o)^2 + (Z_c - Z_o)^2<br>$$</p>
<p>$$<br>{((T_d - (T - \delta) \times c)}^2 = (X_d - X_o)^2 + (Y_d - Y_o)^2 + (Z_d - Z_o)^2<br>$$</p>
<p>除了 $X_o$ 、$Y_o$ 、$Z_o$ 三个未知数，还有时间误差 $\delta$ 变量。因此，现实世界中至少需要4颗卫星才能计算出接收器的坐标位置。你猜对了吗？</p>
<p><img src="https://img-blog.csdnimg.cn/20200625011919293.gif" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>science</category>
      </categories>
      <tags>
        <tag>科普</tag>
      </tags>
  </entry>
  <entry>
    <title>为什么地球自转越来越慢</title>
    <url>/science/why-the-earth-rotation-is-getting-slower-and-slower.html</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>science</category>
      </categories>
      <tags>
        <tag>科普</tag>
      </tags>
  </entry>
  <entry>
    <title>为什么月有阴晴圆缺？</title>
    <url>/science/why-the-moon-change-shapes.html</url>
    <content><![CDATA[<p><img src="/images/static/The_Moon_20210817.jpeg"></p>
<blockquote>
<p><strong>《水调歌头·明月几时有》</strong></p>
<p>丙辰中秋，欢饮达旦，大醉，作此篇，兼怀子由。</p>
<p>明月几时有？把酒问青天。不知天上宫阙，今夕是何年？我欲乘风归去，又恐琼楼玉宇，高处不胜寒。起舞弄清影，何似在人间？</p>
<p>转朱阁，低绮户，照无眠。不应有恨，何事长向别时圆？人有悲欢离合，月有阴晴圆缺，此事古难全。但愿人长久，千里共婵娟。</p>
</blockquote>
]]></content>
      <categories>
        <category>science</category>
      </categories>
      <tags>
        <tag>科普</tag>
      </tags>
  </entry>
  <entry>
    <title>YC 创业课</title>
    <url>/entrepreneurship/y-combinator-startup.html</url>
    <content><![CDATA[<p><img src="/images/startup/yc-startup-school.png"></p>
<p>Y Combinator（简称 YC）成立于 2005 年，是美国著名创业孵化器，旨在扶持初创企业并为其提供创业指南。</p>
<p>YC 的创始人是《黑客与画家》的作者保罗.格雷厄姆（Paul Graham）。他拥有哈佛大学应用科学（计算机方向）博士学位，并在罗德岛设计学院和佛罗伦萨绘画艺术学院学习过绘画。在编程方面以 Lisp 方面的工作而知名，也是最早的 Web 应用 Viaweb 的创办者之一，后来以近5千万美元价格被雅虎收购，成为 Yahoo! Store。</p>
<p>YC 的新主席 Sam Altman 与 Stanford 联合开了一门创业课，叫“How to start a startup”。课程请到了许多著名的创业者和投资人作为嘉宾，旨在教授所有想创业的人该如何创业。</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="http://leilux.github.io/lou/startup/">YC创业课</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/30724465">黑客与画家：硅谷创业之父保罗.格雷厄姆文集</a></li>
<li><a href="http://www.diglog.com/story/1032373.html">YC创业学校，面向尚未做好创业准备的未来创业者</a></li>
</ul>
]]></content>
      <categories>
        <category>entrepreneurship</category>
      </categories>
      <tags>
        <tag>创业</tag>
      </tags>
  </entry>
  <entry>
    <title>从土地到餐桌的变革——“新农人”变形记</title>
    <url>/reading/%E4%BB%8E%E5%9C%9F%E5%9C%B0%E5%88%B0%E9%A4%90%E6%A1%8C%E7%9A%84%E5%8F%98%E9%9D%A9.html</url>
    <content><![CDATA[<p><img src="/images/static/%E4%BB%8E%E5%9C%9F%E5%9C%B0%E5%88%B0%E9%A4%90%E6%A1%8C%E7%9A%84%E5%8F%98%E9%9D%A9.jpeg"></p>
<p>石嫣这本《从土地到餐桌的变革》详细记录了她在美国地升农场实习的经历和心理变化，让读者有一种身临其境的感觉，读完以后似乎自己也拥有了一段这样奇妙的生命旅程。不禁让我想起《冰与火之歌》里的一句话“读书人的生命有一千次，不读书的人只有一次生命。”</p>
<p><img src="/images/static/%E7%9F%B3%E5%AB%A301.jpg"></p>
<blockquote>
<p>新农人石嫣</p>
<p>石嫣，中国人民大学博士，清华大学博士后，国际社区支持农业联盟 URGENCI 副主席。2008年，她以公派留学生身份前往美国明尼苏达州地升农场“洋插队”，是国内第一位公费去美国务农的学生。回国后决定投身有机农业，创办了中国第一个 CSA 项目“小毛驴市民农园”，是中国社区支持农业和可持续农业的重要推动者。</p>
</blockquote>
<h2 id="在美国“洋插队”"><a href="#在美国“洋插队”" class="headerlink" title="在美国“洋插队”"></a>在美国“洋插队”</h2><p>本书一共分为36篇，以作者在美务农为主线，介绍了去美国务农的背景，初到农场的不适应，与农场经理的思想冲突，亲身学习种植技术，参与蔬菜配送，深入社区生活…… 同时也介绍了作者关于有机农业和有机食品的一些思考和建议。</p>
<p>提及美国的农场，我们的第一印象通常是这种大规模、机械化的生产方式。</p>
<p><img src="/images/static/%E7%BE%8E%E5%9B%BD%E5%86%9C%E5%9C%BA%E5%8D%B0%E8%B1%A101.jpg"></p>
<p>然而，2008年石嫣去实习的地升农场（Earthrise Farm）却是一个以人工耕作为主的农场。并在农场与消费者之间建立直销、互信、友好的关系，以份额会员制进行销售。这种方式不仅让生产者有了稳定的市场保障，让消费者吃到健康的食物，同时也促进了社区的活力。</p>
<p>在地升农场，蔬菜是自己种植的，肉类和牛奶由附近散养牲口的农户提供，面包用自己种植的小麦磨成粉制作，鸡蛋是农场散养的母鸡所产，咖啡是公平贸易的咖啡（确保农户不受盘剥，价格比普通咖啡高），草莓酱、酸奶、比萨都是自己做的。</p>
<p>一般都认为美国人生活很奢侈很浪费，其实并非如此，很多美国人对自己要求很严，他们勤勉而简朴。中国人其实也是一样，只不过在经济快速发展和城市化不断推进的过程中，遗失了一些东西。</p>
<p><img src="/images/static/%E7%9F%B3%E5%AB%A3_Nick.jpeg"></p>
<p><img src="/images/static/%E7%9F%B3%E5%AB%A3_Joan.jpeg"></p>
<p><img src="/images/static/%E7%9F%B3%E5%AB%A3_Emma.jpeg"></p>
<p><img src="/images/static/%E7%9F%B3%E5%AB%A3_%E9%A9%BE%E9%A9%B6%E6%8B%96%E6%8B%89%E6%9C%BA.jpeg"></p>
<p><img src="/images/static/%E7%9F%B3%E5%AB%A3_Kay.jpeg"></p>
<p><img src="/images/static/%E7%9F%B3%E5%AB%A3_Annette.jpeg"></p>
<p>在参加劳作的时候，每位社区会员都能亲身经历作物从一颗种子成长为果实的变化，只吃当季作物他们，宁可食用罐头也不能去吃来路不明的反季节蔬菜。因为反季节蔬菜违背了生长规律，而且增加了消费成本和资源消耗。</p>
<p><img src="/images/static/%E7%9F%B3%E5%AB%A3_%E5%86%9C%E5%9C%BA02.jpeg"></p>
<p><img src="/images/static/%E7%9F%B3%E5%AB%A3_%E5%86%9C%E5%9C%BA01.jpeg"></p>
<p><img src="/images/static/%E7%9F%B3%E5%AB%A3_%E5%9C%B0%E5%8D%87%E5%86%9C%E5%9C%BA01.jpeg"></p>
<p><img src="/images/static/%E7%9F%B3%E5%AB%A3_Emma_02.jpeg"></p>
<p>给份额成员的份额运送每周一次，所有箱子器皿都循环使用。</p>
<p><img src="/images/static/%E7%9F%B3%E5%AB%A3_%E5%9C%B0%E5%8D%87%E5%86%9C%E5%9C%BA02.jpeg"></p>
<p>农场的所有动物都和人非常亲近。书中有一段描述：在农场中，我最喜欢的一项工作就是去捡鸡蛋。每天我们大概都能有120多个鸡蛋。那些母鸡们都很可爱，有一些老母鸡很熟悉我们要去“偷”它们的鸡蛋了。当我的手伸到笼子里时，它们竟然由卧着变成站立，等我拿走鸡蛋后，它们就卧下了……</p>
<p><img src="/images/static/%E7%9F%B3%E5%AB%A3_%E5%9C%B0%E5%8D%87%E5%86%9C%E5%9C%BA03.jpeg"></p>
<p>在以社区为单位的群体，会定期组织一些活动，在参加劳动的时候大家轮流展示厨艺，根据不同季节组织不同文体活动，组建起一个有共同爱好的社交团体。</p>
<p><img src="/images/static/%E7%9F%B3%E5%AB%A3_%E5%9C%B0%E7%90%83%E5%AE%89%E6%81%AF%E6%97%A5%E5%BA%86%E5%85%B8.jpeg"></p>
<p>繁忙的农场工作之余，“泥胶鞋乐队”在准备镇上举行的游行活动。他们是一群农民，他们热爱他们的职业，热爱着生活，热爱着音乐。</p>
<p><img src="/images/static/%E7%9F%B3%E5%AB%A3_%E6%B3%A5%E8%83%B6%E9%9E%8B%E4%B9%90%E9%98%9F.jpeg"></p>
<p><img src="/images/static/%E7%9F%B3%E5%AB%A3_%E6%B3%A5%E8%83%B6%E9%9E%8B%E4%B9%90%E9%98%9F02.jpeg"></p>
<h2 id="什么是社区支持农业"><a href="#什么是社区支持农业" class="headerlink" title="什么是社区支持农业"></a>什么是社区支持农业</h2><p>社区支持农业（Community Supported Agriculture）简称 CSA。在解释社区支持农业的概念之前，需要先理解“社区”的概念。说到社区，我们往往想到的是一个小区或者街道这种由地理空间分隔出来的一块区域。但其实这是片面的，因为对于一个社区来说，最重要的不是地理位置，而是人本身。</p>
<p>用石嫣的话来讲，就是“社区其实也是一种共同体，社区成员有着很多生活交叉，并且以此形成了一个闭合的网状结构，社区也可以是有相同价值观的一个群体的组合。”</p>
<p>所以一个理想的社区，应该是由一群拥有相同价值观的人组成的，每一个人都能在社区里找到自己的角色，社区也会帮助每一个人释放自己的能量。</p>
<p><img src="/images/static/%E7%9F%B3%E5%AB%A3_%E5%86%9C%E6%B0%91%E5%B8%82%E5%9C%BA01.jpeg"></p>
<p>那么，下一个问题——社区要支持什么样的农业？</p>
<ul>
<li>首先，它是生态、健康、公平的有机农业；</li>
<li>其次，它是本地化的、新鲜的。</li>
</ul>
<p>这也正是有机农业所遵循的四个原则：健康、生态、关爱、公平。</p>
<p><strong>其实 CSA 并没有一个固定的定义，每一个人所实践的 CSA 模式就是在给这个 CSA 的很多可能提供一种可能性。</strong>而每一个所从事的这个 CSA 模式正是对这个 CSA 的定义。比如依靠无农药无化肥的生产方式，和更直接的市场流通，使农业能够实现真正的可持续发展。</p>
<p>总的来说，CSA 需要实现三个目标：</p>
<ul>
<li>城里居民能吃上健康、有机的食物；</li>
<li>乡村里的农民能靠农业活下去；</li>
<li>大自然不再被高污染农业排放破坏。</li>
</ul>
<p><strong>社区（Community）的概念</strong></p>
<blockquote>
<p>社区其实也是一种共同体，社区成员有着很多生活交叉，并且以此形成了一个闭合的网状结构，社区也可以是有相同价值观的一个群体的组合。</p>
</blockquote>
<p>我第一次认真思考“社区”这个词，是在2018年参加零废弃联盟组织的“社区垃圾分类技能培训”的时候。受限于当时的认知，我以为社区就是一个小区或者街道这种由地理空间分隔出来的一块区域。但是在我了解了一些案例之后，我突然发现——对于一个社区来说，最重要的不是地理位置，而是人本身。社区是由一群拥有相同价值观的人组成的，每一个人都能在社区里找到自己的角色，社区也会帮助每一个人释放自己的能量。</p>
<p>因此“社区”不再受限于地理空间，比如 GitHub 就是一个富含极客精神的社区，虽然大家在不同国家不同城市，虽然大家素未谋面，但这并不妨碍它成为帮助大家释放创造力的社区。这一点，与 CSA（社区支持农业）的“社区”是一样的。</p>
<h2 id="中国的-CSA"><a href="#中国的-CSA" class="headerlink" title="中国的 CSA"></a>中国的 CSA</h2><p>本书的最后几篇中透露了石嫣计划回国后进行 CSA 项目本地化的一些思考，正如石嫣所说，她去美国取经，取回来的是一本中国的经。在石嫣翻译的另一本书《四千年农夫》中可以找到更详细的答案。</p>
<p><img src="/images/static/%E7%9F%B3%E5%AB%A3_CSA%E5%A4%A7%E4%BC%9A.jpeg"></p>
<p>2019年底，在肇庆乡村振兴学院举办了第十一届社会生态农业CSA大会，800多名国内外的政府官员、高校学者、业内行家、基层干部、CSA农场主、合作社带头人、返乡青年、乡村创业者齐聚一堂，共同探讨生态文明建设。</p>
<p><img src="/images/static/%E6%88%91%E4%BB%AC%E7%9A%84%E5%90%8D%E5%AD%97%E5%8F%AB%E5%86%9C%E4%BA%BA.jpg"></p>
<p>除了“有机农业”，常常还听到其他一些说法，比如“自然农业、永续农业、自然农法、生物动力农业”等。其实它们更多是不同的定义，但讲的都是一个道理——<strong>我们要吃健康的食物同时还要让这种健康可持续</strong>。具体选择哪种方式，则需要因地、因时、因势制宜。</p>
<p>希望在不久将来，农民成为一个令人骄傲的职业！</p>
<p>共同的背景：对生态环境日益恶化的关注和反思。</p>
<h2 id="真实的成本"><a href="#真实的成本" class="headerlink" title="真实的成本"></a>真实的成本</h2><p>由于有机产品的价格比普通产品高出不少，同时市场上还存在一些伪有机产品，这使得选择有机产品的人群仍是少数。如果你问为什么有机产品要卖那么贵？也许你应该问为什么普通产品卖得那么便宜？</p>
<p><img src="/images/static/%E7%9F%B3%E5%AB%A3_%E5%8C%97%E4%BA%AC%E6%9C%89%E6%9C%BA%E5%86%9C%E5%A4%AB%E5%B8%82%E9%9B%86.jpeg"></p>
<p><strong>我们实际上现有购买的食物价格不是它真正的价格，我们要测算它真实的成本然后测算它的规模，它的规模可能不是单体农场的规模，可能是一个组织的规模，有形成组织的规模，也是一直在推导的农民的组织化规模。</strong>因为我们现在吃到的很多食物，后端还要去治理这些污染，包括种植或者养殖带来的环境问题等等，这部分并非由消费者直接支付，而是通过补贴等手段去治理这些污染。</p>
<p>出乎很多人的意料，水土污染里最大的一个来源其实是农业污染。因农药化肥的大量使用、畜禽养殖业废弃物排放造成的污染，已成为中国面源污染的第一大污染源，远超工业源、生活源污染。</p>
<p><img src="/images/static/%E7%9F%B3%E5%AB%A3_%E5%96%B7%E6%B4%92%E9%99%A4%E8%8D%89%E5%89%82.jpg"></p>
<p>美国农业的高度规模化、产业化和机械化，一直被认为是农业现代化的典范，然而在工业化进程中，这种耕作方式带来了巨大的环境污染和食品安全问题。近三十年来，因为追求产量，忽略了对生态环境的影响，中国农业的可持续发展和食品安全，同样面临巨大压力。</p>
<p>农业不仅是生产和经济基础，农业还是文化，是中华民族五千年生生不息的灵魂，是传承和延续中华文明的重要载体。</p>
<blockquote>
<p>美国农业的高度规模化、产业化和机械化，一直被认为是农业现代化的典范，然而在工业化进程中，这种耕作方式带来了巨大的环境污染和食品安全问题，因此在上世纪八十年代，发展生态农业的社区支持农业农场，就开始逐渐兴起。</p>
<p>这二三十年来，农业出了很大问题。长期以来，中国农业高度集约化的生产方式，因为追求产量，忽略了对生态环境的影响，中国农业的可持续发展和食品安全，同样面临巨大压力。结束美国实习，石嫣便开始在中国尝试发展社区支持农业模式，试图通过消费者的参与，支持农民的健康生产来发展生态农业，解决食品安全和土壤污染问题。</p>
</blockquote>
<p>最后，我想以书中的一段话作为结尾～</p>
<blockquote>
<p>活着要懂得知足常乐</p>
<p>追求高雅但不奢华的生活</p>
<p>面对时尚</p>
<p>也能保持一种得体的优雅</p>
<p>做一个有价值的人</p>
<p>但不要过于在乎名望</p>
<p>做一个富有的人</p>
<p>但不要成为金钱的奴隶</p>
<p>努力地学习</p>
<p>静静地思考</p>
<p>轻声地说话</p>
<p>真诚地做人</p>
<p>敞开心扉去聆听</p>
<p>星星的话语</p>
<p>鸟儿的歌唱</p>
<p>小孩的呢喃</p>
<p>还有圣人的教诲</p>
<p>面带微笑地接受一切</p>
<p>勇往直前地做自己想做的一切</p>
<p>心平气和地等待着机会的到来</p>
<p>总之</p>
<p>不要让自己的精神过于空虚和无聊</p>
<p>而是让自己和普通人一样地成长</p>
<p>这就是我的人生乐章</p>
</blockquote>
]]></content>
      <categories>
        <category>reading</category>
      </categories>
      <tags>
        <tag>农业</tag>
        <tag>环保</tag>
        <tag>新农人</tag>
        <tag>CSA</tag>
      </tags>
  </entry>
  <entry>
    <title>从拼T字中重新理解团队合作</title>
    <url>/journal/%E4%BB%8E%E6%8B%BCT%E5%AD%97%E4%B8%AD%E9%87%8D%E6%96%B0%E7%90%86%E8%A7%A3%E5%9B%A2%E9%98%9F%E5%90%88%E4%BD%9C.html</url>
    <content><![CDATA[<h1 id="从拼T字中重新理解团队合作"><a href="#从拼T字中重新理解团队合作" class="headerlink" title="从拼T字中重新理解团队合作"></a>从拼T字中重新理解团队合作</h1><p>昨天上午的徒步出发前，教练给我们每支队伍一盒《T字之谜》拼图，先完成的队伍先出发。要求拼出一个大写字母 T，且四周必须是直角。很不幸，我们成了十支队伍里面，最后拼出 T 字的队伍。</p>
<img src="/images/static/GYT-T1.jpg" width=400 />

<p>此后一段时间，我一直在反思，尤其是当听到有人说：“你们小组很多聪明人呀，怎么垫底了呢？”</p>
<p>虽然只有区区四块拼图，看似简单，却隐藏着大智慧。我们花了不少时间摆弄来、摆弄去，怎么试都失败了。不是缺一个角，就是多一个边。</p>
<img src="/images/static/GYT-T2.jpeg" width=600 />

<p>我们在这里犯了几个错误：</p>
<ol>
<li>最长边一定是外沿；</li>
<li>水平线一定是水平线，斜线一定是斜线；</li>
<li>缺口必须要填补，否则不能形成直角。</li>
</ol>
<p>虽然教练多次提醒需要突破思维，但是思维有那么容易突破吗？经过多年的学习和工作，我们早已建立起了一套思维框架，使得我们总是习惯于用自己的角度和方式去看待这个世界。</p>
<p>就这样，我们一遍遍尝试，一遍遍接近，又一遍遍失败。我们很想突破思维，但又无意识地被固化的思维拉回去。比如前面提到的错误，其实它们都是未经验证的假设。因为长边长，所以理所当然地作为外沿；因为边水平，所以理所当然地让它继续保持水平；因为有缺口，所以一定要想方设法把它补齐。我们受这些思维影响，不断越陷越深，毫无进展。</p>
<p>最后我们发现，其实长边不一定要做外沿，两条甚至三条短边组合也是可以的；水平线转个角度可以变成斜线，斜线转个角度同样可以变成水平线；缺口也不是非得要填补的，有些缺口只是看起来像缺口而已。</p>
<p><img src="/images/static/GYT-T3.jpg"></p>
<p>不知道是凑巧还是我想多了，我在反思的过程中突然意识到，字母 T 也许是 Team 的意思，背后的思维也非常值得在团队建设和团队协作中学习。比如说：</p>
<ul>
<li>企业里面能力强的团队或个人是否都要做向外的主营业务？虽然说主营业务能带来现金流，应该重兵把守。但从长远来看，建立核心团队专注内部流程的优化、基础软件的开发、先进技术的预研也不容忽视。健康的企业、团队和个人应该是内外兼修的，而不是外强中干。</li>
<li>每个团队或个人的专业技术能力有所不同，但如果总是以过往的学习、工作经验来定义员工，什么专业毕业的学生就应该做什么工作，什么部门的员工就应该做什么业务。虽然可以通过精细分工提高工作效率、减少管理工作，但长远来看也会产生一些弊病，比如使得团队活力低下，从而限制企业的发展。所以企业应该考虑建立灵活的轮岗、转岗机制，激活每一个员工，在水平线和斜线之间找到一个合适的角度。</li>
<li>团队需要不同技能的人，而每个成员又有不同的知识背景、专业技能、工作习惯，甚至兴趣爱好。这些差异在不同人看来，可能是优点，也可能是缺点。然而，优点和缺点、优势和劣势都是可以转换的。我们以为的缺点，也许恰恰就是团队发展的重点；我们以为的劣势，也许恰恰就是团队成功的关键。重要的不是想方设法填补缺点，而是正确地辨别出团队当下真正的优缺点，扬长避短。</li>
</ul>
<p>一个能够长久发展下去的好企业、好团队，一定需要多元文化，也一定需要保持开放包容。重视人的成长，才能实现共赢！</p>
<p><img src="/images/static/GYT-T4.jpg"></p>
<p>这么想想，其实还是蛮有趣的。垫底虽然很难受，但也让我深深地记住了这个 T，帮助我在以后的工作生活中，提醒我要从不同角度看问题。我想这不仅适用于团队工作，在日常生活、为人处世方面也可以灵活运用。当然啦，我们还是要不断学习、不断成长，建立一套更加完善的思维。同时，也要保持纯粹，学会放下包袱，打破常规，做一个童心未泯的大人。</p>
<p>成长是一件美好的事，但愿你我都能成为自己想要的样子！</p>
]]></content>
      <categories>
        <category>journal</category>
      </categories>
      <tags>
        <tag>创业</tag>
        <tag>管理</tag>
        <tag>团队合作</tag>
      </tags>
  </entry>
  <entry>
    <title>如果你不知道去哪里，任何一条路都是你的选择</title>
    <url>/journal/%E4%BB%BB%E4%BD%95%E4%B8%80%E6%9D%A1%E8%B7%AF%E9%83%BD%E6%98%AF%E4%BD%A0%E7%9A%84%E9%80%89%E6%8B%A9.html</url>
    <content><![CDATA[<h2 id="如果你不知道去哪里，任何一条路都是你的选择"><a href="#如果你不知道去哪里，任何一条路都是你的选择" class="headerlink" title="如果你不知道去哪里，任何一条路都是你的选择"></a>如果你不知道去哪里，任何一条路都是你的选择</h2><p>我有一个朋友小A，他早年创过业，开了一家餐厅，但是亏本了。把店铺关了之后，小A陷入了低迷。</p>
<p>实在看不下去，我隔三差五地就跟他聊天，我说：“创业本来就是九死一生的事情，而且餐饮行业的竞争十分激烈，好好总结一下，重新上路就行啦！只有失败过，才能体会成功的来之不易，才能抓住伴随而来的财富。至于现在嘛，趁年轻多学点技能，多积累些人脉，多攒点钱，以后的路还很长，机会还很多呢。”</p>
<p>小A也知道自己开餐厅太鲁莽，没有餐饮行业的经验，只是觉得不想继续打工了，刚好有朋友想开餐厅，一拍即合就辞职、投钱进去了。小A说：“你说的道理我都懂，可我就是不知道该怎么做，学什么技能？”</p>
<p>我叹了一口气，说：“其实许多人到了三四十岁，还像你这样，不知道要做什么、怎么做，你现在才二十多岁，如果你一直徘徊，一直想找捷径，等你三四十岁的时候，很可能还是这样。与其这样，不如赶紧走出去，选一个有前景的方向，踏踏实实地做，十年之后，你也会是行业精英。正是因为你不知道要去哪里，所以任何一条路都是你的选择。”</p>
<p>勇敢去做吧，只要你肯踏出去，这事就成一半了，另一半靠坚持！</p>
<p><img src="https://img.zcool.cn/community/01c1855540ba870000017c945fd0b7.jpg@1280w_1l_2o_100sh.jpg"></p>
]]></content>
      <categories>
        <category>journal</category>
      </categories>
      <tags>
        <tag>心灵成长</tag>
      </tags>
  </entry>
  <entry>
    <title>可持续的《可持续生活指南》</title>
    <url>/zerowaste/%E5%8F%AF%E6%8C%81%E7%BB%AD%E7%94%9F%E6%B4%BB%E6%8C%87%E5%8D%97.html</url>
    <content><![CDATA[<h2 id="结营成果展"><a href="#结营成果展" class="headerlink" title="结营成果展"></a>结营成果展</h2><p>上周（12.06）可持续生活创变营举办成果展，终于结营了！</p>
<p>主题是“超越 1.0，创变无限可能”，虽说这个 1.0 不是那么完美，但也该启程迈向 2.0 了。一直想写点什么，但又不太敢落笔，因为害怕，害怕失败，也害怕成功。昨晚瓶子找我访谈，聊了整个创变营的经历和感受，从10月18日一直到12月6日，确实发生了很多事，也带来了一些新东西。其实，还是很值得记录的！</p>
<img src="/images/static/gogreen-20201212-000.jpg" width=600 />

<img src="/images/static/gogreen-20201212-002.jpg" width=600 />

<img src="/images/static/gogreen-20201212-002-1.jpg" width=600 />


<h2 id="我们的-PPT"><a href="#我们的-PPT" class="headerlink" title="我们的 PPT"></a>我们的 PPT</h2><p>结营发布会的 PPT 采用 20x20 的形式进行，即 20 页 PPT，每页 PPT 20 秒。由于时间仓促，准备不充分，所以有些东西没有讲到…… 那再讲一遍吧～</p>
<img src="/images/static/gogreen-20201212-page_01.png" width=600 />

<p>我们的项目「可持续生活指南」，目标是通过学习、实践、资料收集… 整理一份关于可持续生活的在线文档。这份指南并不好写，因为可持续的话题太大了，涉及到生活的方方面面和各个不同的场景，同时又涉及生态、能源、经济、城市规划等不同学科领域的知识。这对于我们来说是一个很大的挑战，不过，我们愿意接受挑战！</p>
<img src="/images/static/gogreen-20201212-page_02.png" width=600 />

<p>这是现在我们很多都市打工人的生活状态（包括我自己），我常常反思：为什么我们要不停地工作、加班、制造产品，然后想办法销售出去，不断消费，不断工作赚钱以维持这种消费…？虽然我是软件工程师，但其实我并不想让我和我的生活被智能设备所包围。有时候觉得，科技的发展似乎没有解放人类，反而限制了我们。</p>
<img src="/images/static/gogreen-20201212-page_03.png" width=600 />

<p>所以我们提出了「可持续生活指南」这个项目，希望通过一种开源、公益的形式一起收集、创作、分享关于环保、零废弃、可持续发展方面的内容。帮助更多和我一样想摆脱困境的人，释放每一个人的创造力，过上更可持续的美好生活。</p>
<img src="/images/static/gogreen-20201212-page_04.png" width=600 />

<p>我们的项目托管在 <a href="https://gitee.com/luhuadong/green-guide">Gitee</a> 平台，协作过程其实跟开源软件一样，许可协议采用的是 CC-BY-SA-4.0，即“署名-相同方式共享”协议。特意增加许可协议其实是为了保护所有贡献者的权益，同时又不限制文档的传播。这是过去六周的一些数据：一共有 4 名贡献者，11 个 Star，89 次提交。</p>
<img src="/images/static/gogreen-20201212-page_05.png" width=600 />

<p>描述可持续生活的书籍并不多，这是我过去几年看过的一些材料，涉及垃圾分类、塑料回收、Zero Waste、堆肥、有机农业、地球环境、断舍离等话题。这也是我们这个项目的起点，我们希望给大家呈现的是一份可信的、科学的、有趣的在线文档。</p>
<img src="/images/static/gogreen-20201212-page_06.png" width=600 />

<p>我在 2017 年机缘巧合地进入了 GoZeroWaste 社群，这些年也在参考《21天零垃圾生活养成手册》进行实践。可以说这份手册给了我很大的启发，我们原来也想把它收录进来，不过它的作者老汤觉得不太合适，所以暂时没办法收录。大家可以在 GoZeroWaste 微信公众号找到，强烈推荐！</p>
<img src="/images/static/gogreen-20201212-page_07.png" width=600 />

<p>回过头来，我们开始思考我们的研究对象，探讨“可持续”、“环保”、“零废弃”之间的关系。“环保”这个词显得过于严肃，以至于我们都不敢声称自己是环保主义者。相对来说，“零废弃”更侧重于个人生活方式的描述，让我们这些环保主义者感到更轻松。但其实它们又有很多共同点，可以说是一体两面的关系，环保更关注外在，而零废弃更关注内在，它们的目标都是追求可持续发展。</p>
<img src="/images/static/gogreen-20201212-page_08.png" width=600 />

<p>说起环保，相信很多人都知道 3R 原则 —— Reduce、Reuse、Recycle。但是我们发现，其实我们能做的不止 3R，我们可以做得更好。环保不是环保工作者的事，环保和我们每个人息息相关，因为没有一个人、没有一件事是孤立的！作为工程师、设计师、决策者、消费者的我们，其实可以在源头做得更好，可以制造出更低碳、更可持续的产品。这比后面考虑如何回收、如何处理要重要多得多。</p>
<img src="/images/static/gogreen-20201212-page_09.png" width=600 />

<p>垃圾分类可能是离我们最近的环保行为了，但很多人都把它当作一个垃圾分类投递的动作而已。其实不然，垃圾分类是一项系统工程，包括分类投放、分类收集、分类运输、分类处理四个环节，哪个环节出问题了，都会影响到垃圾分类的整体效果。这也是为什么垃圾分类这么难的原因所在。</p>
<img src="/images/static/gogreen-20201212-page_10.png" width=600 />

<p>对于大多数人来说，通常只关心前端分类的，即“这是什么垃圾？” 因此我们画了一张流程图，帮助大家快速辨别垃圾的种类，培养垃圾分类的全局思维。分类的依据不仅仅是垃圾本身的成分和属性，往往还跟后端处理方式以及回收价值有关。理解这一点，垃圾分类就不难了！</p>
<img src="/images/static/gogreen-20201212-page_11.png" width=600 />

<p>虽然你已经学会了垃圾分类，但是比做好垃圾分类更重要的是 —— 减少垃圾的产生。当我们第一次看到这张图，非常震惊！我们习以为常地认为垃圾丢到垃圾桶后，它就消失了，其实并没有，哪怕是焚烧处理，它们也只是换了一种方式与我们共存。更何况，你能想象你今天扔的一个瓶盖、一根吸管，明天将成为伤害其他生物的凶器，再通过生物链回到我们人类的身边吗？</p>
<img src="/images/static/gogreen-20201212-page_12.png" width=600 />

<p>环保真的是一个很敏感、很严肃的话题。不过我们在这趟旅程中也发现了很多有趣的东西，比如被称为西方消费主义的解药的“城镇转型”。最早就起源于英国，通过一系列的社区活动，在食物、能源和经济等方面作出改变，试图构建本地社区的可持续生活模式。如今，全世界已经有数千个转型城镇，我们中国也涌现出一些有转型城镇影子的生态村，我觉得生活在这些地方应该挺幸福的。</p>
<img src="/images/static/gogreen-20201212-page_13.png" width=600 />

<p>我们还了解到 CSA 这种有趣的社区农业模式，通过“社区支持农业”，可以让城市的居民吃上健康、有机的食物，可以让农民更好地、更体面地工作和生活，还可以保护自然生态环境，简直就是一石三鸟的妙招。我们也希望通过这个在线文档的项目，让更多人了解、理解并参与到 CSA 社区支持农业当中来。</p>
<img src="/images/static/gogreen-20201212-page_14.png" width=600 />

<p>让我感到惊喜的是，我们还发现了“可持续软件工程”这个新领域。它更像是一套分析方法，从碳排放、能量均衡、网络效率等多个角度给出建议，提醒软件厂商在设计阶段考虑环保因素，帮助工程师们作出更优的选择，以降低软件对环境的影响，成为更可持续的软件。</p>
<img src="/images/static/gogreen-20201212-page_15.png" width=600 />

<p>我这台 iPhone 5SE 已经用了五年，很多人都问我怎么还不换手机？大家可能不知道，智能手机毁灭地球的速度比任何人想象的都要快。现在智能手机的平均生命周期只有两年，问题在于，虽然手机的体积很小，但功耗却不小，而且制造手机所需的稀土金属，其开采和处理过程对水资源、耕地资源都有很大影响。所以当有伙伴跟我说：“作为 IT 工作者，还在用 iPhone 5SE，你让我看到了希望！” 我真的特别感动！</p>
<img src="/images/static/gogreen-20201212-page_16.png" width=600 />

<p>其实不只是手机，在践行环保的过程中，我的消费观念也发生了变化。我做消费决策时，总会提醒自己：只买需要的，不买想要的！它不仅帮我省钱，还帮我摆脱了物欲，让我感到更轻松自在，这不就是可持续生活吗？虽然富人的环保意识比穷人更高，但实际情况是富人所造成的碳排放远高于穷人！我希望大家能更多地追求精神上的富足，而不是物质上的富有。</p>
<img src="/images/static/gogreen-20201212-page_17.png" width=600 />

<p>可持续生活真的是一种很美的生活方式，左边是我用一块布包裹的餐盒，用来替代塑料袋，比塑料袋好看多了！右边两张是我认识的一些手工艺人的作品，还有很多自己 DIY 的东西，就像魔法师一样，想方设法延长物品的生命周期。</p>
<img src="/images/static/gogreen-20201212-page_18.png" width=600 />

<p>前面说的这些，主要是想打破大家对“环保”的刻板印象。其实环保也可以很好玩，零垃圾的生活也可以很有趣。这也是我们「可持续生活指南」想展现给大家的。</p>
<img src="/images/static/gogreen-20201212-page_19.png" width=600 />

<p>如果用一句话总结我们这一路走来的心路历程，我想这句话再合适不过。我花了很长时间才肯放下过去许多觉得理所当然的观点，这确实需要勇气，承认自己的错误和无知。生活其实还有许多我们不曾看到的一面，我很高兴现在依然热爱生活，希望你们也是！</p>
<img src="/images/static/gogreen-20201212-page_20.png" width=600 />

<p>最后，就是我们的「可持续生活指南」项目，我们特意取了 zerotogether.net 这个域名。Zero 代表所有走在零废弃路上的伙伴，Together 代表我们希望这个项目能帮助大家聚集起来，一起保护我们的地球家园。我们把中文翻译为“零聚”，谐音“凝聚”，希望能够形成凝聚力，让每个寻找可持续生活的人都不再感到孤单。</p>
<p>扫描二维码就可以看到我们的项目啦～</p>
<h2 id="ZeroTogether"><a href="#ZeroTogether" class="headerlink" title="ZeroTogether"></a>ZeroTogether</h2><img src="/images/static/gogreen-20201212-zerotogether.net_version1.0_screenshot.png" width=600 />


<p>如你所看到，「可持续生活指南」在线文档目前还比较简陋（如果你来晚了，说不定又改版了）。如果你和我们一样，觉得它有价值；如果你和我们一样，希望为环保贡献一份力量；如果你和我们一样，希望勇敢地走上可持续发展道路。我们真的很需要你，来和我们一起完善它！</p>
<h2 id="超越-1-0"><a href="#超越-1-0" class="headerlink" title="超越 1.0"></a>超越 1.0</h2><p>好啦，时间过得很快。回想起来，感恩之旅、24小时极限挑战、6周落地行动…… 仿佛是好久以前发生的事。也许是因为遇到相似的人、相似的观点，所以多了一见如故的感觉吧。Anyways，我们的行动不止于此，超越 1.0，继续向可持续生活迈进！</p>
<img src="/images/static/gogreen-20201212-004.jpg" width=600 />


]]></content>
      <categories>
        <category>zerowaste</category>
      </categories>
      <tags>
        <tag>环保</tag>
        <tag>可持续生活</tag>
      </tags>
  </entry>
  <entry>
    <title>学会从别人的失败中吸取教训</title>
    <url>/journal/%E5%AD%A6%E4%BC%9A%E4%BB%8E%E5%88%AB%E4%BA%BA%E7%9A%84%E5%A4%B1%E8%B4%A5%E4%B8%AD%E5%90%B8%E5%8F%96%E6%95%99%E8%AE%AD.html</url>
    <content><![CDATA[<h2 id="学会从别人的失败中吸取教训"><a href="#学会从别人的失败中吸取教训" class="headerlink" title="学会从别人的失败中吸取教训"></a>学会从别人的失败中吸取教训</h2><p>最近看到一句话：<strong>聪明人从自己犯的错误中学习，智慧的人从别人的错误中学习。</strong></p>
<p>我才恍然大悟，原来我一直都是“聪明人”啊！</p>
<p>是的，我一直信奉“纸上得来终觉浅，绝知此事要躬行”、“实践是检验真理的唯一标准”、“失败更容易让人成长”……</p>
<p>所以很多东西都习惯自己尝试一遍再说，失败了也不怕。当然，这有好的一面，也有不好的一面。我忽略了信息传递的价值，我忽略了时间的有限性。</p>
<p>直到后来，我投资失败了，职场发展也不顺利，身体健康也遭遇风险。失败的滋味真的太难受了，更重要的是，时间在不断地流逝。我才恍然大悟，其实我没有很好地利用信息的价值，没有虚心向前辈请教，没有从前人的失败中吸取教训。</p>
<p>其实道理我们大家都懂，《论语》里也给我们讲几千年了 —— “见贤思齐焉，见不贤而内自省也”。</p>
<p>但往往我们就是太过于自信，认为自己就是万里挑一的那个。当然，自信是好事，但盲目的自信只会耽误事。</p>
<p>我决定从现在开始：</p>
<ul>
<li>多和朋友交流（特别是不同年龄段优秀的朋友）</li>
<li>多跟前辈请教（特别是已经取得成就的前辈）</li>
<li>多读名人传记（以史为镜，总结兴衰成败因素）</li>
<li>多研究商业案例（向同行、友商、竞争对手学习）</li>
<li>……</li>
</ul>
<p>一辈子很短，真的很怕自己犯了许多错误、积累了丰富的失败经验之后，已经没有时间去重新开始了。</p>
<p><img src="https://img.zcool.cn/community/0152b15bbb7739a8012099c8af4c10.jpg@1280w_1l_2o_100sh.jpg"></p>
]]></content>
      <categories>
        <category>journal</category>
      </categories>
      <tags>
        <tag>心灵成长</tag>
      </tags>
  </entry>
  <entry>
    <title>新幸福的十大标准</title>
    <url>/reading/%E6%96%B0%E5%B9%B8%E7%A6%8F%E7%9A%84%E5%8D%81%E5%A4%A7%E6%A0%87%E5%87%86.html</url>
    <content><![CDATA[<p>记得小学语文课本有一篇文章 ——《幸福是什么》，当时没看懂。直到最近，感觉自己不太幸福，所以重新读了这篇文章。文章其实很短，讲三个牧羊的小孩在树林里清理一口老泉，善举感动了森林里的智慧女神，简单的对话引发了孩子们对幸福的思考。后来三个孩子选择了不同的人生道路，十年后在小井旁相遇了，他们都明白了什么是幸福 —— <strong>幸福要靠劳动，要靠很好地尽自己的义务，做出对人们有益的事情。</strong></p>
<img src="/images/static/what-happiness-is.jpg" width=600 />

<p>虽然文章给出了幸福的含义，就是脚踏实地、做个对社会有价值的人。但感觉还是比较空泛，缺少了一些深度和行动指导。毕竟只是一篇小学生课文，目的只是引发大家思考而已。</p>
<p>于是，我想起了《<a href="https://union-click.jd.com/jdc?e=&p=JF8BAMkJK1olXgIAU1dYCUsfA18IGFIRWwUCVW4ZVxNJXF9RXh5UHw0cSgYYXBcIWDoXSQVJQwYBXVpbC0sWHDZNRwYlBUF0PA0Jazx1eCcKRDxCGW9RUAc-TkcbM244G1oUXwMCUFtfDnsnA2g4TTUVXAcDVV9VCEoSM244G1wXXA4DVVZbDkkWBV8PG1IlAEJQDhYIWAhFS184K1glbTYCZF1tSiUSCm1YT1xHXQdVUQxYC0gTCzsOElNBXFQABgpZW0IWCl8KGloRVDY">少即是多：北欧自由生活意见</a>》这本书里面提到的“新幸福的十大标准”概念。</p>
<img src="/images/static/new-happiness-define-01.jpeg" width=600 />

<p>管理学大师彼得·德鲁克曾经说过 “It you can’t measure it, you can’t manage it”（你如果无法度量它，就无法管理它）。我在想 —— 我们能否对幸福进行有效管理呢？如果能对幸福进行度量，那是不是就能看到迈向幸福的光明大道？</p>
<p>幸福是一种主观感受，确实难以度量，而 “新幸福的十大标准” 可以理解为是一种度量幸福的方法和指标。那我们就来试试，看看能够通过逐步靠近这十个条件来获得幸福。</p>
<p>下面将结合书中的解释以及个人理解，详细介绍这十条幸福标准。</p>
<h2 id="一、享受工作"><a href="#一、享受工作" class="headerlink" title="一、享受工作"></a>一、享受工作</h2><p>这和工资高低没有关系，而关乎工作是否开心，是否觉得有挑战性和成就感，能不能让你学到东西，不断成长、进步，并能为之感到满足。</p>
<p>记得大学刚毕业的时候，有一位 HR 姐姐跟我说：“找工作主要看两点，一是能否得到学习，二是薪酬是否到位，两者兼得最好，如果不行，优先考虑能让你学到东西、能给你带来成长的工作。” 这句话我一直记在心里。</p>
<p>可现实生活中，有多少人为了眼前放弃自己的明天？如果无法从工作中感受到乐趣，那是很难让人感到幸福的。毕竟，对许多人来说，人生中有三分之一的时间都在工作。如果我们做的事情/工作不快乐，就会觉得很累，难以持续。</p>
<p>对于我们这样的普通人来说，通常有两种方式享受工作：</p>
<ul>
<li>一是改变自己，努力提升自己，让自己有能力选那份自己喜欢、符合自身特质和时代发展需要的工作；</li>
<li>二是想办法做好当前的工作，用心感受这份工作的乐趣，也就是“干一行，爱一行”。</li>
</ul>
<h2 id="二、有关系亲密的朋友和家人"><a href="#二、有关系亲密的朋友和家人" class="headerlink" title="二、有关系亲密的朋友和家人"></a>二、有关系亲密的朋友和家人</h2><p>如果工作顺利，却没有可以亲密分享的家人和朋友，这绝对谈不上愉快，更没有幸福可言。</p>
<p>随着年龄的增长，我越来越感受到亲密的朋友和家人关系是多么重要，如果聊不到一块去，如果无法跟家人朋友分享你的快乐，那会是一件让人感到遗憾的事情。</p>
<p>好消息是，家人和朋友其实都是可以选择的！我以前不懂，觉得每个人都可以做朋友，直到后来发生了一些不愉快的事，我才反思自己，给我的朋友圈做了个断舍离。家人也一样，很多人觉得家人是无法选择的，没错，我们无法选择原生家庭，但是我们可以选择找什么样的伴侣，组建一个什么样的新家庭。</p>
<h2 id="三、拥有稳定的经济来源"><a href="#三、拥有稳定的经济来源" class="headerlink" title="三、拥有稳定的经济来源"></a>三、拥有稳定的经济来源</h2><p>拥有稳定的经济来源非常重要，这并不是说你必须拥有多么庞大的资产，或是必须有相当高的收入，只要可以满足自己安定的生活就可以了，哪怕是需要控制对物质的欲望，谨守清简的生活也不是问题。但如果经济条件不够稳定，我想就算工作有多美妙，兴趣有多丰富，日子也不太会好过。</p>
<p>而且，较之经济收入的多寡，更为重要的是我们对待金钱的态度和理财方式。那些总是入不敷出的人，多半与缺乏对金钱的控制力有关。也可以说，这样的人，还没有摸索出属于自己的能让自己得到幸福的生活方式。</p>
<p>我是毕业之后这些年遇到的坑多了，才开始慢慢理解金钱。对于我们这样在小镇成长起来的青年，缺乏家庭教育，学校教育也只是教我们怎么考试、怎么找一份稳定的工作。导致像我们这种新时代农民工日子过得苦呵呵的，不仅要承受工作压力，还有房贷压力、婚姻压力…… 你看看现在那么多大龄未婚男女青年就知道了。我觉得一个很重要的原因是，我们没有形成对金钱的正确观念，没有找到赚钱的正确方法，认为工资就是稳定的经济来源。</p>
<p>现在的科技进步了，网络发达了，其实我们身边真的有许多光明正大赚钱的机会，只是许多人还没开窍，所以看不到、不敢尝试或者浅尝辄止罢了。未来，我觉得每个人都应该有自己的复业（不是副业喔），能够带来稳定的经济来源（不需要多，但要稳定），抵御不确定性的风险。</p>
<h2 id="四、身心健康"><a href="#四、身心健康" class="headerlink" title="四、身心健康"></a>四、身心健康</h2><p>身体是革命的本钱，所有一切的基础，不仅身体要健康，心灵也必须健康。</p>
<p>东京残奥会刚结束，那残障人士是否就无法获得幸福呢？不是的，一样可以获得幸福。从某种程度上来说，其实我们每个人都有缺陷，无论是生理还是心理上的。而我们要做的是正确地认识自己，接纳无法改变的缺陷，填补可以改变的不足。同时，养成良好的生活习惯，保持身心健康。</p>
<h2 id="五、拥有富于刺激性的兴趣和生活方式"><a href="#五、拥有富于刺激性的兴趣和生活方式" class="headerlink" title="五、拥有富于刺激性的兴趣和生活方式"></a>五、拥有富于刺激性的兴趣和生活方式</h2><p>有些人虽然工作得力，和朋友、家人的关系挺好，收入也很高，并且身体健康，可是有了空闲之后却不知道该做什么。成年进入社会以后，又习惯将人脉圈与利益圈捆绑在一起，如果没有一两个可以让自己充分享受的兴趣，根本无法拥有纯粹而不带功利色彩的社交圈。</p>
<p>以前听过一句话：人与人之间的差别，往往取决于你对业余时间的利用。虽然这句话有点绝对，但也不无道理。尤其是当你还在为工作、人际关系、经济等问题发愁时，如果能够充分利用时间来学习提升自己、发展兴趣…… 那么，其他问题也会得到一定的改善。比如徒步、打球、玩滑板或者 DIY 一些小玩意，对我来说都能给平淡的生活带来一丝刺激。</p>
<p>坚持你所热爱的，热爱你所坚持的，剩下的，交给时间就好。希望大家都能做个有趣的人，心中有梦，眼里有光。</p>
<h2 id="六、觉得自己拥有时间自由"><a href="#六、觉得自己拥有时间自由" class="headerlink" title="六、觉得自己拥有时间自由"></a>六、觉得自己拥有时间自由</h2><p>这并不是“时间就是金钱”的意思，而是说你必须拥有可以完全自行支配的时间。为了赚钱一天到晚疲于奔命，无暇陪伴重要的朋友和家人自不可取，可拥有大把时间，成天无所事事不知如何打发也没有任何意义。</p>
<p>幸福与否的一个很重要因素在于 —— 你是否感到自由？除了财务自由和心灵自由，时间自由也是十分重要的。我以前每年都会报三两个培训课程，线上和线下的都有，学编程、数据分析、考证、英语、健身、理财、画画等等。许多课程都是匆匆忙忙结束的，学习效果也很难评估，后来我才明白，其实我缺的根本就不是课程或学习资料，我缺的是时间啊！</p>
<p>时间自由固然很重要，但对于许多人来说（包括我），可能只有到退休或者实现梦想之后才能拥有大块可自行支配的时间吧。鲁迅先生也说了：“时间，就像海绵里的水，只要你挤，总是有的。” 所以保持勤奋自律，学会拒绝，善于管理时间可能更重要、更具实操性。</p>
<h2 id="七、能够选择适合自己的居住环境"><a href="#七、能够选择适合自己的居住环境" class="headerlink" title="七、能够选择适合自己的居住环境"></a>七、能够选择适合自己的居住环境</h2><p>不管从事什么工作，有着怎样的活法，都需要好好挑选自己的居住环境。不管这个居住环境有多便利，房子有多豪华，如果和自己的特质不相匹配，不但不能带来幸福，反而会成为累赘。</p>
<p>房价高企确实是个令人头疼的问题，但也不代表我们无法选择自己的居住环境，结合家庭、工作等因素好好计划，还是可以选择那个面朝大海、春暖花开的 Dream House。最简单的，我们现在就可以好好收拾下住所，让室内环境变得更加干净整洁，选择极简风格，减少对物品的依赖。</p>
<h2 id="八、具备有效的思维习惯"><a href="#八、具备有效的思维习惯" class="headerlink" title="八、具备有效的思维习惯"></a>八、具备有效的思维习惯</h2><p>总是推卸责任充当受害者的人，经常处于消极状态的人，习惯性寻找借口的人，被固有常识局限并难以突破的人，都很难邂逅幸福。如果是这类思维模式的人，想要凑齐这十个新幸福的条件恐怕也不是易事。</p>
<p>经历了一些糟心事之后，我才明白 —— 人生真的太难了，处处都是坑，别说居心叵测的陌生人了，有时候就连朋友、家人、企业、政府都在坑你…… 我们唯一能做的就是提升自己的见识和思维，完善知识体系，做个有智慧的人，谨慎行事，学会分析问题，学会对自己负责，相信自己的判断。</p>
<p>每个人都有他的思维模型，比如查理·芒格的 100 个思维模型，或者我在<a href="https://luhuadong.com/2020/10/09/%E5%88%86%E4%BA%AB%E4%B8%A4%E4%B8%AA%E5%86%B3%E7%AD%96%E6%96%B9%E6%B3%95WCCA%E5%92%8CWADM/">前面</a>提到过的 WCCA 和 WADM 决策模型。但我觉得最重要的是我们要时刻审视自己的思维，了解自己属于固定型思维还是成长型思维，亦或某些时候属于固定性思维，而某些场景属于成长型思维，并且有意识地训练自己的大脑，完善我们的成长型思维。改变的方法很简单，就是不断学习、接收新的信息，保持开放包容的心态，持续地刺激和培养我们的思维习惯。</p>
<h2 id="九、能够放眼未来"><a href="#九、能够放眼未来" class="headerlink" title="九、能够放眼未来"></a>九、能够放眼未来</h2><p>幸福指数下降的最大原因，就在于人们看不到自己的未来，继而心生不安。在北欧国家，单靠年金是很难让老百姓潇洒度日的，可是国民生病了有免费的医疗制度，失业了可以靠雄厚的失业救济金解围，所以不太会出现重大变故导致生活质量急剧下降的现象。</p>
<p>可惜，对我国居民来说，这样的福利离我们还很远。所以，我们必须自己提前做好准备，即使生活出现任何意外，在未来的几年里，也可以依靠自身的力量来渡过难关。</p>
<p>而从宏观层面来看，政府需要把社会资源和社会财富进行更合理的分配，为普通老百姓解决教育、医疗、失业等民生问题。这一点从今年国家对游戏、教育等行业的整改，以及习总书记提出的「共同富裕」政策可以看出。我们的未来还是值得期待的，但个人的提前部署仍然相当重要！</p>
<h2 id="十、感觉自己正在向目标迈进"><a href="#十、感觉自己正在向目标迈进" class="headerlink" title="十、感觉自己正在向目标迈进"></a>十、感觉自己正在向目标迈进</h2><p>Last but not least，是否有目标感也十分重要。人们在全力追逐自己的目标时，是不会觉得累的。</p>
<p>但对于一部分人来说，他们并不知道自己的目标是什么，或者把别人的事情当做自己的目标。例如我妈前阵子有点焦虑，她说她的目标就是让我早点结婚生子，这样她才会感到幸福。一旦我没有靠近她期待的目标，她就会觉得自己不幸福，当然啦，因为她对这个“目标”根本就把握不到方向。其实只要做一下课题分离，就会知道其实她把我的目标误认为是她的目标了，这就让我们都觉得很累。不过，这样的课题分离也确实挺难的，你光想想那句歌词就知道 —— 因为爱着你的爱，因为梦着你的梦，所以悲伤着你的悲伤，幸福着你的幸福……</p>
<p>寻找自己、寻找目标，是我们每个人一生的课题。许多年前，我也是只有烦恼、没有目标的青年。下面介绍几个我自己寻找目标的方法，供大家参考。</p>
<ul>
<li><strong>自我对话</strong>：从高中练习长跑开始，我就意外地发现自己会在跑步过程中进入自我对话模式，这种状态能让我很快地平静下来，帮助我改善精神世界。当然你不喜欢的话，不一定要练习跑步，冥想、瑜伽、游泳也是能让我们与内心的自我深度对话的好方法。反正就是要营造一个让你感到舒适的独处环境，慢慢地去感受自己的内心世界。</li>
<li><strong>尝试新事物</strong>：作为成长在小镇的青年，尤其是那个网络还不发达的时代，我们很难有机会接触和学习我们感兴趣的东西。所以在我上大学的时候，就一口气加入了十几个社团，虽然很累，也浪费了不少时间。但回头想想，也正是因为这段经历，让我接触到很多新事物，增长了我的见识，在后面许多年里仍然保持着学习和探索的动力。每个人被触动的阈值都不一样，只要有足够多的刺激，不断地接触新事物、接收新信息，我想每个人都能够在某一瞬间被触动到，发现自己的目标。也就是所谓的“量变引发质变”的过程。</li>
<li><strong>头脑风暴</strong>：不管一个人多完美，其思维和眼界还是会有局限的，因此多与人交流是很重要的，你可以形成一个学习小组、读书会等，定期交换各自的想法或试验结果。有一句话是这么说的 —— 你和我各有一个苹果，如果我们交换苹果的话，我们还是只有一个苹果；但当你和我各有一个想法，我们交换想法的话，我们就都有两个想法。没错，多点交流，没准你原来觉得天马行空的想法，在另一个想法的加持下变得具体起来了，也许就是值得你一生追求的目标。</li>
<li><strong>放眼世界</strong>：我常常觉得自己是井底之蛙，哪怕是在自己熟悉的行业，也还有许多不懂的地方。比如你想设计一款产品解决一个社会问题，当你焦头烂额地想呀想，仍然没有头绪。那么，为何不把目光拉远一些，看看世界各地的人们都是怎么思考、怎么解决的？哪怕是微积分和三相电系统这么颠覆性的东西都会同时有多个发明者，你的想法也极有可能有人正在尝试。所以呀，科学上网，多看看学术期刊，多看看这个世界，建立与连接共同体，也许你会发现你的目标也并非遥不可及。</li>
</ul>
<p>目标和想法的区别在于，想法是抽象的，而目标是具象的，当一个想法足够完整时，它就会变成一个能给你带来希望的目标。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>新幸福的十大条件的共通之处，就是人只要不被工作、金钱、时间、环境乃至常识束缚，就会获得自由。当你拥有自由，拥有对生活的自主决断和选择权力，并且朝着目标迈进时，如果你还觉得不幸福，那你是不是该考虑降低一下期望呢？知足常乐~</p>
]]></content>
      <categories>
        <category>reading</category>
      </categories>
      <tags>
        <tag>幸福</tag>
        <tag>人生</tag>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>积累定律：努力让自己值钱</title>
    <url>/journal/%E7%A7%AF%E7%B4%AF%E5%AE%9A%E5%BE%8B.html</url>
    <content><![CDATA[<h2 id="积累定律：努力让自己值钱"><a href="#积累定律：努力让自己值钱" class="headerlink" title="积累定律：努力让自己值钱"></a>积累定律：努力让自己值钱</h2><p>很多年轻人都曾梦想做一番大事业，其实天下并没有什么大事可做，有的只是小事。一件小事积累起来，便形成了大事。这任何大成就或者大灾难都是积累的结果。这便是积累定律。也就是说，这个世界所谓的大成功，其实都是由小事积累起来的结果。你要取得成就，就必须重视每一件小事，重视每段时光，懂得坚持和坚守。正如马云对所有年轻人的告诫一样。在抱怨自己赚钱少之前，先努力让自己值钱。如果你不相信努力和时光，那么时光会第一个辜负你。如果你总是幻想自己有钱，不懂得脚踏实地，不懂的在积累中提升自己的价值，最终只会在幻想中迷失掉自己。</p>
<p>大多数年轻人不太懂得积累，不停的换工作，直接原因就在于嫌原来的老板工资给的太少。同时，他们逢人抱怨老板是如何的抠门，可从不去反思自己为何如此廉价。与其喋喋不休的抱怨工资低赚的少，不如埋头努力，先让自己值钱。要值钱，就要懂得在积累中提升自己的价值，就是说，你可以先把能赚多少工资的事放在一边，想想如何才能得到一个能够让我做我不断增值的机会。</p>
<p>其实刚刚步入社会的前十年，大家的工资是没有多大差距的。最重要的是，你要在这个第一个十年里，要扎扎实实地投资自己。当你人生奋斗了第一个十年走完了，如果你扎扎实实地把自己的基本功做好了。到第二个十年，你才有可能有机会成为一个部门主管，那时候你的身价已经很高，你所掌握的资源，学到的各种技能，已经成为别人永远也盗不走的财富。那个时候，你可以拿着简历趾高气扬的跳槽，也可以理直气壮的要求现在老板给你加工资。</p>
<p>前面两个十年如果走的扎实，那么你才有可能走入人生奋斗的第三个十年。如果说前面的十年是自我身价的提升阶段，那么，人生的第三个十年则是你财富积累的开始。那个时候，你可能会有一家自己的公司，你的收入会远大于你的生活所需，人生的财富也会在此期间爆涨。</p>
<p>可是很不幸，绝大部分年轻人走不到第三个十年。他们往往在人生的第一个十年里，常常计较几百块钱的工资而放弃大好的学习机会，从此之后，其人生都在不断颠覆中度过。</p>
<p>事实证明，那些在刚开始就注重机会和自我成长的人，最终都成为不凡者。</p>
<p>其实，只要用心走到哪里，都不难找到工作。在找对了平台，在付出努力，迅速晋升将不再是难事。身价如果高，财富的积累都是轻而易举的事。当然在此过程中总不能想着老板能给你什么，而应该想着你能给老板带来什么。那些只知道向老板和单位索取的人，一定会遭遇失败。</p>
<p>所以说，不要看不起小事，不要幻想一步登天。不积跬步，无以至千里，不积小流，无以成江海。我们要学会从小事做起，由量变到质变，才能成就大事，才能撑得起梦想。</p>
<p><img src="https://img.zcool.cn/community/0148755ebb6c6fa801207200e8535b.jpg@1280w_1l_2o_100sh.jpg"></p>
]]></content>
      <categories>
        <category>journal</category>
      </categories>
      <tags>
        <tag>心灵成长</tag>
      </tags>
  </entry>
  <entry>
    <title>《见识》读书笔记</title>
    <url>/reading/%E8%A7%81%E8%AF%86.html</url>
    <content><![CDATA[<div class="note default"><p>比贫穷更可怕的是：缺乏见识、缺乏爱、缺乏规矩</p></div>



<p>《见识》作者吴军</p>
<ul>
<li><p><strong>序言 “命”和“运”决定人的一生</strong></p>
<ul>
<li><p>要想命好，首先要认识命的重要性</p>
<ul>
<li>信命是知道自己有所不能。</li>
<li>认命是不超越命运给自己画的线，对于得不到的坦然接受。（查理芒格的“能力圈”？）</li>
<li>孔子曰：“从心所欲，不逾矩”。</li>
</ul>
</li>
<li><p>什么是命？取决于两个因素</p>
<ul>
<li><p>人生轨迹走不出两条线，个人的努力、运气等不过是让我们在这两条线之间微调而已</p>
</li>
<li><p><strong>环境的因素</strong></p>
<p>环境的因素主要是指的个人所处的时代，比如生逢中国改革开放的人，就比出生在一百年前的人幸福。</p>
</li>
<li><p><strong>我们自己对未来走向划定的方向</strong></p>
<p>而另外一个因素就是从人的角度看，命就是一个人看问题的方法和做事的方法，如此而已。这两者决定了人的一生。</p>
</li>
</ul>
</li>
<li><p>人一辈子被扇巴掌的情况和原因很多，但是一个人对待其方法却有高度的一致性</p>
<ul>
<li>人对一个巴掌的反应，其实决定了其一生的命运</li>
<li>习惯扇回去的人一辈子都在扇别人巴掌</li>
<li>认怂的人一辈子都在认怂</li>
</ul>
</li>
<li><p>认清决定命运的因素，学习中外智者，被命运垂青的思维方式，我们会有好命。</p>
</li>
<li><p>在中国的大环境下，有好的思维方式，懂得最有效地做事情，想不成功都难。</p>
</li>
</ul>
</li>
<li><p><strong>第一章 幸福是目的，成功是手段</strong></p>
<ul>
<li>人生是一条河<ul>
<li>要想做到更深，要靠自己，修行和理解世界</li>
<li>要想做到更宽，要和志同道合的人共同工作</li>
</ul>
</li>
<li>这个世界没有欠你什么<ul>
<li>向上走很难，向下走容易</li>
<li>坚持往上走，不抱怨</li>
<li>相信时间的复利</li>
</ul>
</li>
<li>人生最重要的投资 —— 婚姻<ul>
<li>找一个比自己更优秀的人。经济实力也很重要</li>
<li>婚姻要长久 —— 心智要成熟，双方价值观要匹配</li>
<li>完美婚姻是 —— “夫妻关系优于亲子关系，更优于双方的父母”</li>
<li>具有可塑性，包容对方一辈子</li>
</ul>
</li>
<li>先让父母成熟起来<ul>
<li>教育中最可怕的事情 —— 用上一辈人的思想教育下一辈人如何迎接未来</li>
<li>相信年轻人，相信未来</li>
<li>现代社会，婚姻是两个人的事</li>
<li>形式上的孝顺，不如心里的尊重，行动上的主动</li>
<li>主动沟通，帮助父母与时俱进</li>
<li>要想孩子成为精英，自己要先成为精英的父母</li>
</ul>
</li>
<li>向死而生<ul>
<li>除死无大难，活着就有希望</li>
<li>生命太宝贵，不要轻易浪费别人的时间</li>
<li>正确看待死亡，在有限的生命里，创造精彩人生</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>第二章 人生需要做减法</strong></p>
<ul>
<li>不做选择的幸福<ul>
<li>印度人的成功是因为他们缺乏选择</li>
<li>把时间多花在经营上，聚焦，使我们更幸福，更成功</li>
</ul>
</li>
<li>做人与作诗：我们需要林黛玉<ul>
<li>形容之美终不如腹有诗书气自华</li>
<li>作诗的性格：要有意境、浪漫、唯美和理想，不失率真，对世俗美德不屑一顾</li>
<li>宝钗是做人，有美德。现实生活，需要我们会做人</li>
<li>黛玉是作诗，有灵性。以生命作诗的人，不会庸俗</li>
<li>世界、社会和国家需要林黛玉，没有她，我们会很庸俗</li>
<li>少一些精致的利己主义者，多一些梦想和浪漫的理想主义者</li>
<li>中国不缺乏会做人的人。当下时代会作诗，更容易脱颖而出</li>
</ul>
</li>
<li>西瓜与芝麻<ul>
<li>芝麻捡得再多，也捡不出西瓜的重量</li>
<li>追求创造性的工作，使你进入高层次</li>
<li>捡西瓜靠的是长期培养的能力，不仅仅是运气</li>
<li>想捡西瓜，就要耐得住寂寞</li>
</ul>
</li>
<li>生也有涯，知也无涯<ul>
<li>向庄子学习“做减法”</li>
<li><strong>只有少做事，才能多做事</strong></li>
<li>跳出思维定式，只做重要的事</li>
<li>有限的生命里，不止是钱</li>
<li><strong>做一个“笨”小孩，一次只做一件事</strong></li>
</ul>
</li>
<li>我们一定比18世纪的人过得好吗？<ul>
<li>现状<ul>
<li>物质生活和健康水平比过去有长足进步</li>
<li>寿命高很多</li>
<li>生命在辛苦和不安中度过，匆匆走完了一生</li>
<li>缺乏精神上的贵族</li>
</ul>
</li>
<li>18世纪，贵族是什么样的？<ul>
<li>贵族：<strong>用内心的责任和荣誉对自己进行约束，对外展现从容和优雅</strong></li>
</ul>
</li>
<li>幸福的来源<ul>
<li>有美好的爱情和婚姻。可以多谈几次恋爱</li>
<li>对未来的期望。喜欢读书的人，对明天更有信心</li>
<li>生活的态度<ul>
<li>内心有责任和荣誉</li>
<li>从容而优雅地生活</li>
<li>面对危险和困难时的镇定自若</li>
</ul>
</li>
</ul>
</li>
<li>要想比18世纪的人过得好，请记住：<ul>
<li>责任</li>
<li>荣誉</li>
<li>从容</li>
<li>优雅</li>
<li>镇定</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>第三章 谈谈见识</strong></p>
<ul>
<li><p>我们和天才相差多远</p>
<ul>
<li>天才是存在的，让我们无法望其项背，例如：约翰·冯·诺依曼</li>
<li>谷歌内部，成就最大的并非智力最高的人</li>
<li>诺贝尔奖得主：<ul>
<li>逻辑清楚</li>
<li>善于深入思考</li>
<li>成就靠长期努力所取得</li>
</ul>
</li>
<li>天才和常人最大的不同（以爱因斯坦为例）<ul>
<li>善于提问，提质量高的问题</li>
<li>善于总结规律，跳出常人思维定势，不受约束</li>
<li>非常有恒心，愿意花时间从根本上解决问题</li>
</ul>
</li>
<li>我们可以向天才学习什么？<ul>
<li>多学习做事的方法（可控性）</li>
</ul>
</li>
</ul>
</li>
<li><p>起跑线和玻璃心</p>
<ul>
<li>即使赢在起跑线，今后未必赢</li>
<li>赢在了起跑线，今后更要长期努力</li>
<li>赢家是属于坚持跑到终点的人</li>
<li>家庭和学校的正确引导很重要</li>
<li>“玻璃心”使年轻人失去人生长跑的动力</li>
<li>多经历挫折，练就一颗强大的心脏</li>
<li>这样的人生才完美：一边坚持长跑，一边欣赏沿途的风景。</li>
</ul>
</li>
<li><p>论运气</p>
<ul>
<li>运气很重要，更重要的是你如何看待好运气和坏运气</li>
<li><strong>运气不好的时候，最需要的是慢下来思考，有耐心地做事情</strong></li>
<li>运气一直不很好的杜鲁门成功的要素：<ul>
<li>足够的耐心</li>
<li>善于利用过去的经历，变成日后成功的财富</li>
<li>低调和朴实</li>
</ul>
</li>
<li>与运气做朋友，少怨气，平和做事，更接近成功</li>
<li>努力过后，好运气依然没来，怎么办？<ul>
<li>“问心无愧是我们唯一稳得的报酬”——约翰·肯尼迪</li>
<li>“尽人事，听天命”</li>
</ul>
</li>
</ul>
</li>
<li><p>比贫穷更可怕的是什么？</p>
<ul>
<li><p>即使小时候贫穷，将来未必没有机会</p>
</li>
<li><p>活得不顺三个共同问题：</p>
<ul>
<li><p><strong>缺乏见识</strong></p>
<p>和某些人道理永远讲不通，因为认知水平在不同层次。</p>
</li>
<li><p><strong>缺乏爱</strong></p>
<p>缺乏爱的人难以大气，不大气难以做成大事，不懂得关爱别人，不懂得分享。</p>
</li>
<li><p><strong>缺乏规矩</strong></p>
<p>破坏规矩而不自知，会使没有人帮助他们。这个世界上没有人帮助是不行的。</p>
</li>
</ul>
</li>
<li><p>物质条件差，也不能影响父母在见识、爱和规矩上培养好孩子</p>
</li>
<li><p>小时候的贫穷不是将来孩子不能成功的理由</p>
</li>
</ul>
</li>
<li><p>对话庄子：谈谈见识</p>
<ul>
<li><strong>人最终能走多远，取决于他们的见识</strong></li>
<li>要与比自己好的人为伍，提高自己的见识</li>
<li>拥有更加开放的心态，接受新的东西</li>
<li>审视目前的成就，跳出认知局限</li>
<li>大和小，不追求极端，把握其中的度，可以相辅相成</li>
<li>《庄子》吴军人生精神导师</li>
</ul>
</li>
<li><p>阅读的意义</p>
<ul>
<li>不仅仅是获得信息，更是生活的一种行为</li>
<li>阅读可以交友，有共同语言。例如富兰克林</li>
<li>阅读帮助我们重新认识自己、认清世界，审视自己的不足，使自己成长得更好</li>
<li>阅读在科技时代更为重要<ul>
<li>帮助我们重启大脑深入思考功能</li>
<li>独立思考，抵抗狭隘、摆脱思想控制和不受舆论的支配</li>
</ul>
</li>
<li>“终身学习，向死而生”</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>reading</category>
      </categories>
      <tags>
        <tag>人生</tag>
        <tag>智慧</tag>
        <tag>商业</tag>
      </tags>
  </entry>
  <entry>
    <title>误入 GoGreen! 可持续生活创变营</title>
    <url>/zerowaste/%E8%AF%AF%E5%85%A5GoGreen%E5%8F%AF%E6%8C%81%E7%BB%AD%E7%94%9F%E6%B4%BB%E5%88%9B%E5%8F%98%E8%90%A5.html</url>
    <content><![CDATA[<p><img src="/images/static/GoGreen_Vloveit_2020.png"></p>
<h2 id="创变营"><a href="#创变营" class="headerlink" title="创变营"></a>创变营</h2><p>上个月在朋友圈看到微辣青年在招募“GoGreen! 可持续生活创变营”营员，想着过去一段时间，在环保圈潜水太久了，出来露露脸，认识一下新伙伴也蛮好的。于是，不小心就报名了，然后参加面试，然后通过了。</p>
<p>报名之后，发现我手上的工作越来越多，也够忙好久了，腾出两个周末参加活动其实有点困难，于是纠结要不要参加。碍于已经答应主办方，并且交了押金，所以还是参加一下吧，反正提供酒店住宿，就当周末度假、学习好了。害，可我还是想得太简单了，于是度过了两个有点累、有点魔幻的周末。</p>
<p><img src="/images/static/2020_GoGreen_003.jpeg"></p>
<h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><p>虽然因为参加 Go Green! 可持续生活创变营，错过了 1024 程序员节的研讨会，错过了开源社区工作小组的会议，也错过了家庭聚餐。但是，人生就是这样，总是充满了各种遗憾和惊喜。</p>
<p>说实话，营会的前半段很不适应，我也时常懊恼为什么在这里浪费时间，我想在这里获得什么？</p>
<p>尤其是上周没有去成自己想去的农场参访，被安排去奶茶店做调研的时候。实际上，我不喜欢喝奶茶，也看过调研报告，所以对我来说完全没有吸引力。我努力说服自己：“不要逃避，把它当作一次挑战吧，和你不熟悉的人，做一些不熟悉的事，加油！”还好，调研过程还算顺利，小伙伴也都比较积极，还认识了曾经在宜居广州工作的阿Lo。才发现其实我和阿Lo是多年的网友，也算是一个小惊喜吧。</p>
<p>再说这周末两天两夜的创变营会，也是够魔幻的。因为主办方只提供了大致行程，至于具体做什么只有到现场才知道。这就很尴尬了，跟我的度假计划完全对不上，只能见一步走一步。周六上午的创变议题分享，其实我也思考了很久，虽然我的确有一些想开展的项目，但因为我想偷懒嘛，所以肯定不会给自己挖坑。于是从操作难度和团队参与方面考虑，提出了一个《可持续生活指南》的学习计划。</p>
<p>后来和几个相似议题的小伙伴匆匆组队，很快就成了十几人的团队。在下午的行动方案讨论中，因为我发现了执行能力较强的小伙伴，基于最小工作量原则（摸鱼策略），我自然选择抱大腿的方案，尽量不表达自己的想法，先理解别人的方案。然而，两个小时过去了，讨论陷入了僵局，大家依然不太理解到底做什么、怎么分工合作。我也发现了部分小伙伴表现不积极，甚至出现迷茫、失落情绪。</p>
<p>我非常理解她们，她们来这个创变营的目的是想学习可持续生活方面的知识，想先让自己参与进来，从自身做起，再慢慢影响身边的人。而不是现在讨论的方案——组织线下活动，打造品牌，直接影响别人。显然，这些小伙伴们更希望先把注意力放在自己身上，先照顾好自己，先让自己变得优秀。此时此刻，我的心情是复杂的，因为我不想花太多时间去开展为期六周的落地行动，更何况是组织线下活动这种费神的事。但我又不太想当组长，在接下来的24小时中忙得焦头烂额，还要参加路演。</p>
<p>最终，还是内在的责任心驱动了我。好吧，我不想浪费时间，也不想我的小伙伴们浪费时间。就这样，我和几个不开心的小伙伴裂变出来了，重新讨论我们简单的《可持续生活指南》学习计划。我也顺理成章地担任临时组长角色，跟她们分享我的观点和计划。慢慢地，大家变得开心起来了，氛围也变得轻松了许多，我们也在紧锣密鼓地准备项目方案、项目计划书、PPT 和明天的路演。</p>
<p>虽然我常常在想创业的事，可是没想到人生中的第一次路演来得那么突然。有赖于团队成员的通力协作，不到24小时，我们完成了从团队成立到敲定方案、准备材料和作品展示的所有环节。让我感动的地方太多了！</p>
<ul>
<li>首先是团队的力量。和四位女生合作，由于刚认识不久，我也担心提出的方案过于随意，缺乏亮点和竞争力，还好四位伙伴的积极性被点燃之后，展现出超强的能力，也让我从担心到放心。小娟负责项目计划书，辣辣负责 PPT，Echo 贡献了独家珍藏的《零垃圾新手入门》，噜啦啦帮忙梳理思路和路演的讲稿。</li>
<li>其次是感受到大家快乐的情绪，从原来小组里的沉默寡言、闷闷不乐，到现在积极讨论、主动承担工作。还说学到了新知识好开心呀，看着她们脸上绽放的笑容，我好像也受到了感染，也让我更有动力把这件事情做下去。</li>
<li>还有路演之前，因为我有点紧张，她们就在我身边不断地鼓励我。因为我们是最后一组演讲的，她们会认真听其他队伍演讲，然后给我反馈，我觉得特别好。</li>
<li>还有还有，周日下午复盘的时候，大家写的结果评估、成功失败原因分析都相当一致，还在失败一栏打了个大叉，哈哈～ 成功的关键是：轻松、开心的氛围，以及一致的观点。大家都是宝藏！</li>
</ul>
<p>没想到的是，路演现场来了许多评委和嘉宾，有种广州环保圈小年会的感觉，看到了许多熟悉的面孔之后，更加紧张了！因为我的定位其实一直没有想好，感觉有点尴尬，所以每次公开讲话都要思考好久哪些该说哪些不该说。好吧，时间过得真快，路演就这么不完美地结束了。该进入下一阶段了！</p>
<br>

<p><img src="/images/static/2020_GoGreen_052.jpeg"></p>
<p><img src="/images/static/2020_GoGreen_055.jpeg"></p>
]]></content>
      <categories>
        <category>zerowaste</category>
      </categories>
      <tags>
        <tag>环保</tag>
        <tag>可持续生活</tag>
      </tags>
  </entry>
  <entry>
    <title>远离那些消耗你的人和事</title>
    <url>/journal/%E8%BF%9C%E7%A6%BB%E9%82%A3%E4%BA%9B%E6%B6%88%E8%80%97%E4%BD%A0%E7%9A%84%E4%BA%BA%E5%92%8C%E4%BA%8B.html</url>
    <content><![CDATA[<h2 id="远离那些消耗你的人和事"><a href="#远离那些消耗你的人和事" class="headerlink" title="远离那些消耗你的人和事"></a>远离那些消耗你的人和事</h2><p>大学入学那天，我带来十四箱行李和一辆自行车，箱子里有暑假期间提前买的书，有未来四年要用的被子、衣服等生活用品，有高中时候入手的一些电子工具和轮滑鞋，甚至还有螺丝刀、订书机、草稿本……</p>
<p>我是一个不喜欢麻烦别人的人，大多数时候都是别人来麻烦我，而我尽量不去麻烦别人。</p>
<p>很久以后，我才发现，这种性格让我陷入了巨大的麻烦。</p>
<p>家人觉得我把学习和生活打理得很好而不用为我操心，同学觉得我设备齐全习惯于找我借东西，队友觉得我身体素质很好把我推向前线，朋友觉得我家境富裕喜欢找我借钱，谈的对象也觉得我很优秀值得对她更好。</p>
<p>唯独我自己，知道家里条件不好，要好好学习才能出人头地；知道同学找我借的东西，其实我也需要用；知道球队需要我表现得更好，而我牺牲了学习时间不停训练却依然出不了成绩；知道朋友陷入资金困难，把所剩无几的钱借出大半年却不敢开口谈利息；知道女朋友要好好爱护，直到在感情里迷失了自己，其实，我也需要爱护。</p>
<p>回过头来才发现，原来当初师兄师姐那句“报喜不报忧”真是坑啊。我根本没有那么强大，我自己也处于成长期，我也会犯错，假装强大充当别人的保护伞，最终只会落得千疮百孔，不堪一击。</p>
<p>后来，我才敢面对自己。其实一路以来，我都只是活在别人的期待里，我是自卑的，所以才会选择付出更多来弥补，所以才不敢让家人失望，所以才不敢麻烦别人，不懂装懂，怕被别人嫌弃。如此脆弱的心灵，伴随了我二十多年。</p>
<p>直到现在，经历了许多家庭矛盾，经历了不愉快的亲密关系，经历了投资失败，经历了一轮又一轮的社会毒打之后。我才明白，原来我的健康、我的快乐，我的事业，我的梦想才是最重要的。</p>
<p>那些不断消耗我的人和事，都滚一边去！</p>
<p><img src="https://img.zcool.cn/community/01591756ea170a32f875520fcbc173.jpg@1280w_1l_2o_100sh.jpg"></p>
]]></content>
      <categories>
        <category>journal</category>
      </categories>
      <tags>
        <tag>心灵成长</tag>
      </tags>
  </entry>
  <entry>
    <title>TED：20岁到30岁，是你最不可挥霍的光阴</title>
    <url>/movies/ted-why-30-is-not-the-new-20.html</url>
    <content><![CDATA[<h2 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h2><p><strong>Why 30 is not the new 20</strong></p>
<iframe src="//player.bilibili.com/player.html?aid=54802233&bvid=BV1B4411K7Rb&cid=95852081&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>

<hr>
<h2 id="中英文对照"><a href="#中英文对照" class="headerlink" title="中英文对照"></a>中英文对照</h2><p>When I was in my 20s, I saw my very first psychotherapy client. I was a Ph.D. student in clinical psychology at Berkeley. She was a 26-year-old woman named Alex.</p>
<p>记得见我第一位心理咨询顾客时，我才20多岁。当时我是 Berkeley 临床心理学在读博士生。我的第一位顾客是名叫 Alex 的女性，26岁。</p>
<p>Now Alex walked into her first session wearing jeans and a big slouchy top, and she dropped onto the couch in my office and kicked off her flats and told me she was there to talk about guy problems. Now when I heard this, I was so relieved. My classmate got an arsonist for her first client. (Laughter) And I got a twentysomething who wanted to talk about boys. This I thought I could handle.</p>
<p>第一次见面 Alex 穿着牛仔裤和宽松上衣走进来，她一下子栽进我办公室的沙发上，踢掉脚上的平底鞋，跟我说她想谈谈男生的问题。当时我听到这个之后松了一口气。因为我同学的第一个顾客是纵火犯，而我的顾客却是一个20出头想谈谈男生的女孩。我觉得我可以搞定。</p>
<p>But I didn’t handle it. With the funny stories that Alex would bring to session, it was easy for me just to nod my head while we kicked the can down the road.</p>
<p>但是我没有搞定。Alex 不断地讲有趣的事情，而我只能简单地点头认同她所说的，很自然地就陷入了附和的状态。</p>
<p>“Thirty’s the new 20,” Alex would say, and as far as I could tell, she was right. Work happened later, marriage happened later, kids happened later, even death happened later. Twentysomethings like Alex and I had nothing but time.</p>
<p>Alex 说：“30岁是一个新的20岁”。没错，我告诉她“你是对的”。工作还早，结婚还早，生孩子还早，甚至死亡也早着呢。像 Alex 和我这样20多岁的人，什么都没有但时间多的是。</p>
<p>But before long, my supervisor pushed me to push Alex about her love life. I pushed back. I said, “Sure, she’s dating down, she’s sleeping with a knucklehead, but it’s not like she’s going to marry the guy.” And then my supervisor said, “Not yet, but she might marry the next one. Besides, the best time to work on Alex’s marriage is before she has one.”</p>
<p>但不久之后，我的导师就要我向 Alex 的感情生活施压。我反驳说：“当然她现在正在和别人交往，她现在和一个傻瓜男生睡觉，但看样子她不会和他结婚的。” 而我的导师说：“不着急，她也许会和下一个结婚。但修复 Alex 婚姻的最好时期是她还没拥有婚姻的时期。”</p>
<p>That’s what psychologists call an “Aha!” moment. That was the moment I realized, 30 is not the new 20. Yes, people settle down later than they used to, but that didn’t make Alex’s 20s a developmental downtime.</p>
<p>这就是心理学家说的“顿悟时刻”。正是那个时候我意识到，30岁不是一个新的20岁。的确，和以前的人相比，现在人们更晚才安定下来，但是这不代表 Alex 就能长期处于20多岁的状态。</p>
<p>That made Alex’s 20s a developmental sweet spot, and we were sitting there blowing it. That was when I realized that this sort of benign neglect was a real problem, and it had real consequences, not just for Alex and her love life but for the careers and the families and the futures of twentysomethings everywhere.</p>
<p>更晚安定下来，应该使 Alex 的20多岁成为发展的黄金时段，而我们却坐在那里忽视这个发展的时机。从那时起我意识到这种善意的忽视确实是个问题，它不仅给 Alex 本身和她的感情生活带来不良后果，而且影响到处20多岁的人的事业、家庭和未来。</p>
<p>There are 50 million twentysomethings in the United States right now. We’re talking about 15 percent of the population, or 100 percent if you consider that no one’s getting through adulthood without going through their 20s first.</p>
<p>现在在美国，20多岁的人有五千万，也就是15%的人口，或者可以说所有人口，因为所有成年人都要经历他们的20多岁。</p>
<p>Raise your hand if you’re in your 20s. I really want to see some twentysomethings here. Oh, yay! Y’all’s awesome. If you work with twentysomethings, you love a twentysomething, you’re losing sleep over twentysomethings, I want to see — Okay. Awesome, twentysomethings really matter.</p>
<p>如果你现在20多岁，请举手。我很想看到有20多岁的人在这里。哦，很好。如果你和20多岁的人一起工作，你喜欢20多岁的人，你因为20多岁的人辗转难眠，我想看到你们。很棒，看来20多岁的人确实很受重视。</p>
<p>So I specialize in twentysomethings because I believe that every single one of those 50 million twentysomethings deserves to know what psychologists, sociologists, neurologists and fertility specialists already know: that claiming your 20s is one of the simplest, yet most transformative, things you can do for work, for love, for your happiness, maybe even for the world.</p>
<p>因此我专门研究20多岁的人，因为我坚信这五千万的20多岁的人，每一个人都应该去了解那些心理学家、社会学家、神经学家和生育专家已经知道的事实：你的20多岁是极简单却极具变化的时期之一。你20多岁的时光决定了你的事业、爱情、幸福甚至整个世界。</p>
<p>This is not my opinion. These are the facts. We know that 80 percent of life’s most defining moments take place by age 35. That means that eight out of 10 of the decisions and experiences and “Aha!” moments that make your life what it is will have happened by your mid-30s.</p>
<p>这不是我的看法。这些是事实。我们知道80%决定你生活的时刻发生在35岁之前。这就意味着你生活的重要决定、经历和突然的领悟，有八成是在你30多岁之前发生的。</p>
<p>People who are over 40, don’t panic. This crowd is going to be fine, I think. We know that the first 10 years of a career has an exponential impact on how much money you’re going to earn. We know that more than half of Americans are married or are living with or dating their future partner by 30.</p>
<p>那些超过40岁的朋友不要惊慌，我想这群人会没事的。我们知道职业生涯的前10年对你将来的收入有重大影响。我们知道到了30岁的时候，超过半数的美国人会结婚或者和未来的另一半同居或者约会。</p>
<p>We know that the brain caps off its second and last growth spurt in your 20s as it rewires itself for adulthood, which means that whatever it is you want to change about yourself, now is the time to change it. We know that personality changes more during your 20s than at any other time in life, and we know that female fertility peaks at age 28, and things get tricky after age 35.</p>
<p>我们知道人在20多岁的时候大脑停止第二次也是最后一次重组，以适应成年世界的快速发育阶段。这就意味着不管你想怎样改变自己，现在就是时间改变了。我们知道在20多岁的时候，性格的改变多于生命中任何时期。我们也知道女性的最佳生育时期在28岁的时候达到顶峰，35岁之后生育变得困难。</p>
<p>So your 20s are the time to educate yourself about your body and your options. So when we think about child development, we all know that the first five years are a critical period for language and attachment in the brain. It’s a time when your ordinary, day-to-day life has an inordinate impact on who you will become.</p>
<p>所以你的20多岁正是了解你自身和选择的时期。当我们想到孩童的成长时，我们都知道1-5岁是大脑学习语言和感知的重要时期。这个时期，日常的普通生活都会对你的未来道路影响巨大。</p>
<p>But what we hear less about is that there’s such a thing as adult development, and our 20s are that critical period of adult development. But this isn’t what twentysomethings are hearing. Newspapers talk about the changing timetable of adulthood.</p>
<p>但是我们却很少听到成年发展期，而我们的20多岁正是成年发展期的关键。但是20多岁的人却听不到这些，报纸讨论的只是成年年龄界线的变更。</p>
<p>Researchers call the 20s an extended adolescence. Journalists coin silly nicknames for twentysomethings like “twixters” and “kidults.” It’s true. As a culture, we have trivialized what is actually the defining decade of adulthood.</p>
<p>研究者称20多岁是延长的青春期。记者就引用傻傻的外号称呼20多岁的人，比如“twixters” (twenty-mixters)和“kidults”(kid-adults)。 这是真的。作为一种文化，我们的忽视的正是对成年起到决定性作用的十年（从20岁到30岁）。</p>
<p>Leonard Bernstein said that to achieve great things, you need a plan and not quite enough time. Isn’t that true? So what do you think happens when you pat a twentysomething on the head and you say, “You have 10 extra years to start your life”? Nothing happens. You have robbed that person of his urgency and ambition, and absolutely nothing happens.</p>
<p>雷昂纳德·伯恩斯坦说过：要想取得成就，你需要一个计划和紧迫的时间。这是大实话啊！所以当你拍着一个20多岁的人的脑袋，跟他说，“你有额外的10年去开始你的生活”，你觉得这改变了什么？什么都没改变。你只是夺走了那个人的紧迫感和雄心壮志，绝对没有改变什么。</p>
<p>And then every day, smart, interesting twentysomethings like you or like your sons and daughters come into my office and say things like this: “I know my boyfriend’s no good for me, but this relationship doesn’t count. I’m just killing time.” Or they say, “Everybody says as long as I get started on a career by the time I’m 30, I’ll be fine.”</p>
<p>然后每天，那些聪明有趣的20多岁的人就像你们和你们的儿子女儿一样，走入我的办公室开始说：“我知道我的男朋友对我不够好，但是我们的关系不算数。我只是在消磨时光而已。”或者说“每个人都告诉我只要能在30岁的时候开始我的事业，这就足够了。”</p>
<p>But then it starts to sound like this: “My 20s are almost over, and I have nothing to show for myself. I had a better résumé the day after I graduated from college.” And then it starts to sound like this: “Dating in my 20s was like musical chairs. Everybody was running around and having fun, but then sometime around 30 it was like the music turned off and everybody started sitting down.</p>
<p>但是实际听上去却是：“我马上就要三十了，却根本就没有东西展示。我只是在大学毕业时有过一份最漂亮的简历。” 或是这样：“我20多岁时的约会就像找凳子。每个人都绕着凳子跑，随便玩一玩，但是快30的时候就像音乐停止了，所有人开始坐下。</p>
<p>I didn’t want to be the only one left standing up, so sometimes I think I married my husband because he was the closest chair to me at 30.” Where are the twentysomethings here? Do not do that. Okay, now that sounds a little flip, but make no mistake, the stakes are very high.</p>
<p>我不想成为那唯一站着的人，所以有时候我会想我和我丈夫之所以会结婚，是因为在我30岁的时候，他是当时离我最近的那张凳子。在场的20多岁的人呐，千万不要这样做。这个做法听起来有点轻率，但是不要犯错，因为风险很高。</p>
<p>When a lot has been pushed to your 30s, there is enormous thirtysomething pressure to jump-start a career, pick a city, partner up, and have two or three kids in a much shorter period of time. Many of these things are incompatible, and as research is just starting to show, simply harder and more stressful to do all at once in our 30s.</p>
<p>当很多事都被挤到你30多岁的时候，就会有巨大压力，在很短的时间内快速启动一项事业，挑一个城市，找到伴侣，生两三个孩子。这些事大多是不能同时完成的，正如研究表明，在30岁的时候要想工作生活一步到位，难度很高，压力很大。</p>
<p>The post-millennial midlife crisis isn’t buying a red sports car. It’s realizing you can’t have that career you now want. It’s realizing you can’t have that child you now want, or you can’t give your child a sibling.</p>
<p>千禧年后的中年危机并不是一辆红色跑车。而是意识到你不能拥有你想拥有的事业，意识到你不能拥有你想要的孩子，或者给你的孩子添个兄弟姐妹。</p>
<p>Too many thirtysomethings and fortysomethings look at themselves, and at me, sitting across the room, and say about their 20s, “What was I doing? What was I thinking?” I want to change what twentysomethings are doing and thinking.</p>
<p>太多30多岁40多岁的人看看他们自己，看看我，坐在屋子里谈论自己的20多岁，“我当时都干么了？我当时都想啥了？”我想改变现在20多岁人的所思所为。</p>
<p>Here’s a story about how that can go. It’s a story about a woman named Emma. At 25, Emma came to my office because she was, in her words, having an identity crisis. She said she thought she might like to work in art or entertainment, but she hadn’t decided yet, so she’d spent the last few years waiting tables instead.</p>
<p>这里我想讲个故事说明问题。这个故事是关于名叫 Emma 一个女人。她25岁的时候走入我的办公室，因为用她自己的话说，她有自我认识危机。她说她也许想从事关于艺术或者娱乐的工作，但是她还没决定。所以取而代之的是她花了过去几年的时间当服务员。</p>
<p>Because it was cheaper, she lived with a boyfriend who displayed his temper more than his ambition. And as hard as her 20s were, her early life had been even harder. She often cried in our sessions, but then would collect herself by saying, “You can’t pick your family, but you can pick your friends.”</p>
<p>为了减少开销，她和她的男朋友同居，一个脾气暴躁而无志向的人。正如她悲惨的20多岁，她早年的生活更加悲惨。她经常在谈话过程中哭泣，努力镇定下来后说“你没办法选择你的家庭，但是你可以选择你的朋友。”</p>
<p>Well one day, Emma comes in and she hangs her head in her lap, and she sobbed for most of the hour. She’d just bought a new address book, and she’d spent the morning filling in her many contacts, but then she’d been left staring at that empty blank that comes after the words “In case of emergency, please call … “</p>
<p>有一天，Emma 走进来，她双手抱头于膝盖，然后抽泣了几乎一个小时。她刚买了一个新的通讯录本子，然后花了一整个早上的时间填写她的联系人信息。当她填到 “万一发生紧急情况，请联系…” 的时候，她没有任何人可填。</p>
<p>She was nearly hysterical when she looked at me and said, “Who’s going to be there for me if I get in a car wreck? Who’s going to take care of me if I have cancer?” Now in that moment, it took everything I had not to say, “I will.”</p>
<p>她几乎崩溃地看着我并说，“如果我被车撞了，谁会在那里？假如我得癌症了，谁会在那里？” 在那种情况下，我花了好大力气才忍住说 “我会。”</p>
<p>But what Emma needed wasn’t some therapist who really, really cared. Emma needed a better life, and I knew this was her chance. I had learned too much since I first worked with Alex to just sit there while Emma’s defining decade went parading by.</p>
<p>Emma 所需要的并不是理疗师所真正关心的。她需要一个更好的生活，我知道这是她的机会。自 Alex 开始，我从这份工作上学到了很多，不能只是坐在那里看着 Emma 十年黄金定型期白白消逝。</p>
<p>So over the next weeks and months, I told Emma three things that every twentysomething, male or female, deserves to hear.</p>
<p>所以接下去的几个星期几个月，我告诉 Emma 三件事，所有20多岁的男生女生都值得听一听。</p>
<p>First, I told Emma to forget about having an identity crisis and get some identity capital. By get identity capital, I mean do something that adds value to who you are. Do something that’s an investment in who you might want to be next.</p>
<p>首先，我告诉 Emma 忘掉她的自我认识危机，去获得一些身份认定的资本。身份资本是指做增加自我价值的事。为自己下一步想成为的样子做一些事一些投资。</p>
<p>I didn’t know the future of Emma’s career, and no one knows the future of work, but I do know this: Identity capital begets identity capital. So now is the time for that cross-country job, that internship, that startup you want to try.</p>
<p>我不知道 Emma 的工作将来是什么样的，也没人知道将来的工作是什么样的，但是我知道：身份资本会创造出更多身份资本。现在是时候去尝试你想要的海外工作、实习或者新起点。</p>
<p>I’m not discounting twentysomething exploration here, but I am discounting exploration that’s not supposed to count, which, by the way, is not exploration. That’s procrastination. I told Emma to explore work and make it count.</p>
<p>我不是轻视20多岁的自我探索，而是轻视那些随便玩玩无所谓的探索，或者从某种意义上说那不是探索。那是拖沓！我告诉 Emma 去探索工作，让她的探索有所回报。</p>
<p>Second, I told Emma that the urban tribe is overrated.</p>
<p>第二，我告诉 Emma 不要高估自己的朋友圈。</p>
<p>Best friends are great for giving rides to the airport, but twentysomethings who huddle together with like-minded peers limit who they know, what they know, how they think, how they speak, and where they work. That new piece of capital, that new person to date almost always comes from outside the inner circle.</p>
<p>好朋友会载你去机场，而和 “志同道合的朋友” 瞎混的20多岁的人，他们的交际圈、知识面、思维方式、说话方式和工作层面都被限制住了。新的资本或者新的约会对方往往是从内部交际圈之外来的。</p>
<p>New things come from what are called our weak ties, our friends of friends of friends. So yes, half of twentysomethings are un- or under-employed. But half aren’t, and weak ties are how you get yourself into that group. Half of new jobs are never posted, so reaching out to your neighbor’s boss is how you get that un-posted job. It’s not cheating. It’s the science of how information spreads.</p>
<p>新的事情来自我们所谓的“弱关系”，我们朋友的朋友的朋友。没错，半数20多岁的人处在失业和半失业的状态。但是另外一半的人却不是这样的，“弱关系”正是你融入一个新的群体的纽带。有半数的新工作从来不公示出来，所以联络你邻居的老板是你找到那些未公示工作的方式。这不叫作弊，这是信息传播的科学方式。</p>
<p>Last but not least, Emma believed that you can’t pick your family, but you can pick your friends. Now this was true for her growing up, but as a twentysomething, soon Emma would pick her family when she partnered with someone and created a family of her own.</p>
<p>最后一点也很重要，Emma 相信你无法选择你的家庭，但是你可以选择你的朋友。可这只是她成长时期的状况。作为一个20多岁的人，Emma 很快会与某人为伴组建她自己的新家庭。</p>
<p>I told Emma the time to start picking your family is now. Now you may be thinking that 30 is actually a better time to settle down than 20, or even 25, and I agree with you. But grabbing whoever you’re living with or sleeping with when everyone on Facebook starts walking down the aisle is not progress.</p>
<p>我告诉 Emma 现在就是你选择你家庭的时候。现在你也许会想相比于20岁，25岁或30岁时组建家庭会更好。我同意你的看法。但是当你 Facebook 上的朋友都开始步入婚姻殿堂时，你随便抓一个人一起生活、睡觉绝对不是组建家庭的过程。</p>
<p>The best time to work on your marriage is before you have one, and that means being as intentional with love as you are with work. Picking your family is about consciously choosing who and what you want rather than just making it work or killing time with whoever happens to be choosing you.</p>
<p>经营你婚姻的最佳时间是你还没结婚的时候，这意味要像你为了工作一样精心谋划。选择你的家庭是有意识地去选择你想要的人和事，而不是为了结婚或者消磨时光，任意选择一个正好选择你的人。</p>
<p>So what happened to Emma? Well, we went through that address book, and she found an old roommate’s cousin who worked at an art museum in another state. That weak tie helped her get a job there. That job offer gave her the reason to leave that live-in boyfriend.</p>
<p>Emma 发生了什么变化呢？我们翻了一遍通讯录，她发现她原来的舍友的表妹在另一个州的一家艺术博物馆工作。这层弱关系帮助她在那里得到一份工作。这份工作给她一个理由离开她那同居的男友。</p>
<p>Now, five years later, she’s a special events planner for museums. She’s married to a man she mindfully chose. She loves her new career, she loves her new family, and she sent me a card that said, “Now the emergency contact blanks don’t seem big enough.”</p>
<p>现在五年过去了，她是一名博物馆特别活动策划者。她和一个她用心选择的男人结婚了。她爱她的事业，她爱她的新家，她寄给我一张贺卡写道，“现在紧急联系栏似乎不够填呢。”</p>
<p>Now Emma’s story made that sound easy, but that’s what I love about working with twentysomethings. They are so easy to help. Twentysomethings are like airplanes just leaving LAX, bound for somewhere west. Right after takeoff, a slight change in course is the difference between landing in Alaska or Fiji.</p>
<p>Emma 的故事听起来简单，这正是为什么我爱和20多岁人打交道。帮助20多岁的人很容易。20多岁就像离开洛杉矶飞往西部某处的飞机，起飞之后，一点小小变化都会影响到它最终将降落在阿拉斯加还是斐济。</p>
<p>Likewise, at 21 or 25 or even 29, one good conversation, one good break, one good TED Talk, can have an enormous effect across years and even generations to come. So here’s an idea worth spreading to every twentysomething you know.</p>
<p>同理，在你21岁，25岁甚至29岁的时候，一次好的谈话、好的休息、好的 TED 演讲，能在未来的几年甚至几代人的时间里带来巨大的影响。因此这个想法值得传达给每一个你所认识的20多岁人。</p>
<p>It’s as simple as what I learned to say to Alex. It’s what I now have the privilege of saying to twentysomethings like Emma every single day: Thirty is not the new 20, so claim your adulthood, get some identity capital, use your weak ties, pick your family. Don’t be defined by what you didn’t know or didn’t do. You’re deciding your life right now. Thank you.</p>
<p>这想法就像我后来告诉 Alex 的话一样简单。我应该每天都对像 Emma 这样的20多岁的人说：30岁不是一个新的20岁，所以规划好你的成年生活，获得一些身份认同资本，利用你的弱关系，选择你的家庭。不要被你所不知道的，从未做过的事所禁锢。你现在的作为决定着你的人生。谢谢。</p>
]]></content>
      <categories>
        <category>movies</category>
      </categories>
      <tags>
        <tag>TED演讲</tag>
        <tag>时间</tag>
      </tags>
  </entry>
  <entry>
    <title>给五年后的自己（写在29岁生日）</title>
    <url>/journal/to-myself-in-five-years-written-on-the-29-birthday.html</url>
    <content><![CDATA[<p>亲爱的，祝贺你来到了34岁这个黄金时期。20-30岁这个阶段真的很重要，也很难，就我个人而言，简直是一路披荆斩棘，一步一个坑。</p>
<p>我也在想，为什么好像做什么都是从 hard 模式开始？比如生不逢时，没有享受过家庭的好时光；比如作为家里第一位大学生，无人指导只能自己摸索；比如在家里难以获得理解，浪费太多时间在沟通上了；再比如职业规划不清晰、遭遇职业发展瓶颈，缺乏正确的金钱观和理财意识、多次投资失败；还有，第一次去欧洲旅行就遇上行李延误……</p>
<p>可是，仔细想想，又好像有迹可循，抛不开原生家庭、个人能力圈和性格这几方面。好消息是，这些都可以通过改变自己来得到改善，从而对未来产生积极的影响，包括家庭、事业、社交等方面。</p>
<p>过去一年，我都异常焦虑，高质量的睡眠也常常消失。临近而立之年，还没有任何成就，确实是挺难受的。不过值得庆幸的是，能在二十多岁找到自己的发展方向，找到值得一生去追求的事业，并且还形成了对痛苦超强的忍耐力。所以，确定好目标，接下来就是舍命狂奔！</p>
<p>这几年，我经历了世界观、人生观和价值观的重塑。我害怕你忘记初心、舍本逐末，我害怕你事业有成便得意忘形，我害怕你事业受挫或婚姻破裂，从此一蹶不振。这也是我务必给你写这封信的原因，希望34岁的你，依然未来可期，人生值得！</p>
<p>当然，如果34岁的你，已经拥有一份小而美的事业，身边有爱你的伴侣和小孩，正在过着你想过的自由生活。那接下来的内容大可不必细看，好好享受人生吧~</p>
<p>而如果你对自己的生活不满意，请好好阅读下面一些建议！</p>
<h2 id="1-保持好奇心"><a href="#1-保持好奇心" class="headerlink" title="1. 保持好奇心"></a>1. 保持好奇心</h2><p>自我认识你以来，你就是充满了好奇心，好奇心能够驱使你去探索，也能够帮助你辩证地看待这个世界。真担心以后有一天你对这个世界不再好奇了，开始觉得生活很无聊。请一定要保持好奇心，“无聊”的人生跟你无关。</p>
<h2 id="2-保持同理心"><a href="#2-保持同理心" class="headerlink" title="2. 保持同理心"></a>2. 保持同理心</h2><p>你是一个敏感、有同理心的人。以前觉得挺困扰的，不过后来觉得这样挺好的，能更快地察觉问题，也很容易切换到别人的角度去思考，这会让你看到一个更真实的世界。从上帝视角去看待问题，也能帮助你培养大局观，找到问题根源。</p>
<p>生活中充满了许多未经验证的假设，请一定要保持同理心，多多思考和反省。</p>
<h2 id="3-不要停止学习"><a href="#3-不要停止学习" class="headerlink" title="3. 不要停止学习"></a>3. 不要停止学习</h2><p>学习是使你保持进步的秘密，也是你的核心竞争力。世界上有很多能人，即便你以后是事业有成的老板，能请许多人帮你处理事务，但也请你不要停止学习。这并不冲突，团队协作是必要的，因为能提高效率；个人学习也是必要的，因为能扩大你的能力圈。说到学习，我已经给你总结出一些方法了。</p>
<ol>
<li>快速学习：先 know how，再 know why；</li>
<li>24小时冲刺：学习一项技术（达到入门水平）其实并不需要花太多时间，心无旁骛的24小时一定可以帮到你，可以尝试每周来一个24小时创新冲刺；</li>
<li>模仿学习：有点像以前抄书，不过在信息时代就更便捷了，好好利用前人的研究成果（比如开源项目），在模仿中学习，没有什么不好意思的，注意版权问题即可；</li>
<li>实践学习：有时候动手实践一遍比看十遍理论知识有用，尤其是工科应用，多做多练，熟能生巧；</li>
<li>组队学习：组建兴趣小组、创客空间、线下沙龙、读书会等等，相互学习和分享是有必要的，因为每个人的视野不同，一千个读者就有一千个哈姆雷特；</li>
<li>花钱学习：比如拆书服务、专业培训、会议、研学、聚会，或者重新回学校读书，只要你真的需要，就值得花这些钱。</li>
</ol>
<h2 id="4-做言行一致的人"><a href="#4-做言行一致的人" class="headerlink" title="4. 做言行一致的人"></a>4. 做言行一致的人</h2><p>还记得小时候，在家特别调皮，在学校却特别安静。没错，人是有许多面的，有复杂的人性，在一些场景下还需要演戏。</p>
<p>但我还是建议你尽量充实自己的精神世界，遵循自己的风格和行事准则，做一个内外兼修、知行合一、言行一致的人。这会给你带来许多好处，比如你会感觉更轻松，因为无需掩饰自己。同时，言行一致会给你带来良好的口碑，在成长路上会得到更多的机会和帮助。</p>
<p>凡事三思，言出必行。</p>
<h2 id="5-专注于一件事"><a href="#5-专注于一件事" class="headerlink" title="5. 专注于一件事"></a>5. 专注于一件事</h2><p>我在27、8、9岁的时候就发现，专注力大不如前了。可能是因为许多人生大事都放在这个阶段处理吧，职业发展、成家立业、买房买车…… 都在分散你的注意力。找出那些对你来说最重要的，适当放弃一些东西，人生会更轻松。</p>
<ul>
<li>草莓酱定律：面积涂得越大，酱就越薄。</li>
<li>果酱定律：只要还有果粒，草莓酱就永远不会被涂抹得过薄。</li>
</ul>
<p>那么增加自己的草莓酱，那么找出那些重要的果粒，并且不要随意丢弃它们。</p>
<p>据我经验，任务切换的消耗是不容忽视的，切忌三心两意、朝三暮四，尽量一次只做一件事情。Less is more，慢慢来，比较快。还记得 KISS 原则吧，Keep It Simple and Stupid，事实证明，这是最可靠的！</p>
<p>别听领导瞎说，领导当然希望榨干你的剩余劳动价值。但如果你还在打工，一定要注意这点，你可以宏观上表现为一个多线程生物，但微观上必须要做一个简单快乐的单线程生物。最好是，让你的果粒变大，大到不用害怕被涂抹均匀。</p>
<h2 id="6-精准努力"><a href="#6-精准努力" class="headerlink" title="6. 精准努力"></a>6. 精准努力</h2><p>这条建议是上一条建议的延伸，当你找到你要做的事情或方向后，就该好好考虑如何落地了。</p>
<p>把任务拆解开来，看看自己还需要弥补哪些技能，还要如何提升，然后逐个击破。</p>
<p>我已经发现了，对个人来说，最重要的资源是——时间。把你的时间和精力放在哪些能帮助你达成目标的事情和人上面，避免不必要的消耗。</p>
<h2 id="7-不要贩卖焦虑"><a href="#7-不要贩卖焦虑" class="headerlink" title="7. 不要贩卖焦虑"></a>7. 不要贩卖焦虑</h2><p>虽然通过这种方式容易吸取流量、赚取收益，但你千万不要跟他们一伙。</p>
<p>如果你想做自媒体，一定要坚持自己的风格，输出真正有价值的内容。这个社会太浮躁，你需要沉淀下来。与其成为平台附庸，倒不如做独立博客。</p>
<p>我想，这种社会焦虑症可能还会持续一段时间，所以你的目光要放长远一点，还要掌握反焦虑的方法，并且分享给你身边的人。</p>
<h2 id="8-多和朋友交流"><a href="#8-多和朋友交流" class="headerlink" title="8. 多和朋友交流"></a>8. 多和朋友交流</h2><p>萧伯纳曾经说过：“如果你有一个苹果，我有一个苹果，彼此交换，我们每个人仍然只有一个苹果；如果你有一种思想，我有一种思想，彼此交换，我们每个人就有了两种思想，甚至多于两种思想。”</p>
<p>相信我，思想的碰撞真的很奇妙，每次都或多或少有新收获。密友间的交流可以倾吐感情，悲伤时给你安慰和帮助；而普通朋友间的弱链接关系也很重要，可能会得到更加客观和有效的交流。</p>
<p>人的一生很短暂，不可能体验所有的人生，但是通过交流，你可以感受到别人的人生，你可以吸取别人的经验和教训，这些都相当重要。</p>
<p>分享并不意味着失去，相反会使我们的人生更加丰富多彩。</p>
<h2 id="9-多元化交友"><a href="#9-多元化交友" class="headerlink" title="9. 多元化交友"></a>9. 多元化交友</h2><p>越长大越发现，圈子真的很重要。不同的圈子就像不同领域的能量体，总能给你带来意想不到的收获。难怪有人说，这个世界最重要的资源，是每个人的创造力。</p>
<p>你可以尝试多认识不同领域、不同专业背景、不同地区、不同年龄段的人，这会帮助你看到一个更加真实的世界。</p>
<p>还有，记住要保持同理心，因为每个人所看到的世界是不一样的。不一样不代表是错的，常怀包容之心，学会从他们角度看问题。</p>
<h2 id="10-做你自己也想去上班的公司"><a href="#10-做你自己也想去上班的公司" class="headerlink" title="10. 做你自己也想去上班的公司"></a>10. 做你自己也想去上班的公司</h2><p>我知道你特别不喜欢上班（上班≠工作），在格子间工作的效率低下，对公司和个人来说都不利。如果你决定创业，或者已经在经营你的公司，一定要把公司做成你自己也想去上班的公司。</p>
<p>想想五年前的自己有多痛苦，想想哪些复杂的流程和规章制度，想想哪些办公室政治…… 你一定要勇敢地拥抱新商业模式！</p>
<ul>
<li>把能开源的都开源，以品牌和服务取胜；</li>
<li>多方面创造价值，社会的、知识的、情感的、精神的、文化的、物质的，并处于良性循环的企业；</li>
<li>把外部人当作内部人看：供应商、社群、对手，真正关心地球生态；</li>
<li>领导者有智慧，具备热爱与关怀的能力，善于指导和激励员工，对使命充满热情，很少关注个人权力；</li>
<li>员工热爱工作，自我管理、自我激励、自组织和自我纠偏地工作着；</li>
<li>团队充满激情并致力于自己的工作，互相关爱协作，建立在爱和关心而不是压力和恐惧之上；</li>
<li>……</li>
</ul>
<h2 id="11-相信你的合伙人"><a href="#11-相信你的合伙人" class="headerlink" title="11. 相信你的合伙人"></a>11. 相信你的合伙人</h2><p>一个人走得更快，但一群人才能走得更远。</p>
<p>如果你已经找到了优秀的合作伙伴，请大胆地信任他们，他们对这份共同事业的追求也许比你更强烈。</p>
<h2 id="12-学会跟聪明人共事"><a href="#12-学会跟聪明人共事" class="headerlink" title="12. 学会跟聪明人共事"></a>12. 学会跟聪明人共事</h2><p>你可能觉得自己挺聪明的，放弃这种想法吧，把自己揉碎，抱着空杯心态前行。</p>
<p>这个世界从来不缺聪明人，怎么样让聪明人一起合作共事才是更重要的。对于你而言，多向他们请教有助于你的成长。而如果你是老板，则需要激励他们，让他们有更大的格局，带着使命感去工作，同时要多为他们服务，让他们工作地开心，这将有助于企业发展。</p>
<h2 id="13-多帮助年轻人"><a href="#13-多帮助年轻人" class="headerlink" title="13. 多帮助年轻人"></a>13. 多帮助年轻人</h2><p>未来是年轻人的，如果条件允许，请多帮助你的后辈，包括亲戚朋友，以及那些有能力、有梦想，但缺乏指导的年轻人。</p>
<p>多影响一个年轻人，世界就会越朝着你想看到的那样发展。</p>
<h2 id="14-敬畏市场和风险"><a href="#14-敬畏市场和风险" class="headerlink" title="14. 敬畏市场和风险"></a>14. 敬畏市场和风险</h2><p>金融市场目前是超出我的能力圈层的，这也难怪我这几年投资接连惨败。希望34岁的你在这方面有所提高，如果你在金融市场获得了不错的收益，千万不能飘！</p>
<p>一定要不断学习，不断理解这个世界，敬畏市场，敬畏风险，还有那复杂的人性。</p>
<h2 id="15-孝顺不能等"><a href="#15-孝顺不能等" class="headerlink" title="15. 孝顺不能等"></a>15. 孝顺不能等</h2><p>不要总说等事业有成之后怎么怎么样。有空多回家看看外公外婆，陪他们吃饭聊天。</p>
<p>跟父母的关系也尽量修复一下吧，虽然他们不太理解你，但还是要多点耐心，多点沟通。父母、老人还是很重要的，现在许多亲戚关系都靠他们来维系。感觉我们这一代人在这方面挺冷淡的，尤其是我们家这种比较复杂的重组家庭。</p>
<p>尽量把和父母的关系变成朋友关系，家庭融洽的关系一定会让你更安心。</p>
<h2 id="16-选择伴侣"><a href="#16-选择伴侣" class="headerlink" title="16. 选择伴侣"></a>16. 选择伴侣</h2><p>别跟我说，你要像达芬奇、牛顿、特斯拉他们那样，专注于科学研究和伟大的事业，所以不能结婚！</p>
<p>这种想法是相当幼稚和肤浅的。能否取得伟大成就根本不在于是否结婚，而是取决于你在这件事情付出了多少努力。如果你跟不合适的人结婚，过着不如意的生活，那必然会极大影响你对工作和事业的投入。但如果你跟合适的人结婚，生活幸福的话，就会促进你的事业发展，形成一个良性循环。</p>
<p>你不能把婚姻当作累赘，解决办法就是找到合拍的伴侣，让你的生活充满爱和关怀。</p>
<p>对于这一点，我建议你选择成熟、观念一致、内心充实、懂得照顾别人、有自驱力的女性，而不是年轻、漂亮、富裕的。因为，这样的你们一定会创造出你们想要的幸福生活！当然，如果同时满足这些条件，并且你们相互爱慕，那还考虑什么，赶紧结婚吧~</p>
<p>人生很长，伴侣的关系比亲子关系和父母关系都重要，所以一定要找聊得来的、能理解你的，这样相处起来才舒服，也才能促进家庭和事业的发展。</p>
<p>还有一点，人是会变的。比如29岁的我在思想观念上与24岁的时候已经有很大差别了，相信34岁的你也会我现在的我不一样。不过，我想这种差距可能会小一点，因为大量资料标明，20-30岁是我们思维形成的重要阶段。</p>
<p>所以，希望我在29岁时给你的建议有用，也十分期待34岁的你回来告诉我答案。</p>
<h2 id="17-关于性"><a href="#17-关于性" class="headerlink" title="17. 关于性"></a>17. 关于性</h2><p>性是美妙的。自从青春期以来，就懵懵懂懂地探索，甚至直到现在潜意识里还是有些羞耻感。这不能怪你，而是长期以来性教育缺失造成的。所以你并不需要有任何心理压力。</p>
<p>我给你的建议是重新建立起对两性关系的看法。如果你已婚，并且过着幸福的生活，那么好好享受性爱即可。但是如果你单身、离异，抑或处于一段不好的亲密关系之中，我希望你能摆脱性的束缚，重新思考一下人生。一方面是你是否真的需要这样的性生活，另一方面是这会对你的性伴侣造成什么影响？显然，夹杂着情感的性是复杂，很容易造成误判。</p>
<p>前段时间，我特意研究了“换妻”的行为和心理。我本来觉得如果可行，我应该也会尝试，可是最后的答案是 No！我希望34岁的你也能记住29岁的答案，为什么是 No。其实不是因为我有多高尚，或者早已看破红尘。根本原因是，这种生活方式不是我想要的。表面上声称将性和爱分离的“换妻”行为，不可避免隐藏着那些人性弱点，极其容易在这种场景下激发出来（七宗罪：傲慢、贪婪、色欲、嫉妒、暴食、憤怒及怠惰）。而对于我来说，我希望我的生活是简单的、有确定性的。所以在研究完之后，反而心理恢复了平静。</p>
<p>还有，如果你事业有成了，免不了一些诱惑。如果你拿捏不住，记住要用 WCCA（最坏情况后果分析）方法快速思考：</p>
<ol>
<li>这个选择最坏的后果是什么？</li>
<li>这种后果的概率是多少？</li>
<li>这是一个可以接受的风险吗？</li>
</ol>
<p>我真心祝愿34岁的你，正在和你的伴侣过着幸福的生活，正在为美好的事业打拼。让这一部分成为废话~</p>
<h2 id="18-保持运动习惯"><a href="#18-保持运动习惯" class="headerlink" title="18. 保持运动习惯"></a>18. 保持运动习惯</h2><p>大概从高中开始，运动就成了我的反焦虑秘诀之一。我常常跟自己说：哪怕我成绩不好，哪怕我一事无成，只要我还有一个好身体，就还有希望！</p>
<p>29岁的我，偶尔也还会这样对自己说，希望34岁的你也一样。</p>
<p>每天保持适量运动，保持良好精神状态即可，不要过量，也不要花太多时间。让运动融入到生活中去吧！</p>
<p>短暂的运动员生涯虽然没有给我带来直接效益，但是让我对自己的身体有了更深的了解，同时磨炼了我的毅力。希望这份财富能够在创业过程中帮到你。</p>
<h2 id="19-保证充足睡眠"><a href="#19-保证充足睡眠" class="headerlink" title="19. 保证充足睡眠"></a>19. 保证充足睡眠</h2><p>不要熬夜，不要熬夜，不要熬夜！宁可早点起床也不要熬夜！</p>
<p>别跟我说达芬奇和特斯拉都不怎么睡觉，我已经试过了，不睡觉这条路走不通，你也别再尝试了。</p>
<p>你要养成早睡早起的习惯，你想挤出更多工作时间的话就试下每天早上四点半起床吧，配合定时短期睡眠来恢复体力。要尊重生物特性，不要逆着来！</p>
<p>保证充足睡眠，保持头脑清醒，会对你的幸福生活和美好事业起到事半功倍的效果。</p>
<h2 id="20-重视你的感受"><a href="#20-重视你的感受" class="headerlink" title="20. 重视你的感受"></a>20. 重视你的感受</h2><p>Feel your feeling，是我过去一段时间在练习的内容。我以前总是倾向于做成本效益分析，希望每次抉择都是最佳的，可是结果并不理想，而且发现很多事情根本没法算清楚，有时候感性的一面反而更有效。Feel your feeling 是一种反馈机制，你的身体不会骗你，如果你的感觉不太对，那一定是哪里出问题了。</p>
<p>比如亲密关系不融洽、工作不开心，或者做了一件什么事情让你感到愧疚。都在提示你，你正在做的事情可能不对，你需要做出调整。</p>
<p>只有感觉对了，你的思考和行为才会得到正向的反馈，从而激励你继续下去，形成良好的循环。</p>
<h2 id="21-最后"><a href="#21-最后" class="headerlink" title="21. 最后"></a>21. 最后</h2><p>虽然 Life is so hard，但请记住：</p>
<ul>
<li>Don’t give up</li>
<li>Don’t give in</li>
<li>Don’t lose hope</li>
</ul>
]]></content>
      <categories>
        <category>journal</category>
      </categories>
      <tags>
        <tag>修身</tag>
        <tag>总结</tag>
        <tag>思考</tag>
      </tags>
  </entry>
  <entry>
    <title>2021离职总结与计划</title>
    <url>/journal/2021-resignation-summary-and-plan.html</url>
    <content><![CDATA[<p>从2021年1月18日入职，到9月17日离职，刚好8个月时间。</p>
<p>这是一家环保物联网公司，公司不大，但已深耕环保监测领域十多年，值得来学习一番。</p>
<img src="/images/journal/20210917_bocon.jpeg" width=600 />

<p>入职的岗位是“Linux驱动工程师”，其实还是蛮期待的，因为可以从底层开始研究一款产品，在开发和维护 BSP 的过程中能看到许多细节。在后期还参与了几个应用模块的开发，包括设备抽象层、平台上报层、OTA 远程升级等。逐渐对环保数采仪有了深入的了解，一部分原因就得益于“驱动-应用-平台-前端”整个链路的打通。</p>
<p>整体来看，环保数采仪的组成结构并不复杂，其核心就是“数据采集、存储和上报”。因此数据的准确性是至关重要的，所以我们时常调侃自己在“面向监狱编程”，因为这些数据可作为环保执法的证据。就像现在特别火的“碳中和”一样，它的基础就是“碳核算”，也就是如何计算碳排放量的问题。不同的是，环境数据采集通常是瞬时的值，例如污染物浓度，而碳数据采集的则是总的碳排放量，并且是换算成二氧化碳当量来统计的。</p>
<p>其实是一份蛮不错的工作，对不对？我也是这么认为的，一方面工作经验能有不错的衔接，有利于职业发展；另一方面“环保+物联网”也是我感兴趣的方向，是了解环保行业的一个很好地切入点。</p>
<p>不过，工作一段时间之后还是作出了辞职的决定。有很多方面的因素，包括公司地点比较偏远，生活不是很便利；前段时间分手后状态起起伏伏，有时候难以静下心来工作；半年时间其实也学习到许多东西，比如产品架构、功能、代码框架等等，但继续做下去的话，坑比较多，学习速度也会变慢。更重要的是，我时常关注环保可持续领域的动态，我认为现在是一个不错的机遇，我不想再做一名看客了，我想做一份自己的事业，对人类有益的事业，我想验证我设想的项目，而且我觉得它不比现在的许多创业项目差，关键是——我已经迫不及待、摩拳擦掌、热血难凉了！与其内心百般煎熬，不如痛痛快快地去追逐梦想！</p>
<img src="/images/journal/20210918_nansha.jpeg" width=600 />

<p>这份煎熬，其实从我上一份在国企上班时就开始了，我在那里待了四年零五个月，兢兢业业地干，却实现不了我自己的价值。我有梦想，可是我没法跟身边的同事分享，每天都过得小心翼翼的，就像一台木有感情的赚钱机器一样。我意识到，我需要离开，我要做一点自己的事情！</p>
<p>但是我发现，我要顾虑的东西太多了。没有家庭的依靠，一切都要靠自己，还要考虑父母的养老问题。而且前几年由于在老家买了房和其他一些失败的投资，导致目前手上可用的现金不多。每每这个时候，心里总是有另一个声音，要不再坚持几年，争取更高的工资收入，多攒点钱再说……</p>
<p>最后，我还是听从了内心更大的一个声音——勇敢地辞职、创业，体会不一样的人生。</p>
<p>“创业”这个词现在对我来说还是有点重，我更喜欢称辞职后的这段时间（估计有三、五个月）为过渡期。好好休息一下，好好整理一下，好好准备一下。</p>
<p>下面是接下来计划要做的事（按先后顺序）：</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> 完成《从端到云搭建物联网系统》书稿；</li>
<li><input disabled="" type="checkbox"> 完成《基于树莓派的Yocto最佳实践》书稿；</li>
<li><input disabled="" type="checkbox"> 整理 getiot.tech 网站教程，发布正式版本，并赚取1美元广告收入；</li>
<li><input disabled="" type="checkbox"> 把想看又还没看的书看完；（人生需要暂停一下，填补知识盲区 (๑•̀ㅂ•́)و✧）</li>
<li><input disabled="" type="checkbox"> 整理 luhuadong.com 个人网站；</li>
<li><input disabled="" type="checkbox"> 探索 zerotogether.net 网站的发展方向；</li>
<li><input disabled="" type="checkbox"> 制作 “零聚地图” App 原型；</li>
<li><input disabled="" type="checkbox"> 制作堆肥机原型；</li>
<li><input disabled="" type="checkbox"> 尝试做一名环保博主；</li>
<li><input disabled="" type="checkbox"> 部署 “科庭家居” 管理系统。</li>
</ul>
<p>本来上述列表中有一项是“多陪伴家人”，但是现在正值中秋，回家两天后发现家人目前其实也不太需要我的陪伴，所以还是先做好自己的事吧！抽空教一下表弟表妹外甥打球、学习，看一下父母、外公外婆那边有什么需要帮忙的就可以了。</p>
<p>这次回家，最大的感受是家里对我的吐槽少了，关心多了。可能是担心我这位“大龄单身失业男青年”吧，其实我也焦虑啊，我也想结婚，可是目前的状态来看，哪怕结婚了，依然有许多问题没解决，不能很好地照顾家庭、陪伴孩子成长。所以，也许这就是我们这种出身普通的“普通人”绕不过的坎吧，还是要勇敢面对。这些年起起落落，经历的失败多了，我终于承认了我就是一个普通人。国泰民安的时候，做一份小而美的事业，国家需要的时候，能挺身而出。不也挺好的吗？</p>
<p>我会不会继续写代码？—— 会的。一方面，软件程序是非常有用的工具，低成本创业就要善用工具；另一方面，我也需要保持编写代码的能力，以防创业失败后还能找一份不错的工作养家糊口。7年的开发经历，能够给我底气的是这些年培养起来的学习能力和解决问题的能力，还有非常重要的创客精神和开源精神。所以，不管我是否从事软件工作，我也会一直以开源极客的心态写代码，直到这个世界不需要我。</p>
<p>我会不会重新找工作？—— 我想也是会的，除非我自己的公司短期内得到快速发展。因为目前还在探索阶段，还没有稳定的商业模式，因此我会在把相关项目跑起来之后重新找工作，同时兼职运营项目。一方面，如果我的资金消耗过快而仍未盈利，我还需要继续积累原始资本；另一方面，我还想去包括小米、极飞、奥北、多抓鱼等一些值得去学习的企业，接触真实的需求才能设计出好的产品。</p>
<img src="/images/journal/20210916_basketball.jpeg" width=480 />
]]></content>
      <categories>
        <category>journal</category>
      </categories>
      <tags>
        <tag>工作</tag>
        <tag>总结</tag>
        <tag>未来</tag>
      </tags>
  </entry>
  <entry>
    <title>为什么我还没结婚</title>
    <url>/relationship/why-youre-not-married-yet.html</url>
    <content><![CDATA[<h2 id="婚姻是什么"><a href="#婚姻是什么" class="headerlink" title="婚姻是什么"></a>婚姻是什么</h2><h2 id="我需不需要婚姻"><a href="#我需不需要婚姻" class="headerlink" title="我需不需要婚姻"></a>我需不需要婚姻</h2><h2 id="我适不适合结婚"><a href="#我适不适合结婚" class="headerlink" title="我适不适合结婚"></a>我适不适合结婚</h2><p>婚姻的本质是合作，是抱团取暖、规避风险。这是婚姻能够带给我们这种普通人最大的利好。只不过同时想要交换这种利好，前提就是两个人必须是能够合作的人，都需要去适应一个新的身份，把一个人的利益扩大成两个人甚至是三个人。看问题的角度，也从“我”变成“我们”。</p>
<p>真正的爱情只发生在两个平等的人身上。</p>
<p>沟通能解决大部分问题，前提是两个人都愿意沟通。</p>
<p>为什么这么久才发现不合适？</p>
<p>如何让一个人在精神上离不开你？——为伴侣提供情绪价值</p>
<p>我能够为对方提供什么？我能否满足对方的核心需求？</p>
<p>放弃对完美的幻想，才能更容易找到合适的人。合适就是两个人恰好都能够满足对方的需要，你喜欢的样子他都有，而你们身上的缺点在对方眼里都不是什么大问题，都能包容，这就是合适。婚姻的底色不是爱情，而是合适。在你眼里 TA 是最好的，最符合你对伴侣的期待，也符合你对共度一生的那个人的想象。</p>
<p>一次性决策</p>
<p>无常乃人生之常，生命的魅力就在于，你永远不知道下一秒会发生什么？</p>
<p>对事对物，对名对利，得之不喜，失之不忧，宠辱不惊，去留无意。</p>
<p>婚姻最好的状态是各司其职。</p>
]]></content>
      <categories>
        <category>relationship</category>
      </categories>
      <tags>
        <tag>爱</tag>
        <tag>婚姻</tag>
      </tags>
  </entry>
  <entry>
    <title>开启终身学习之旅</title>
    <url>/common/source-list-learning.html</url>
    <content><![CDATA[<h2 id="GitHub-资源"><a href="#GitHub-资源" class="headerlink" title="GitHub 资源"></a>GitHub 资源</h2><ul>
<li>OSSU 计算机科学自学：<a href="https://github.com/ossu/computer-science">https://github.com/ossu/computer-science</a></li>
<li>TeachYourselfCS：<a href="https://github.com/keithnull/TeachYourselfCS-CN">https://github.com/keithnull/TeachYourselfCS-CN</a></li>
<li>浙江大学课程攻略共享计划：<a href="https://github.com/QSCTech/zju-icicles">https://github.com/QSCTech/zju-icicles</a></li>
<li>清华大学计算机系课程攻略：<a href="https://github.com/PKUanonym/REKCARC-TSC-UHT">https://github.com/PKUanonym/REKCARC-TSC-UHT</a></li>
</ul>
<h2 id="嵌入式-Linux"><a href="#嵌入式-Linux" class="headerlink" title="嵌入式 Linux"></a>嵌入式 Linux</h2><ul>
<li>GNU 项目：<a href="https://www.gnu.org/">https://www.gnu.org/</a></li>
<li>GNU 的 FTP 站点：<a href="https://ftp.gnu.org/">https://ftp.gnu.org/</a></li>
<li>Linux kernel：<a href="https://www.kernel.org/">https://www.kernel.org/</a></li>
<li>Linux kernel 下载地址：<a href="https://www.kernel.org/pub/linux/kernel/">https://www.kernel.org/pub/linux/kernel/</a></li>
<li>U-Boot 下载地址：<a href="ftp://ftp.denx.de/pub/u-boot">ftp://ftp.denx.de/pub/u-boot</a></li>
<li>BusyBox：<a href="https://busybox.net/">https://busybox.net/</a></li>
<li>Bash 下载地址：<a href="https://ftp.gnu.org/gnu/bash/">https://ftp.gnu.org/gnu/bash/</a></li>
<li>ARM交叉编译工具链：<a href="https://www.veryarm.com/">https://www.veryarm.com/</a></li>
<li>ARM Developer：<a href="https://developer.arm.com/">https://developer.arm.com/</a></li>
<li>QEMU：<a href="https://www.qemu.org/">https://www.qemu.org/</a></li>
<li>Linux Cross Reference：<a href="http://lxr.free-electrons.com/">http://lxr.free-electrons.com/</a></li>
<li>Bootlin：<a href="https://bootlin.com/">https://bootlin.com/</a> （Bootlin is an engineering company specialized in embedded Linux）</li>
<li>Linux From Scratch：<a href="http://www.linuxfromscratch.org/">http://www.linuxfromscratch.org/</a></li>
<li>Buildroot：<a href="https://buildroot.org/">https://buildroot.org/</a></li>
<li>Yocto Project / OpenEmbedded：<a href="https://www.yoctoproject.org/">https://www.yoctoproject.org/</a></li>
<li>Yocto 的 Git 代码库：<a href="https://git.yoctoproject.org/">https://git.yoctoproject.org/</a></li>
<li>OpenEmbedded 的 Git 代码库：<a href="https://git.openembedded.org/">https://git.openembedded.org/</a></li>
<li>Gentoo Linux 手册：<a href="https://wiki.gentoo.org/wiki/Handbook:X86/Full/Installation/zh-cn">https://wiki.gentoo.org/wiki/Handbook:X86/Full/Installation/zh-cn</a></li>
<li>Ubuntu 软件包检索：<a href="https://packages.ubuntu.com/">https://packages.ubuntu.com/</a></li>
<li>Ubuntu 中文 Wiki：<a href="https://wiki.ubuntu.org.cn/">https://wiki.ubuntu.org.cn/</a></li>
<li>Linux 命令大全：<a href="https://man.linuxde.net/">https://man.linuxde.net/</a></li>
<li>LINUX.COM：<a href="https://www.linux.com/">https://www.linux.com/</a></li>
<li>Linux 公社：<a href="https://www.linuxidc.com/">https://www.linuxidc.com/</a> （下载的话，用户名与密码都是 <a href="http://www.linuxidc.com)/">www.linuxidc.com）</a></li>
<li>Linux 中国：<a href="https://linux.cn/">https://linux.cn/</a></li>
<li>Qt 下载中心：<a href="https://download.qt.io/">https://download.qt.io/</a></li>
<li>QTCN开发网：<a href="http://www.qtcn.org/bbs/i.php">http://www.qtcn.org/bbs/i.php</a></li>
<li>Clonezilla（再生龙）：<a href="https://sourceforge.net/projects/clonezilla/files/clonezilla_live_stable/">https://sourceforge.net/projects/clonezilla/files/clonezilla_live_stable/</a></li>
<li>跟我一起写 Makefile：<a href="https://seisman.github.io/how-to-write-makefile/">https://seisman.github.io/how-to-write-makefile/</a></li>
<li>跟我一起写Makefile：<a href="https://wiki.ubuntu.org.cn/%E8%B7%9F%E6%88%91%E4%B8%80%E8%B5%B7%E5%86%99Makefile">https://wiki.ubuntu.org.cn/跟我一起写Makefile</a></li>
<li>RT patch 下载：<a href="https://www.kernel.org/pub/linux/kernel/projects/rt/">https://www.kernel.org/pub/linux/kernel/projects/rt/</a></li>
<li>RTAI 官网：<a href="https://www.rtai.org/">https://www.rtai.org/</a></li>
<li>Xenomai 官网：<a href="http://xenomai.org/">http://xenomai.org/</a></li>
<li>tslib 库源码下载：<a href="https://github.com/kergoth/tslib">https://github.com/kergoth/tslib</a></li>
<li>oRTP 库源码下载：<a href="http://download.savannah.gnu.org/releases/linphone/ortp/sources/">http://download.savannah.gnu.org/releases/linphone/ortp/sources/</a></li>
<li>Linphone 源码下载：<a href="http://www.linphone.org/technical-corner/linphone/downloads">http://www.linphone.org/technical-corner/linphone/downloads</a></li>
<li>vim键盘图：<a href="http://www.viemu.com/a_vi_vim_graphical_cheat_sheet_tutorial.html">http://www.viemu.com/a_vi_vim_graphical_cheat_sheet_tutorial.html</a></li>
</ul>
<h2 id="书籍教程"><a href="#书籍教程" class="headerlink" title="书籍教程"></a>书籍教程</h2><blockquote>
<p>很不错的资源，包括部分 GFDL books</p>
</blockquote>
<ul>
<li><strong>《free programming books》</strong>：<br><a href="https://github.com/vhf/free-programming-books/blob/master/free-programming-books-zh.md">https://github.com/vhf/free-programming-books/blob/master/free-programming-books-zh.md</a></li>
<li><strong>《开源世界旅行手册》</strong>：<a href="https://i.linuxtoy.org/docs/guide/index.html">https://i.linuxtoy.org/docs/guide/index.html</a></li>
<li><strong>《鸟哥的Linux私房菜》</strong><ul>
<li>新网址：<a href="https://linux.vbird.org/">https://linux.vbird.org/</a></li>
<li>旧网址：<a href="http://linux.vbird.org/">http://linux.vbird.org/</a></li>
</ul>
</li>
<li><strong>《Linux就该这么学》</strong>：<a href="http://www.linuxprobe.com/chapter-00.html">http://www.linuxprobe.com/chapter-00.html</a></li>
<li><strong>《Docker学习笔记》</strong>：<a href="http://blog.opskumu.com/docker.html">http://blog.opskumu.com/docker.html</a></li>
<li><strong>《Python全栈工程师学习笔记》</strong>：<a href="https://book.itxueyuan.com/L8P9/EDMq">https://book.itxueyuan.com/L8P9/EDMq</a></li>
<li><strong>Docker 中文</strong>：<a href="http://www.docker.org.cn/book/docker/what-is-docker-16.html">http://www.docker.org.cn/book/docker/what-is-docker-16.html</a></li>
<li><strong>菜鸟教程</strong>：<a href="https://www.runoob.com/">https://www.runoob.com/</a></li>
<li><strong>IT学院（书籍手册）</strong>：<a href="https://book.itxueyuan.com/explore">https://book.itxueyuan.com/explore</a></li>
<li><strong>W3C school</strong><ul>
<li><a href="https://www.w3cschool.cn/">https://www.w3cschool.cn/</a></li>
<li><a href="https://www.w3school.com.cn/">https://www.w3school.com.cn/</a></li>
</ul>
</li>
<li><strong>基础教程网</strong>：<a href="http://teliute.org/">http://teliute.org/</a></li>
</ul>
<h2 id="学习平台"><a href="#学习平台" class="headerlink" title="学习平台"></a>学习平台</h2><ul>
<li><strong>中国大学 MOOC</strong>：<a href="https://www.icourse163.org/">https://www.icourse163.org/</a></li>
<li><strong>哔哩哔哩（B站）</strong>：<a href="https://www.bilibili.com/">https://www.bilibili.com/</a> （B 站是一个很棒的免费学习网站，比如你可以搜集从入门到进阶的英语学习视频。）</li>
<li><strong>TED</strong>：<a href="https://www.ted.com/">https://www.ted.com/</a></li>
<li><strong>网易公开课</strong>：<a href="https://open.163.com/">https://open.163.com/</a></li>
<li><strong>阿里云大学</strong>：<a href="https://edu.aliyun.com/">https://edu.aliyun.com/</a></li>
<li><strong>腾讯课堂</strong>：<a href="https://ke.qq.com/">https://ke.qq.com/</a></li>
<li><strong>21ic 公开课</strong>：<a href="http://open.21ic.com/">http://open.21ic.com/</a></li>
<li><strong>抖音</strong>：<a href="https://www.douyin.com/">https://www.douyin.com/</a>（没错，利用抖音的推荐功能，可以学习很多你想学的东西。）</li>
<li><strong>网易云课堂</strong>：<a href="https://study.163.com/">https://study.163.com/</a></li>
<li><strong>慕课网</strong>：<a href="https://www.imooc.com/">https://www.imooc.com/</a></li>
<li><strong>CSDN 学院</strong>：<a href="https://edu.csdn.net/">https://edu.csdn.net/</a></li>
<li><strong>开课吧</strong>：<a href="https://www.kaikeba.com/">https://www.kaikeba.com/</a></li>
<li><strong>极客学院</strong>：<a href="https://www.jikexueyuan.com/">https://www.jikexueyuan.com/</a></li>
<li><strong>IT学院</strong>：<a href="https://www.itxueyuan.com/">https://www.itxueyuan.com/</a></li>
<li><strong>51CTO 学院</strong>：<a href="https://edu.51cto.com/">https://edu.51cto.com/</a></li>
<li><strong>粤嵌创客训练营</strong>：<a href="http://www.geconline.cn/">http://www.geconline.cn/</a></li>
<li><strong>蓝墨云班课</strong>：<a href="https://www.mosoteach.cn/">https://www.mosoteach.cn/</a></li>
</ul>
<h2 id="电子工程"><a href="#电子工程" class="headerlink" title="电子工程"></a>电子工程</h2><ul>
<li>摩尔吧：<a href="https://www.moore8.com/">https://www.moore8.com/</a></li>
<li>电子森林：<a href="https://www.eetree.cn/">https://www.eetree.cn/</a></li>
<li>硬禾学堂：<a href="https://class.eetree.cn/index">https://class.eetree.cn/index</a></li>
<li>硬禾实战营：<a href="http://www.ecbcamp.com/camp/">http://www.ecbcamp.com/camp/</a></li>
</ul>
<h2 id="开源硬件"><a href="#开源硬件" class="headerlink" title="开源硬件"></a>开源硬件</h2><ul>
<li>Adafruit：<a href="https://www.adafruit.com/">https://www.adafruit.com/</a></li>
<li>微雪百科：<a href="http://www.waveshare.net/wiki/Main_Page">http://www.waveshare.net/wiki/Main_Page</a></li>
<li>Arduino 官网：<a href="https://www.arduino.cc/">https://www.arduino.cc/</a></li>
<li>Arduino 中文社区：<a href="https://www.arduino.cn/">https://www.arduino.cn/</a></li>
<li>51duino：<a href="http://www.51duino.cn/">http://www.51duino.cn/</a></li>
<li>WiFi机器人网：<a href="http://www.wifi-robots.com/">http://www.wifi-robots.com/</a></li>
<li>树莓派：<a href="https://www.raspberrypi.org/">https://www.raspberrypi.org/</a></li>
<li>Beagle Board：<a href="https://beagleboard.org/">https://beagleboard.org/</a></li>
<li>DragonBoard 410c（CSDN开发者专区）：<a href="http://qualcomm.csdn.net/">http://qualcomm.csdn.net/</a></li>
<li>英特尔 Embedded Community：<a href="https://embedded.communities.intel.com/community/en">https://embedded.communities.intel.com/community/en</a></li>
<li>英特尔中国代理：<a href="https://ccechina.intel.com/">https://ccechina.intel.com/</a></li>
<li>element14：<a href="http://cn.element14.com/">http://cn.element14.com/</a></li>
<li>pcDuino 开源中国：<a href="http://www.oschina.net/hardware/topic/pcduino">http://www.oschina.net/hardware/topic/pcduino</a></li>
<li>pcDuino（linksprite）：<a href="http://cn.linksprite.com/">http://cn.linksprite.com/</a></li>
<li>《pcDuino 开发实战指南》：<a href="http://www.pcduino.com/wiki/index.php?title=%E4%B8%AD%E6%96%87%E4%B9%A6">http://www.pcduino.com/wiki/index.php?title=中文书</a></li>
<li>香蕉派：<a href="http://www.banana-pi.org.cn/">http://www.banana-pi.org.cn/</a></li>
<li>cubieboard：<a href="http://cubieboard.org/">http://cubieboard.org/</a></li>
<li>cubieboard 中文论坛：<a href="http://www.cubie.cc/forum.php">http://www.cubie.cc/forum.php</a></li>
<li>HiKey（LeMaker）：<a href="http://www.lemaker.org/cn">http://www.lemaker.org/cn</a></li>
<li>OpenCores（全世界最大的用于开发开源硬件 IP 核心的网站和社区）：<a href="http://opencores.org/">http://opencores.org/</a></li>
<li>OpenHW开源硬件社区：<a href="http://www.openhw.org/">http://www.openhw.org/</a></li>
<li>北京创客空间：<a href="http://www.bjmakerspace.com/">http://www.bjmakerspace.com/</a></li>
<li>柴火创客空间：<a href="http://www.chaihuo.org/">http://www.chaihuo.org/</a></li>
<li>新车间：<a href="http://xinchejian.com/">http://xinchejian.com/</a></li>
</ul>
<h2 id="人工智能"><a href="#人工智能" class="headerlink" title="人工智能"></a>人工智能</h2><ul>
<li>TensorFlow：<a href="http://www.leiphone.com/news/201606/ORlQ7uK3TIW8xVGF.html">http://www.leiphone.com/news/201606/ORlQ7uK3TIW8xVGF.html</a></li>
<li>吴恩达：<ul>
<li>机器学习课程地址：<a href="https://www.coursera.org/course/ml">https://www.coursera.org/course/ml</a></li>
<li>笔记地址：<a href="http://www.ai-start.com/ml2014/">http://www.ai-start.com/ml2014/</a></li>
<li>深度学习课程地址：<a href="https://mooc.study.163.com/university/deeplearning_ai#/c">https://mooc.study.163.com/university/deeplearning_ai#/c</a></li>
<li>笔记地址：<a href="http://www.ai-start.com/dl2017/">http://www.ai-start.com/dl2017/</a></li>
</ul>
</li>
</ul>
<h2 id="博客论坛"><a href="#博客论坛" class="headerlink" title="博客论坛"></a>博客论坛</h2><ul>
<li>InfoQ：<a href="https://infoq.cn/">https://infoq.cn</a></li>
<li>CSDN：<a href="https://www.csdn.net/">https://www.csdn.net/</a></li>
<li>开源中国：<a href="https://www.oschina.net/">https://www.oschina.net/</a></li>
<li>稀土掘金<ul>
<li>稀土官网：<a href="https://xitu.io/">https://xitu.io/</a></li>
<li>掘金社区：<a href="https://juejin.im/">https://juejin.im/</a></li>
</ul>
</li>
<li>V2EX：<a href="https://www.v2ex.com/">https://www.v2ex.com/</a></li>
<li>知乎</li>
<li>简书</li>
<li>Stackoverflow</li>
<li>RT-Thread 论坛：<a href="https://www.rt-thread.org/qa/forum.php">https://www.rt-thread.org/qa/forum.php</a></li>
<li>正点原子论坛：<a href="http://www.openedv.com/">http://www.openedv.com/</a></li>
<li>野火论坛：<a href="http://www.firebbs.cn/forum.php">http://www.firebbs.cn/forum.php</a></li>
<li>看雪论坛：<a href="https://bbs.pediy.com/">https://bbs.pediy.com/</a></li>
<li>Deepin 社区：<a href="https://www.deepin.org/">https://www.deepin.org/</a></li>
<li>西邮 Linux 兴趣小组：<a href="https://www.xiyoulinux.org/">https://www.xiyoulinux.org/</a></li>
</ul>
<h2 id="编程练习"><a href="#编程练习" class="headerlink" title="编程练习"></a>编程练习</h2><ul>
<li><p><strong>程序媛计划</strong>：<a href="https://www.cxy61.com/girl/app/home/home.html">https://www.cxy61.com/girl/app/home/home.html</a></p>
</li>
<li><p><strong>牛客网</strong>：<a href="https://www.nowcoder.com/">https://www.nowcoder.com/</a></p>
</li>
<li><p><strong>LeetCode</strong></p>
<ul>
<li><a href="https://leetcode.com/">https://leetcode.com/</a></li>
<li><a href="https://leetcode-cn.com/">https://leetcode-cn.com/</a></li>
</ul>
</li>
<li><p><strong>Codecademy</strong>：<a href="https://www.codecademy.com/zh/">https://www.codecademy.com/zh/</a></p>
</li>
<li><p><strong>Coursera</strong>：</p>
</li>
<li><p><strong>TutorialsPoint</strong>：<a href="http://www.tutorialspoint.com/">http://www.tutorialspoint.com/</a></p>
<p>程序员技术入门免费教程网站，基本上涵盖了你能想到的编程语言和技术框架。</p>
</li>
<li><p><strong>Lynda</strong>：<a href="https://www.lynda.com/">https://www.lynda.com/</a></p>
</li>
<li><p><strong>StuQ</strong>：<a href="http://www.stuq.org/">http://www.stuq.org/</a></p>
</li>
</ul>
<h2 id="大神网站"><a href="#大神网站" class="headerlink" title="大神网站"></a>大神网站</h2><ul>
<li>蜗窝科技：<a href="http://www.wowotech.net/">http://www.wowotech.net/</a></li>
<li>廖雪峰：<a href="https://www.liaoxuefeng.com/">https://www.liaoxuefeng.com/</a></li>
<li>阮一峰：<a href="http://www.ruanyifeng.com/">http://www.ruanyifeng.com/</a></li>
<li>何小庆老师：<a href="http://allanhe.xtreemhost.com/">http://allanhe.xtreemhost.com/</a></li>
<li>武晔卿老师：<a href="http://www.eefocus.com/%E6%AD%A6%E6%99%94%E5%8D%BF/blog">http://www.eefocus.com/武晔卿/blog</a></li>
<li>陈莉君老师的 Linux 内核分析与实践：<a href="https://www.mosoteach.cn/web/index.php?c=res&amp;m=index&amp;clazz_course_id=9EA69E8C-D0B0-11E7-AA22-7CD30AD36C02">https://www.mosoteach.cn/web/index.php?c=res&amp;m=index&amp;clazz_course_id=9EA69E8C-D0B0-11E7-AA22-7CD30AD36C02</a></li>
<li>吴章金的Cloud Lab（泰晓实验云台）——基于Docker/Qemu的嵌入式Linux开发环境<ul>
<li>泰晓科技：<a href="https://tinylab.org/">https://tinylab.org/</a></li>
<li>首页：<a href="http://tinylab.org/linux-lab">http://tinylab.org/linux-lab</a></li>
<li>仓库：<a href="https://github.com/tinyclub/linux-lab">https://github.com/tinyclub/linux-lab</a></li>
<li>访问：<a href="http://tinylab.cloud:6080/labs">http://tinylab.cloud:6080/labs</a></li>
</ul>
</li>
<li>周立功专栏：<a href="http://www.zlg.cn/">http://www.zlg.cn/</a></li>
<li>LEP项目：<a href="http://www.linuxep.com/">http://www.linuxep.com/</a></li>
<li>一个开源的音频分析软件：<a href="https://www.audacityteam.org/">https://www.audacityteam.org/</a></li>
<li>老设计师 James Greig 的博客：<a href="http://greig.cc/">http://greig.cc/</a></li>
<li>吴川斌的博客：<a href="https://www.mr-wu.cn/">https://www.mr-wu.cn/</a></li>
<li>Coding Horror：<a href="https://blog.codinghorror.com/">https://blog.codinghorror.com/</a></li>
</ul>
<h2 id="产品设计"><a href="#产品设计" class="headerlink" title="产品设计"></a>产品设计</h2><ul>
<li>起点学院：<a href="https://www.qidianla.com/">https://www.qidianla.com/</a></li>
<li>蓝铅笔：<a href="https://www.lanqb.com/">https://www.lanqb.com/</a></li>
<li>站酷： <a href="https://www.zcool.com.cn/">https://www.zcool.com.cn/</a></li>
<li>站酷高高手： <a href="https://www.gogoup.com/">https://www.gogoup.com/</a></li>
<li>优设：<a href="http://www.uisdc.com/">http://www.uisdc.com/</a></li>
<li>推酷： <a href="https://www.tuicool.com/">https://www.tuicool.com/</a></li>
<li>技匠社：<a href="http://www.jijiangshe.com/">http://www.jijiangshe.com/</a></li>
<li>Ember</li>
<li>Dribbble</li>
<li>Pintrest</li>
</ul>
<h2 id="外语学习"><a href="#外语学习" class="headerlink" title="外语学习"></a>外语学习</h2><ul>
<li><p><strong>China Daily</strong></p>
</li>
<li><p><strong>NPR</strong></p>
</li>
<li><p><strong>开眼英语</strong></p>
</li>
<li><p><strong>英语流利说</strong></p>
</li>
<li><p><strong>Lingvist</strong>：<a href="https://lingvist.com/">https://lingvist.com/</a></p>
<p>这个网站不仅可以用来学英语，还可以学习其他语言，如西班牙语、法语、俄罗斯语等等。号称学习一门语言只需要200小时，通过人工智能运算、大数据分析，推荐最适合你水平的教材，确定你的学习进度，了解你的学习难点，你的每一步动作与习惯，都会影响它的教程，适合各种水平的英语学习者。</p>
</li>
<li><p><strong>多邻国</strong>：<a href="http://www.duolingo.cn/">http://www.duolingo.cn/</a></p>
<p>这个网站只能学习英语和西班牙语，进入网站</p>
</li>
</ul>
<h2 id="学术科研"><a href="#学术科研" class="headerlink" title="学术科研"></a>学术科研</h2><ul>
<li><strong>IET</strong>（The Institution of Engineering and Technology，英国工程技术学会）：<a href="https://www.theiet.org/">https://www.theiet.org/</a></li>
<li><strong>IEEE</strong>（Institute of Electrical and Electronics Engineers，电气电子工程师学会）：<a href="https://www.ieee.org/">https://www.ieee.org/</a></li>
<li><strong>ITU</strong>（International Telecommunication Union，世界无线电通信大会）：<a href="https://www.itu.int/">https://www.itu.int/</a></li>
<li><strong>嵌入式系统联谊会</strong>：<a href="http://www.esbf.info/">http://www.esbf.info/</a></li>
</ul>
<h2 id="商学院"><a href="#商学院" class="headerlink" title="商学院"></a>商学院</h2><ul>
<li><strong>得到大学</strong></li>
<li><strong>混沌大学</strong></li>
</ul>
<h2 id="电台节目"><a href="#电台节目" class="headerlink" title="电台节目"></a>电台节目</h2><ul>
<li><strong>潘吉Jenny告诉你</strong></li>
<li><strong>软件那些事儿</strong></li>
<li><strong>俊玮谈新</strong></li>
<li><strong>静说日本</strong></li>
<li><strong>Developer Tea</strong>：<a href="https://spec.fm/podcasts/developer-tea">https://spec.fm/podcasts/developer-tea</a></li>
<li><strong>IPN</strong>：<a href="http://ipn.li/">http://ipn.li/</a></li>
</ul>
<h2 id="微信公众号（技术类）"><a href="#微信公众号（技术类）" class="headerlink" title="微信公众号（技术类）"></a>微信公众号（技术类）</h2><ul>
<li><strong>嵌入式资讯精选</strong>：北航杂志社官方公众号。掌握最鲜资讯，尽领行业新风。</li>
<li><strong>Linux 阅码场</strong>：宋宝华团队运营的公众号。专业的 Linux 技术社区和 Linux 操作系统学习平台，内容涉及 Linux 内核，Linux 内存管理，Linux 进程管理，Linux 文件系统和 IO，Linux 性能调优，Linux 设备驱动以及 Linux 虚拟化和云计算等各方面。</li>
<li><strong>RTThread物联网操作系统</strong>：RT-Thread 官方公众号。帮助您了解 RT-Thread 相关的资讯。</li>
<li><strong>百问科技</strong>：韦东山老师的公众号，分享有价值的嵌入式相关知识，如果您是单片机工程师，想转嵌入式 Linux，那关注这个公众号就对了。</li>
<li><strong>STM32单片机</strong>：ST MCU（产品 + 工具 + 资料 + 技术 + 市场 + 活动）× 您的关注 × 您的支持 = STM32 单片机蝴蝶乐园。</li>
<li><strong>AI电堂</strong>：电子设计知识超市，工程师的随身学堂</li>
<li><strong>电子产品世界</strong>：关注 EEPW 电子产品世界网，获取电子行业的最新资讯和最具价值的技术参考。</li>
</ul>
<h2 id="微信公众号（生活类）"><a href="#微信公众号（生活类）" class="headerlink" title="微信公众号（生活类）"></a>微信公众号（生活类）</h2><ul>
<li><strong>GoZeroWaste</strong>：GoZeroWaste（零活实验室）致力于用轻松愉快的方式帮助更多人开启零垃圾之路。我们通过一系列的活动与工作坊，向公众倡导可持续生活的理念，并鼓励大家采取积极的行动，选择对环境更友善的生活方式。</li>
<li><strong>零废弃联盟</strong>：零废弃联盟推动中国实现零废弃。</li>
<li><strong>固废观察</strong>：固废观察是原上海环境院院长张益创办的公众号，将每天与朋友分享垃圾处理、污泥处置、土壤修复等专家观点和热点资讯。</li>
<li><strong>环境健康这些事</strong>：抗击隐形污染，助力无毒中国。</li>
<li><strong>徐嘉健康频道</strong>：营养学严肃科普，谈生活尽量有趣，努力做你健康饮食的工具书。</li>
<li><strong>绿色和平行动派</strong>：好玩的环保行动社群。爱地球，做个行动派，行动带来改变！</li>
</ul>
]]></content>
      <tags>
        <tag>信息世界</tag>
      </tags>
  </entry>
  <entry>
    <title>程序员职场须知</title>
    <url>/coding/workplace-notes-for-programmers.html</url>
    <content><![CDATA[<h2 id="程序员如何避免裁员"><a href="#程序员如何避免裁员" class="headerlink" title="程序员如何避免裁员"></a>程序员如何避免裁员</h2><p>有时候被裁员并非能力问题，而是企业或自身年龄的问题，这些算是不可抗力。那程序员应该如何最大程度地避免裁员呢？</p>
<ul>
<li><strong>技术是根本。</strong>对于不属于自己的模块、整个项目的架构等等，如果有条件，都要去了解。</li>
<li><strong>业余时间一定要学习。</strong>把一门技术做深后，再去拓展，不要轻易地变换方向，对于技术趋势，要有自己的判断和理解。</li>
<li><strong>不要局限于程序员这个角色。</strong>业务、产品和设计，都要有所看法，如果有发言权，都要尽力地说出来。</li>
<li><strong>学习管理者的思维。</strong>知道公司的愿景、领导的意图和愿景。</li>
<li><strong>提高沟通能力。</strong>学会沟通和待人接物，做到与人为善。</li>
<li><strong>知己知彼。</strong>选择公司时，用行话说，你自己本身也要对公司做尽职调查。</li>
<li>程序员在埋头工作的同时，也要多关注外部行情。</li>
<li>还得关注自己的工作年限与能力，到底匹不匹配，不想被年轻人取代，就要多进行资源积累。</li>
<li>提升自己的影响力，整理好过往履历、项目经验等辅助资料，让自己成为行业内靠谱的人。</li>
<li><strong>关注身体健康。</strong>身体是本钱，熬死一波是一波。</li>
</ul>
]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>程序员</tag>
        <tag>职场</tag>
      </tags>
  </entry>
  <entry>
    <title>程序员生存定律</title>
    <url>/coding/programmers-law-of-survival.html</url>
    <content><![CDATA[<p><img src="/images/coding/hello-world.png"></p>
<h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>本文由「理想流」原创，本人整理后重新发布，版权归原作者所有。另外，我已把完整的 PDF 文档放在百度网盘，有需要的小伙伴可以下载。</p>
<p>链接: <a href="https://pan.baidu.com/s/1n8cEXY3UuNeNMlxhhCdNiA">https://pan.baidu.com/s/1n8cEXY3UuNeNMlxhhCdNiA</a> 提取码: <code>8mry</code></p>
<table>
<thead>
<tr>
<th align="center">谁</th>
<th align="center">干嘛</th>
<th align="center">啥时候</th>
</tr>
</thead>
<tbody><tr>
<td align="center">理想流</td>
<td align="center">首发</td>
<td align="center">2014-06-08</td>
</tr>
<tr>
<td align="center">阿基米东</td>
<td align="center">整理</td>
<td align="center">2019-10-03</td>
</tr>
</tbody></table>
<hr>
<p>写完《完美软件开发：方法与逻辑》后，想写本通俗点给刚入行的人看的书，干过软件这行当的可能都有这么种感觉，太多的事情真是该明白的时候不明白，真明白的时候基本就晚了，不说别人我自己就有点这样，所以就想总结下自己的过往认识写点对后辈来者有点帮助的东西。本来是想再出本书的，可是写来写去都还是有点抽象，看过我之前那本书的可能有感觉，这不是给入门的人看的文字，但一下子又改不过来，事情就耽误了。</p>
<p>所以把这些章节陆续整理下放出来，希望对刚入行的小朋友们有些帮助。有些事真是入行很久后才明白，感觉上如果能预先明白了，应该挺有帮助的。下面故事开始。</p>
<h2 id="前言：解码程序人生"><a href="#前言：解码程序人生" class="headerlink" title="前言：解码程序人生"></a>前言：解码程序人生</h2><p>有这样两个人，他们一个1966年出生于陕西长安和一个1968年出生于山西阳泉，而后经过自己的努力两个人又先后以长安县第一名和阳泉市第一名的成绩，在85年和87年考进北京大学。在近50岁的时候两个人一个历经社教、装饰业、卖肉最终在档案馆找到了归宿，一个则在留学、Infoseek 打工、回国创业之后成为知名公司的 CEO。前一个是卖肉才子陆步轩，后一个则是百度 CEO 李彦宏。两个人起点类似，但现状的差异又是如此的巨大！究竟是什么力量造成了这种人生差异，其中又是否有规律可寻？</p>
<p>对上面这个问题，我想至少在程序员的职场里答案是肯定的，在这里人生是有一种内在的支配规律的。</p>
<p>本书中试图用四个可控变量来定义程序人生的规律，它们分别是：</p>
<ol>
<li><strong>自身价值</strong>——也就是你能干什么；</li>
<li><strong>自身价值上的表达力</strong>——也就是别人认为你能干什么；</li>
<li><strong>自身价值的稀缺性</strong>——也就是在特定时空背景下，市场对某种技能的渴求程度；</li>
<li><strong>身处公司的特质和未来</strong>——也就是公司提供了怎样的平台给人发挥。</li>
</ol>
<p>本书认为这四个变量一起决定了一个人在职场中的市场价值，个人的一切选择主要是为了在这四个变量上有所收益，并使市场价值最大化。</p>
<p>程序员是一个非常离奇的职业，虽然名字都是程序员但现实中的程序员各方面差异却极大。单纯从物质收益的角度看超级程序员可以驾着游艇度假休闲，而有的程序员却只能怀揣仅剩的180元而看不到明天。这是身处职业路径上不同位置所带来的差异。职业路径确实就像分了级的梯子一样，走到那个高度就有那个高度的荣光。而为了在这梯子上走的顺畅，则需要使努力与规律契合，并在关键时刻做对选择，惟其如此人生整体表现出来的效能才会高。</p>
<p>在《黑客帝国》这部电影中曾经出现过这样一种场景，尼奥带着钥匙匠走在一条满是门的走廊里，必须开对门，尼奥才能见到 Matrix 的架构师。人生与此类似，每个人都面对和尼奥一样的问题：未来处于未知之中，每一次选择就是一次对人生未知部分的解码，选择之后人生的确定性增强而不确定性减弱，当所有未知褪去，人生也就瓜熟蒂落。</p>
<p>就像尼奥历尽许多辛苦才来到众多选择之门前面一样，要想主动选择而不是被动承受，首先要争得选择权。这种选择权往往来之不易，大多时候一个人许多年的努力拼搏才能换来一次选择的权利；但选择权的浪费却又无比的容易，这在软件行业尤为突出。看看周围，就可以感觉到有多少本来可以很杰出的人因为选错公司、选错行业、选错领域而默默无闻。</p>
<p>这是由软件独属于自身的特征所决定的。比如说：软件本身并不是一个边界清晰的领域，当软件和数学相结合时，它具有数学的特征，当软件和管理结合时，它就具有管理的特征。这种特别之处使程序员的选择权更容易被误用，因为待选项实在太多。</p>
<p>要想争得选择权并尽可能避免误用，事实上需要对程序人生中所内蕴的规律洞若观火。为此，我们就需要知道程序员可能的人生出口、需要知道左右这种人生出口的职场定律、需要知道定律之下哪些是可控变量、哪些是预设前提、需要知道可控变量应该如何去改变。其中可控变量是争得选择权并避免误用它的关键。这也正是本书的根本目的。通过对规律的解析来为程序员的成长提供一点参照，让人少走一点弯路。</p>
<p>最后为了避免被人指责为功利心太重，不懂人生价值，补充一点关于人生价值的说明。  一个人变成什么样是有规律可循的，比如：陆步轩最终成为档案馆的职员、李彦宏成为 CEO，这背后是有一种支配规律的；但变成这个样子是否有价值，则只依赖于人的内心世界和自身的选择。陆步轩可以认为自己很成功，李彦宏可以认为自己很失败。这样的想法依赖于人的价值系统，就像只有原点、X 轴、Y 轴定了才有坐标可以标记位置一样，价值系统定了才能判定某种现实是否有价值，比如说：忠诚的神父可能并不会认为成为 CEO 是有价值的事情。这种价值系统与个人关联很大，也只有个人才有定义个人价值系统的权利。本书中基本不谈这种人生价值，而只谈如何取得更大的成绩。</p>
<h2 id="程序人生的出口"><a href="#程序人生的出口" class="headerlink" title="程序人生的出口"></a>程序人生的出口</h2><p>很多人非常想知道自己的未来是什么样子的，迫切到一定程度甚至会找算命先生。如果并不是想得到一个精确结果，这事儿其实并没有想的那么难。程序员的人生看起来五花八门，可以是 Windows 系，可以是 Android 系，可以是 iPhone 系等等，但如果为之做点抽象，那就会发现人生出口的类别其实不多，接下来我们就结合例子来看看程序员的人生中最可能的几个出口。这些出口里有大部分人的未来景象。</p>
<h3 id="成就超一流高手"><a href="#成就超一流高手" class="headerlink" title="成就超一流高手"></a>成就超一流高手</h3><p>袁峰先生是《Windows 图形编程》一书的作者，也是一位纯粹的程序员。从袁峰先生公开的简历(<a href="http://www.fengyuan.com)来看,袁峰先生从1993年加入/">www.fengyuan.com)来看，袁峰先生从1993年加入</a> HP 一直到现在在微软从事 CLR 的开发始终是在编程第一线。在他的 Blog 上可以看出清晰的技术路线：</p>
<blockquote>
<p><strong>Printing → GDI/GDI+ → XPS → WPF → Parallel Computing → Debugging → Performance → CLR</strong></p>
</blockquote>
<p>考虑到袁峰先生是1978年入学的大学生，今年估计已近60岁，我们可以想象在剩余的职业生涯中，袁峰先生应该会一直从事编程工作。这也就意味着袁峰先生的职业生涯以编程开始，以编程结束，是非常典型的纯技术流的程序员：一生中不涉其他，唯有编程。</p>
<p>如果你很仔细的读过《Windows 图形编程》，你就会对袁峰先生在技术上的造诣佩服得五体投地，无论是深度还是广度。可惜的是，随着技术更迭，这本书里讲的很大一部分东西已然失去了现实意义，所以大概是买不到了。</p>
<p>这是程序员比较典型的一个出口，其特征是走比较纯粹的技术路线，其要点是技术上要能达到一定高度，最终成为顶级程序员。常说的 CodeGuru 和架构师都可以归在这一类别下，虽然这两者间还是有差异。走这条路时最怕陷入平庸，那样的话高不成低不就，很容易被新入行者超越。一旦成为技术路线上的低值人群，那就有被提前淘汰的风险，同时几乎必然会转变成失意者。</p>
<h3 id="积累、爆发、开始创业"><a href="#积累、爆发、开始创业" class="headerlink" title="积累、爆发、开始创业"></a>积累、爆发、开始创业</h3><p>与袁峰先生成为鲜明对比的是大家很熟悉的求伯君先生，这两个人虽然八竿子打不着，但参照意义其实很强。</p>
<p>袁峰先生1982年本科毕业，而求伯君先生1984年本科毕业，可以讲他们是同龄人。袁峰先生毕业于南京大学，求伯君先生毕业于国防科技大学，可以讲两个人起点、天分估计也差不多，但两个人走的道路却完全不一样。</p>
<p>求伯君先生在1994年前可以说是比较典型的程序员，这段时间里他和袁峰先生非常类似，其中值得写入软件开发史册的事情是几乎一个人完成了 DOS 下的 WPS。</p>
<p>在这个时间段上，求伯君先生无论在技术上还是产品上应该都是超绝的高手。这点可以从小米 CEO 雷军先生的回忆上看出来：</p>
<blockquote>
<p>1990年初，我在一个朋友那用了 WPS 汉卡，当时就被震住了。界面易用美观，更强的是打印结果可以先模拟显示出来。署名是香港金山公司求伯君，觉得这个 “香港” 软件写得真好。</p>
</blockquote>
<p>1994年求伯君先生创立珠海金山电脑公司，自此人生路径与袁峰先生开始有绝大分歧。在这之后，求伯君先生更多的是以企业家，而非是程序员的身份出现在大众面前，直至2011年求伯君先生宣布退休，退出公众视线。</p>
<p>求伯君先生的履历昭示了另一种程序员的道路，即以技术和热情创造辉煌产品，再以产品为创业基石。 </p>
<p>IT 行业本来就是个智力密集型的行业，想想创造一家水泥公司和软件公司的差别可以更好的理解 IT 行业与传统行业间的这种差异。互联网、云计算的兴起使创业的门槛进一步降低，理论上讲只要能做出优秀的产品并找到风险投资，几乎每个人都可以开始创业。虽然创业并非是这本书主要探讨的内容，但在当前的形势下创业确实也是少部分程序员的一个人生出口。</p>
<h3 id="转向管理之路"><a href="#转向管理之路" class="headerlink" title="转向管理之路"></a>转向管理之路</h3><p>由程序员转管理者是一条非常常见的道路，很像是程序世界里的学而优则仕。</p>
<p>现在很多软件企业中的中级管理人员（包括部门经理、产品经理、项目经理等）里70后、80后比较多，他们大多在2000年之后毕业。</p>
<p>这部分人员中的很大一部分走的是这样一条道路：在毕业后往往会从事3~5年的编程工作，接下来由于工作表现不错，同时也具备比较好的表达和沟通能力，于是开始肩负起部分管理工作。一旦开始从事管理工作后，接下来在工作中管理的成分越来越重，和程序的距离越来越远，已经算不得是纯粹的程序员了。从时间开销的角度看，他们同 PPT 打交道的时间稳步上升，而直接同编译器打交道的时间则稳步下降，并有变0的趋向。</p>
<p>这条道路是如此普遍，以至于每个程序员只要往四周一看，就都可以看到这条道路上的人。好奇者可以问问身边的中层管理人员，看看是不是这样一个成长故事。</p>
<p>走上这条道路的人需要爬的是另一种梯子，比如从项目经理到技术总监再到 CTO。当然每一层的选拔都会卡死相当一部分人。某些前行无路的人往往需要做一个艰难的选择，要么安全的维持现状，要么冒点险切换公司。</p>
<p>在很多技术路径较短，不以技术为核心的公司里，为了收入的提升这往往是一条必走的道路，所以可以讲这也是一个比较常见的人生出口。但很多人所认为的 “程序员30岁前需要向管理转行，这碗青春饭没法持续吃下去”，并不永远正确，在很多场合下这类选择反倒相当于自废武功，使自己管理上没什么成绩，技术又荒废了，这点会在后面的章节里进一步提到。</p>
<h3 id="维持原状的老码农"><a href="#维持原状的老码农" class="headerlink" title="维持原状的老码农"></a>维持原状的老码农</h3><p>维持原状的含义是加入程序员队伍后，工作内涵并无实质性变化，只是体现为一种简单的重复——这是与第一种程序员不同的关键，第一种程序员要不停的有技术上的深化和提高。</p>
<p>这类程序员所做的工作的表象形式会有所不同，比如可能今天做的是处理服装公司的网页，明天处理的则可能是化工厂的网页，但实质上各种工作本质上差别不大，从技术上看，没有层级差异。</p>
<p>下面是走到这条道路上的程序员的常见经历：姑且把这个程序员称为 X，他大学毕业后，加入一家对日外包类公司。接下来他工作的公司和地点就不停的变化。去过苏州、南京、北京、上海，由于总是不太如意，迫于经济压力也曾经到过日本，做过派遣社员，但当无法被派遣出去时，无奈之下就又回到了国内。</p>
<p>在不停的迁移过程中，工作内容变更得比较频繁，横跨多个领域，比如：银行、证券、GPS 等。但从层次来看，基本上是在应用层打转，工作内容也趋于简单化，基本上是在设计好的文档指导下做编码。由于自身能创造的价值没有显著突破，作为结果收入、职位基本上改善不多。挣扎10年之后，他很苦恼，因为自己做的事情，毕业生往往也很快就可以做，而生活的压力却在不停地随着年纪的增加而增加。</p>
<p>上述这样的经历应该并不特殊，在很多人的身上应该都可以看到类似的人生轨迹。差别只是 X 可能是公司 A，具体到某个人可能是公司 B；X 可能去的是华东，具体到某个去的可能是华北。这类程序员如果不退场，不升级，那接下来的生命中工作和生活只会以某种模式继续重复。如果运气不好，甚至可能会失业。</p>
<p>更可怕的是到一定年纪后，很大一部分这类程序员会发现自己连退场的资格也没有，因为除了会写程序，并不会做其他的事情，与此同时房贷、家庭却成为一种长久的负担。这个人生出口虽然很让人叹息，也没人愿意选择，但它确实存在，并且很多人可能一不小心就走到了它的面前。</p>
<p>本书更主要的目的真的不是让人成为辉煌伟大的人物，我也不认为任何一本书有这样的能力。本书最主要的目的就是希望能尽可能帮助初入行者不要走到这条道路上来，毕竟一旦走到这条道路上来，人生就过于凄惨了。</p>
<h3 id="提前退场，向代码说再见"><a href="#提前退场，向代码说再见" class="headerlink" title="提前退场，向代码说再见"></a>提前退场，向代码说再见</h3><p>对于喜欢闲聊的人，有时候会在闲聊中发现些让人吃惊的事情。很久以前一个房地产中介在听说我在软件公司工作后，告诉我：我也曾经是做软件的。我很惊讶地问他，怎么就不做了，却跑来做房产中介，这不是自废武功么。他回答我：做程序员太累，没前途。</p>
<p>在那之后，接下来这些年里，身边断断续续总会有人退出程序员这个行业。有的去销售电子产品，有的去做公务员，去做纯黑盒的测试诸如此类。2013年最吸引大家眼球的退场事件是新浪架构师徐佳在奋斗数年后，告别 PHP，告别互联网开始卖水果。</p>
<p>据说徐佳先生因此而焕发了青春，但我个人并不看好这类选择，也不认为这是一种正确的选择。提前退场大多时候是对之前选择的一种否定，从人生整体收益的角度看，大致上是亏了，至少亏掉了做程序员那几年的时间。</p>
<p>这类事情一旦上升到人生价值的层次上，那就没有是非，只有个人选择，所以本书中不从这个视角考虑问题，而主要从功利且现实的角度来考察这类事情。</p>
<p>虽然退场大多时候从投资收益的角度看并不怎么好，往往是无奈下的选择，但这确实也是程序员群体的一个人生出口——“悄悄地我走了，正如我悄悄地来；我挥一挥衣袖，不带走一片云彩。”</p>
<h2 id="哪个是你的人生出口"><a href="#哪个是你的人生出口" class="headerlink" title="哪个是你的人生出口"></a>哪个是你的人生出口</h2><p>上一篇里主要写了几个可能的人生出口，接下来讲这些出口依赖于什么，这篇有点过渡性质，嫌烦可以不看。</p>
<p>对于一个程序员，大致的结局多是上述五种中的一个。其中转管理的程序员和成就高手的程序员算是稳中有升。创业者算是生死未卜。维持原状的老程序员则是失意的。他的选择权会被收得越来越窄，在工作层面，他需要和毕业生竞争，在家庭支出方面他所要承担的比别人一点不少。人生总是这样，向你索取的一端往往是确定的，而你所能获得的却往往是不确定的，人就夹在这个中间，如果无法给自己撑开足够大的空间，那就会很难受。</p>
<p>初入职场的程序员看到这里，最为关心的几乎一定是：这么多出口，我的未来可以是其中哪个？</p>
<p>很不幸这并非是一个可以立刻给出答案的简单问题，为了回答这个问题不只要考虑哪个是适合自己的出口，也要考虑如何走到这个出口面前，并避免那些代表失意的。</p>
<p>为了回答上述问题，需要对未来做点预测，而为了对未来做点预测，那么需要为人生建立一个大致的模型，接下来把个人的努力等作为输入，这样输出端会因此而有各种相应的变化。但这个模型就像被藏起来的密码，需要费点心思才能找得到——这也正是这本书要做的事情。</p>
<p>这时尝试以写程序的方式建立一种精确的人生模型是非常困难的。一旦试图这样做很容易进入一个误区，即期望为人生建立一个真理式的公式。</p>
<p>比如：如果你努力，那么你一定成功。如果你有责任感，你一定成功。如果你人品好，你一定成功。如果你读书，那么一定成功。如果你注意细节，那么你一定成功。如果你时间管理做好，你一定成功。……</p>
<p>上边的这些逻辑并非凭空想象，而是很多成功学书籍的基本出发点。这种种来自成功学书籍的陈词滥调很像一个拙劣的程序员把分支、选择、循环硬套在人生上的结果，虽然看着有几分道理，但实际上是不对的。在分析人生规律时，事实上很难找到类似自然科学中的、精确的绝对真理。据说某位行为科学家曾经总结过：上帝把所有容易的问题都留给了物理学家。言下之意是，社会学科的问题都大不易。</p>
<p>其根本原因在于，人生是不精确的。太多偶然因素可以影响最终的结果，而这些因素本身又大多不可量化，试想一下你应该如何量化一份时运，一场姻缘。但这并不意味着不可以对人生的方向进行大致的分解和预测，比如：如果一个人每天除了吃饭就是睡觉，那他的人生一定没有成绩，这就很容易预测。</p>
<p>这里的关键是要找到起关键作用的可控因子和权变变量。我们可以说 X 导致 Y，但这只能在 Z 所限定的条件下。而又由于权变变量太多，偶然性无法完全去除，我们也必须在结果中接受一定的模糊性。一个人可以是天才程序员，也很努力，但他跑到了一个外包的公司做简单重复的工作，那么就可能他的才能始终无人发现，人生一样可能没有闪光点。这就是人生的偶然性。</p>
<p>人生其实是条曲线，其振幅则随着时间的流逝而逐渐收窄。对婴儿而言，其未来具有无限的可能性。对耄耋老翁而言，其未来则唯一而确定。而一个人最终振幅的高度则同时取决于：机缘、天分和努力。家世，时代种种皆可归为机缘。智商、情商、体质种种皆可归为天分。机缘和天分皆是命数，无从左右的起。也即是说，一个人持有的，可以打破既定命数的砝码也只是努力而已。从人生长短的角度来看，上帝是公平的，每个人可用时间大致相同。</p>
<p>不同的则是努力的效能。</p>
<p>努力本身并不只是简单的付出，还牵涉到方向的选择，形势的顺应，环境的驾驭诸如此类。考虑了这些的努力更容易在收入、职位等有形收获上看见结果，忽视这些的则更可能辛苦却颗粒无收。这就是在下一章中将会展开的生存定律。</p>
<h2 id="交换是职场里一切的根本"><a href="#交换是职场里一切的根本" class="headerlink" title="交换是职场里一切的根本"></a>交换是职场里一切的根本</h2><p>支撑职场的基本规则是交换，交换的两端分别是你可创造的价值与你的职场位置（包含收入）。交换就像任督二脉间的通道一样，越是通畅，人生也就越顺风顺水；堵得越死，人也就越寸步难行。</p>
<p>这点要刻在脑子里，一旦要忘记了，就赶紧打自己两个耳光。忘了这点的人一旦被炒，就会很委屈地发 “不要拿公司当家” 这类感慨。</p>
<p>那什么是交换？</p>
<p>在一般人眼里，交换就是你有个东西我要，我有个东西你要，大家互通有无这样一个过程。但在学者眼里，事情却要更复杂一点。何新先生在《反主流经济学》中，对交换进行了深度剖析，他说：</p>
<blockquote>
<ul>
<li><p><strong>社会交换成立之第一前提，就是人类之有欲求与需要，而靠自身不能满足。</strong></p>
<p>因此，事物是否具有使用价值，决定于其能否满足人类之某种欲求与需要。所以，事物之内在属性形成其使用价值。</p>
</li>
<li><p><strong>私有制，占有，占有权利，是社会交换得以发生之第二前提。</strong></p>
<p>人有需求之物，而先为他人已据有者，若欲取之，只有二途：或强取（掠夺、战争、索要），或巧取——后者即交换。</p>
</li>
<li><p><strong>随机之交换，导致对交换品的偶然随机定价，故成交之价格有极大随意性。</strong></p>
<p>而常态之交换，则必然趋向理性之定价，即均衡定价。买卖双方经协商而接受的均衡定价之尺度，其依据乃参照商品所内涵之真实价值。</p>
</li>
</ul>
<p>故：</p>
<ol>
<li>商品确有真实价值存在。</li>
<li>真实价值乃是一种无形的、形而上的虚拟实体。（马克思说：价值是一种社会关系的反映。）</li>
</ol>
<p>因此，商品价值之评估有三重性：</p>
<ol>
<li>使用价值</li>
<li>内涵价值</li>
<li>外化的实际交换价值</li>
</ol>
<p>交换价格是内涵价值的外化表现。内涵价值与价格之不同，在于内涵价值是内在的、非外现的。</p>
<p><strong>物品买卖成交之交换量，谓之价格或市场价格。</strong></p>
<p>价格具主观性，是商品内涵固有之价值之外化。内涵价值能否得到实现，取决于需求者之购买评估。内涵价值得到市场实现，意味着商品转换为货币。</p>
<p>但是，价值在市场中之二重化，价格对价值之背离，造成等价交换规律之破坏。等价交换意味着等价价值品之交换，并非意味同等价格品之交换。同等价格对同等价格之交换，未必是等价交换。因市场价格之形成，受市场之需求度影响，而非单纯决定于价值之同等性。</p>
</blockquote>
<p>上面这段文字说的是经济，所以很多人会看的云里雾里，但其中对交换的解析入木三分，只要我们还承认工作本身也是一种个人和法人间的交换，那么就逃不出这些约束——虽然有杀鸡用牛刀之嫌疑。</p>
<p>尽管上面的解释已经非常清楚，但为了让其更加的通俗易懂，这里附加一点说明：交换本身起源于互有所需，比如某一公司开发打印机驱动程序，那么就需要了解页面描述语言(PDL)、操作系统打印子系统技能的程序员。</p>
<p>交换本身的基本原则是等价交换，但这种原则往往会被市场需求度等因素破坏。比如：TTS 可能很难搞，一个人学习了数十年，本应获得较高的市场价格，但很不幸，如果搞这个的人碰巧很多，或者应用还不广，这时候交换价格也可能很低。想想同样是在科大讯飞，工作实质没什么太大变化，但在移动互联网兴起前和兴起后交换的价格会不会有很大差异。</p>
<p>破坏这一原则的因素还有很多，比如说垄断。如果一个人掌握的技术只有一家公司用，那么这个公司具有破坏等价交换原则的权利。反过来讲，如果某项技术只有某个人掌握，那么这个人具有破坏等价交换的权利。</p>
<p>工资可以表示为一种成交价格，这一价格具有一定的随意性，具体表现为同样工作内容，不同公司，不同时间点，收入差异可能非常巨大。比如：同等技术能力下，表现力好的程序员可能更容易获得较好的薪资。但总体市场行情却在一定范围内趋向于稳定，比如毕业生的起薪大致在10K/月以下，Google、Facebook 这些公司的平均薪资相差也不大。</p>
<p>这也就意味着，影响最终交换价格（即工资收入的）的主要是两个因素：内含价值和市场因素（稀缺性等）。</p>
<p>在程序员与公司进行交换的过程中，其中最为基础的一点是你要有维护自身权利的能力，即程序员自身要有选择权，在只能被选择时，事情会趋向于另一个极端：必须不停的让步，放弃各种可争得的权利，最直接的表现是收入上没有议价能力。</p>
<p>很少有公司会主动宣传工作首先是一种交换，但这一事实本身却应该没什么太多的争议。但细想下来这个基础支撑点也只能是交换，恰如食物、水与生命间的关联。对外，企业有所产出，与客户交换获取利润；对内，则是员工有所产出，与企业交换获取工资等等。这是经济形态所决定的，在这一前提下，裁员与跳槽都是一种必然出现的现象，反倒是雇佣终身制是反其道而行。</p>
<p>认清交换是第一支撑之后，我们就可以推导出职场生存定律。</p>
<h2 id="定律的概要"><a href="#定律的概要" class="headerlink" title="定律的概要"></a>定律的概要</h2><p>如果我们承认交换是职场里一切的根本，那么就可以基于交换的特征推导出生存定律的纲要。</p>
<p>假设说一个人的技能所带来的价值是 S，实现程度是 A，那么 S x A 即为一个人可以为公司创造的可见价值，也即是可以从公司交换到的最大价值。</p>
<p>其中技能 S 是指一个人所能做的事，即自身的价值，可以是编程语言、设计知识也可以是管理知识等等。实现程度 A 则是指各种技能被周围的人认知的程度。</p>
<p>这好像有点绕，但实际上一个人的实际能力水平和被认可的能力水平往往存在偏差，极端的情形就是一个人确实很优秀，程序也确实写的很好，但周围的人都认为他不行，并只分配他做周边性的工作，这个情形下这个人的价值实现程度很低，创造的价值也很低。</p>
<p>这就是我想说的生存定律总纲，并不复杂，也不抽象。下面我们来进一步做点分析。</p>
<p>如果收入水平为 I，那么当 S x A &gt; I 时一个人是有选择权的也是安全的，否则一个人对于公司而言是负资产（至少是被认为是负资产），潜在的有被剔除的风险。一旦一个人在多家公司里都处于这样一种情形下时，这个人的选择权会越来收的越窄（只有公司可以选择个人，个人却没可能选择公司），人生也就会越来越被动。</p>
<p>当然无论技能 S 和实现程度 A 都很难清楚量化只能做定性分析，但确实有几个因素会使实现程度 A 急速膨大。这几个因素可以概括为：自身价值表达力，自身价值的稀缺性，公司的特质和未来。</p>
<p>就日常的感受来看，这往往是程序员这个群体不太关注的地方。作为结果很多人的真实价值可能并没有得到体现，或者说被低估了。</p>
<h3 id="自身价值的表达力"><a href="#自身价值的表达力" class="headerlink" title="自身价值的表达力"></a>自身价值的表达力</h3><p>简单来讲，一个人可以有屠龙的本事，但如果所有周围的人都认为你只能杀鸡，那么现实中，你的能力就是杀鸡而不是屠龙。</p>
<p>一个人的真正自我和别人眼里的你往往是有差距的。这种差距可能来源于不熟悉，也可能来源于误解等，但确实是一个不能忽视的因素。特别是对于毕业生或者刚刚开始工作这类还处在被评判位置上的人。</p>
<p>假如一个人身处任人唯亲的环境之中，那么表达力的作用会被无限放大，这时候个人价值的作用反倒会缩小。比较良好的情形是身处公平竞争的环境中，这时候表达力的作用会有相对清晰的边界。但由于每个人对公平都有属于自己的定义，所谓的公平竞争也只是相对的公平，表达力的作用并不会减少为 0。</p>
<h3 id="自身价值的稀缺性"><a href="#自身价值的稀缺性" class="headerlink" title="自身价值的稀缺性"></a>自身价值的稀缺性</h3><p>假如开发某一产品时，必须某项技术，而这一技术只有某人才掌握，这时这个人的价值会被高估。这时起作用的影响因素可以称之为稀缺性。稀缺性存在与否即取决于自身高度，也取决于大势，而对于后者而言，个人改变余地很小，大多时候只能顺应。</p>
<p>比如说：在 IT 行业刚开始的时候，产业本身急速膨胀，但程序员的人数却相对较少，这就导致10年前程序员的起点工资反倒很高。而10年之后，由于介入门槛一再拉低，大批人员涌入程序员队伍，起点的工资反倒下滑。这种行业的时间特征主要是稀缺性所造成的，反倒是很难讲10年前的程序员更加努力，水平更高，而今天的程序员就不努力，水平变差了。</p>
<h3 id="公司的特质和未来"><a href="#公司的特质和未来" class="headerlink" title="公司的特质和未来"></a>公司的特质和未来</h3><p>最后一个影响实现程度 A 的关键因素是公司自身的特性。公司更像是一个平台，往往对平台上的人所能达到的平均高度有所影响。假设两个人同样是很优秀的程序员，一个进了 Google 这样的公司，另一个进了一家外包公司，他们两个加入公司后都表现非常优秀，公司也对其非常认可，但从收入、技术高度等来看，这两个人却会有所差异，时间越长差异可能越大。这种差异并非努力所造成的，而是由于公司在生产链条上所处的位置不同而导致的。</p>
<h2 id="程序员生存定律——细论影响人生成绩的四个要素"><a href="#程序员生存定律——细论影响人生成绩的四个要素" class="headerlink" title="程序员生存定律——细论影响人生成绩的四个要素"></a>程序员生存定律——细论影响人生成绩的四个要素</h2><h3 id="定律要素之一：自身价值"><a href="#定律要素之一：自身价值" class="headerlink" title="定律要素之一：自身价值"></a>定律要素之一：自身价值</h3><p>在金庸先生构建的武侠世界里，最犀利的杀伐武功应该是《独孤九剑》，但学会了独孤九剑却失了内功的令狐冲一样会被一堆无赖按到地上揍个鼻青脸肿。待到学会了吸星大法，内力大进，那就再没这回事了。</p>
<p>根据打铁还要自身硬的道理，修炼确实应该先从内功开始，但不是说招式就不必要了，这很辨证。至于究竟那个更重要这样的问题不在具体的时空背景下是没有答案的。</p>
<p>从最终表现来看，一个人的价值（或者说内功）可以体现在几乎无限多的地方，如：编程语言、分析设计、沟通、管理、估算、流程改善等等。但如果为各种技能稍做一点分类后就会发现，人创造价值的基本途径只有两个：一个是完全依赖于自身的技能，另一个则是假于他人之手。</p>
<p>后者也许不太容易理解，这里举一个简单的例子：假设张三和李四的技术能力都非常的优秀，但两者性格不合，一旦在一起工作就非常容易各自固守己见，寸步不让，每天争吵不断。这个时候王二出现了，王二的技术能力并不优秀，但比较擅长协调各个人的意见，有王二在，张三和李四就可以配合的比较好。在这种情形下，王二创造了价值，虽然很大程度上这种创造依赖于A和B。</p>
<p>具体来讲，编码、设计、测试、估算、需求分析等更类似于直接通过自身的技能创造价值，而管理、流程改善等则类似于后者。专注于设计、编码、测试等实现工作的人在现实中往往被定义为程序员，而专注于管理、流程改善等方面的人在现实里则往往被定义为管理者。</p>
<p>从可创造价值大小的角度看，一般情形下两者似乎都没有一种准确限度：伟大的政治家和伟大的科学家可以同样的伟大。但从现实来看，至少是在国内，很多时候人们更倾向于认为管理类职位拥有更高的价值。现实中很多公司中确实如此，但这并不总是对的。</p>
<p>似乎可以在某一条线上把公司安放在不同的位置上，越过某条界限之后，直接做事的人所创生的价值才可能超过管理人员。这反过来要求岗位的技术附加值要比较高。想象下在制造类企业中，从收入的角度看，生产线上的工人的收入总是会偏低。同理，在软件公司中，越是技术含量低的开发工作，这点体现的越为明显。而一旦到了顶级软件公司中故事就可能会不一样了。</p>
<p>在《微软的秘密》这本书中有这样一段描述：</p>
<blockquote>
<p>我们中有些人对开发人员怀有极度的不满，那简直就是嫉妒。达瑞尔•希文斯是 Windows NT 的主要开发人员之一，他有9辆保时捷，我当然也希望能够拥有9辆保时捷。但我怨恨达瑞尔么？当然不。他绝对受之无愧，他真的棒极了。如果用我的支票来给他开工资，我也愿意。不过从长远来看，过一两年你肯定就能得到应得的报酬。如果由于某些原因，我们引入了达瑞尔，并付给他足够买9辆保时捷的薪水，而他一旦干得不够好，就不会在这里工作很久…… 但这些开发人员都是精心挑选出来的人才…… 唯一的不利之处在于，总有一部分人感到开发人员才是 “主角”，但这正是这一行业的本质。</p>
</blockquote>
<p>持上述看法的人是 Windows NT 的高级产品经理理查德•巴斯，从描述来看，这个管理者的收入是要低于被管理的技术人员的。</p>
<p>促成这一结果的三个关键词是：微软、Windows NT、主要开发人员。微软抓住天时雄霸 PC 的操作系统市场，而在操作系统中 Windows NT 正是核心，在前两者基础上达瑞尔•希文斯又是主要的开发人员。为使技术人员的收入超过管理人员的，这三个因素恐怕是缺一不可。这在以销售为核心的公司里很难复制，但在以产品为核心的公司里却始终存在着可能性。</p>
<p>单以方向自身而言，很难单纯讲那条是金光大道，而那条是华容道。关键点首先在于要避免选择自身内部蕴含矛盾，比如你想做技术却选了不以技术为核心支撑的公司，选了管理，却在纯研发环境里。其次在于无论那条路上都要努力走到专业和高端。</p>
<p>而不管技术还是管理，影响增值整个过程的因素都比较多：知识体系上的认知、方向的选择、博与专的平衡、知识的可流动性等都要分别进行考察。对这些点的考察将在后面逐渐展开。</p>
<h3 id="定律要素之二：自身价值上的表达力"><a href="#定律要素之二：自身价值上的表达力" class="headerlink" title="定律要素之二：自身价值上的表达力"></a>定律要素之二：自身价值上的表达力</h3><p>很多人咋一看这个标题，也许会有疑问：假如说是一个很牛很牛的大侠，那还需要表达力么？</p>
<p>实际情形是，如果大侠总是猫在山洞里隐居，那么有没有表达力其实一点都不关键，但现在关键的是江湖需要表达力，所以大侠一入江湖，就变的需要表达力了。</p>
<p>一说到表达力，很多人就会想到沟通和说话，但其实说话远不是表达力的核心。敏于事讷于言的人很多，难道他们就没有表达力了么？显然不是的。一个人的过往、行止、习惯、性格等都是表达力的一部分。</p>
<p>我们先来看一个简单的例子。</p>
<p>2012的 CSDN 上有一篇翻译的文章，叫 “编程的技能和做员工的技能——那个更重要？” 这篇文章里描述了两个极端的例子：</p>
<blockquote>
<p>Rodrigo 毕业于麻省理工，他在业余时间开发编译器。他是 Haskell 语言的核心代码捐助者，他开发了很多非常有名的 Python 程序库。他写出的代码都是非常健壮的代码，可读性好，能够优雅的处理各种程序上的临界计算场景。然而，他通常是拖延几天才回复邮件，你很少见他会接听电话，他看起来并不真正理解按时完成任务的重要性，他按自己的方式做事，你不可能弄清楚他究竟是怎么想的，只感觉他脑子里都是一些漫无边际的想法。</p>
<p>Gabriella 并不是一个非常优秀的程序员，她写的程序看起来显然很业余。15到20行就能完成的程序她写了30行。她的程序里有 bug，这让 QA 部门在上面花费了不少时间，她没有真正理解写出的代码应该具有好的性能的道理——“能用就行啦！”。然而，她很热情——她收到邮件几分钟内必给予回复，她从不漏接一个电话，她善于沟通，她能把复杂的技术问题清楚的讲给客户听，她从没有逾期完不成任务，她不断的寻求反馈来改进自己的工作，她是一个很随和的人，同事喜欢跟她说话。</p>
</blockquote>
<p>这两个极端的例子很有意思，但如果我们真的二选一的去判断那个更重要，就会失去领会职场中一个本质问题的机会。</p>
<p>文中所描述的做员工的技巧事实上很像拱猪游戏里面的梅花10（变压器），他并非与所谓的编程技能相对立，而是普遍存在于每一个程序员的身上，任何一个程序员必然同时具备这两方面的能力：编程技能与做员工的技能，而做员工的技能则像一个变压器，最终放大或缩小你的真实能力。这就是表达力的功效，而做员工的技巧正是表达力的一部分。</p>
<p>那表达力为什么会有价值？</p>
<p>我们都知道管中窥豹是不好的，但很不幸即使是在最为公正理智的组织里，大多数人仍然是被管中窥豹的。企业的组织结构基本上呈现为金字塔形状，而位置越往上，权柄越大，也即是说位置在下面的人，其评判权利掌握在其上司手中。</p>
<p>而当上位者对下位者进行认知时，上位者印象中的某个人和真实的某个人往往会有差异。而好的组织和不好的组织的一个区别则是这种偏差究竟是主观造成的，还是客观现实而无法避免，而绝不是这种区别是否存在。</p>
<p>这种差异得以存在的客观原因有很多，比如：</p>
<ul>
<li><strong>信息丢失</strong>——层级一旦产生，信息往往需要中转，总经理要想看到某个人，往往要通过几个层级，这个过程中无疑的信息会被丢失。</li>
<li><strong>信息量过大</strong>——一个人能处理的信息是有限的。比如一个Manager负责一个20个人的团队，那么由于待处理的信息过多，就就很可能在是推卸责任还是陈述困难上产生误判。</li>
<li><strong>语言</strong>——即使是信息没丢失，不同的人对同样的信息理解也可能不一致。比如说V手势在英国就意味着滚开而不是胜利。</li>
</ul>
<p>这类因素最终导致认知上的偏差成为一种无法规避的客观现实，是一种必须去适应而无法彻底改变的东西。像组织行为学这类学科中会把这个问题单独作为一个研究项目：印象管理（impression management)，首因效应等探讨的都是这个事情。</p>
<p>这并不难理解，通过自我推销、赞扬别人、适当的从众、搞好人际关系这类印象管理的手段来管理个人表现面无疑的会让自己产生溢价，提升自己在别人眼中的价值。</p>
<p>毕竟在组织里，别人眼中的你才有现实意义，即使它和真实的你有所差异。从长期的视角来看，影响自身价值表达的几个主要因素是：资历、自身性格特征、借势的程度以及权术的运用等。这几点将在后面进行展开说明。</p>
<p>最后需要做一点区别的是改善表达力与恶意专营。</p>
<p>两者间本质上并无差别，有差别的是程度。从适用场景来看，在任人唯亲的环境里曲意逢迎是一种生存必备技能，但即使在最公平的组织里也需要改善自己的表达力。</p>
<p>年轻的程序员往往会仇恨上面所说的这点，并用充满负面情绪的词汇去形容这类技能比如：拍马屁，无耻。但其实不是，从人生效能的角度看，忽视这点是危险的，除非你在自身价值上已经达到了众人瞩目的地步，比如：简历上就一句话，我创造了 Python。</p>
<p>最后看一个欠缺表达力的历史故事：<strong>弹铗而歌</strong></p>
<blockquote>
<p>《战国策》和《史记》里都讲述了这样一个故事：</p>
<p>冯谖因为太穷而无法生活，就申请成为孟尝君的门客，但当孟尝君问他有什么本事时，冯谖却回答说自己没什么本事。</p>
<p>结果孟尝君虽然吸纳了他，但冯谖却被安排为最下等的门客。</p>
<p>孟尝君的门客有三个等级：一等门客出门有车坐，二等门客有鱼吃，三等门客只能吃粗劣的饭菜。</p>
<p>冯谖并不很满意，就弹自己的剑而做歌，说：长剑啊，我们回去吧！没有鱼吃。</p>
<p>下人把这事儿告诉了孟尝君，孟尝君还是很大度，说：那就给他鱼吃。</p>
<p>过一阵，冯谖又开始弹自己的剑而做歌，说：长剑啊，我们回去吧！出门没车坐。</p>
<p>左右的人取笑他之后，又把这消息告诉了孟尝君，孟尝君又很大度，说：给他车座。</p>
<p>接下来，冯谖继续弹，还是这个调子，说：长剑啊，我们回去吧！没法养家。</p>
<p>这时候大家已经很厌恶他了，但孟尝君还是问了他的困难，并派人给把他母亲也养了起来。</p>
<p>接下来冯谖连续做了几件很体现自己远见卓识的事情。</p>
<p>第一件是当他申请替孟尝君到自己领地上收债的时候，他把债条都给烧了。理由很简单，孟尝君家里啥都不缺，就缺人心归附。这一举措，在孟尝君被罢黜时，给孟尝君提供了东山再起的缓冲。</p>
<p>第二件是他去忽悠魏王，说齐国强盛都是因为孟尝君，现在他被罢黜了，如果能为魏国效力，那么魏国富国强兵指日可待。魏王听了后，就派使臣携重礼，三次延请孟尝君到魏国为相。齐王一看，这可不得了，孟尝君确实是人才，要不然魏国怎么会这么劳师动众来请他。孟尝君因此而得以恢复相位。</p>
<p>第三件是孟尝君恢复相位后，感叹说：以前那堆门客，我一落难就都跑了，现在我恢复了相位，他们有什么脸面来见我，谁要让我见到了，我一定呸他一脸。冯谖当即跪倒进行劝谏，说：富贵多士，贫贱寡友是自然规律，希望孟尝君能够遇客如故，潜台词是：你要这么干了，树敌不说，那还能有可用之人。孟尝君又听取了他的建议。</p>
<p>也就是说孟尝君很辉煌的一生和这个没事谈剑要东西的冯谖是分不开的。</p>
</blockquote>
<p>也许有的程序员会感觉冯谖这样不挺好么，但在现代冯谖的做事方法实际上是取死之道，几乎百分百会被现存规则轰成灰灰。</p>
<p>从后来行事来看，冯谖无疑是有才华的，但他得以体现才华的机会完全依赖于时势而非是自己争取来的。</p>
<p>他所做的所有事情都是在看不到回报的时候多索取：要鱼、要车、要养家、从孟尝君的角度看，这些可能连长线投资都算不上。因为在他要东西这个时间点，这个人本身有没有价值则完全没人知道——等价于无价值。在古代还有孟尝君，但在现代企业里，这么做落在周围人的眼里就是眼高手低，几乎一定会被开除掉。指望沧海横流方显英雄本色是不太行的，万一一辈子沧海也不横流呢。</p>
<p>但偏偏冯谖和很多程序员的行事风格还真的有点类似，很多程序员擅长做事但不擅长表达，再加上很多时候程序员收入不低，所以人生境地没准就真和冯谖早时有点类似。</p>
<h3 id="定律要素之三：自身价值的稀缺性"><a href="#定律要素之三：自身价值的稀缺性" class="headerlink" title="定律要素之三：自身价值的稀缺性"></a>定律要素之三：自身价值的稀缺性</h3><p>现实里，体现稀缺性的故事也很多。</p>
<p>在东北曾经发生过一场非常惨烈的战争，这场战争之所以惨烈，倒不是因为战斗，反倒是因为其中所使用的围困战术。当一城居民都处于饥饿状态时，馒头和黄金的比价就不断下跌，故老相传，即使还没到最后阶段，一个馒头已经可以换一个金戒指了。与之相对比，在今天假设一个黄金戒指是4克，那么其价值大概在1500元左右，大致等价于3000个馒头。</p>
<p>抛开人文关怀不论，这背后其实体现的是稀缺性对价格的巨大影响。</p>
<p>我们常说物以稀为贵，但其实在以交换为支撑的职场中人亦如此。某种技能的稀缺程度往往构成一种大的环境，进而使这个环境中的所有人产生溢价/折价。</p>
<p>有的程序员往往对如何用某个程序不太感兴趣，而认为把程序开发出来更体现价值。所以很多人在了解到 SAP 顾问这类职位的收入远高于一般程序员时，往往会感到震惊。单纯从技术难度看，成为编程高手似乎总是会比成为 SAP 顾问更花时间。这件事情找不到数据支撑，暂时还只是一种判断，但现实确实可能是你花了更多的时间，学了更难的技术，收入上却比某些做着看着相对简单工作的人低。</p>
<p>这大多时候是稀缺性所掀起的波澜。许多很让人纠结的问题与此有关，比如：为什么 Java 语言的程序员就比 C# 语言的程序员收入高？</p>
<p>稀缺性本身取决于需求与供给，这样获得稀缺性就有两个主要的手段：</p>
<ul>
<li>一是站在需求相对恒定，供给比较稀少的位置上；</li>
<li>一是加入需求急速膨胀，而供给有限的场景下。</li>
</ul>
<p>前者很好理解，爱因斯坦总是稀缺且有价值的。这主要是因为社会总是需要优秀的科学家，而达到爱因斯坦的高度又总是非常艰难。而后者则需要更多的一点说明。</p>
<p>如果在90年代加入程序员这个行业的话，那天生就会处于比较稀缺的位置，因为那个时候这个行业在国内刚刚兴起，需求极大，但程序员本身非常稀少。而随着教育机构开足马力，加大供给，再加上普通软件开发介入壁垒较低，在10年之后，单从量上看恐怕程序员已经处在供大于求的情势之下了。在我印象之中，2001年211学校软件开发行业的毕业生的薪资水平基本达到税后4000元/月，而这一水平即使不考虑通货膨胀，直到今天也没有彻底恢复。</p>
<p>虽然没有权威机构进行具体测算，但在这10年里程序员增加10倍（比如：从60万增加到600万），那是毫不稀奇。因此可以讲在10年前，程序员是普遍稀缺的，而在10年后，这种情形就只在特定领域里了。</p>
<p>稀缺性的客观状态是一种大势，作为个人基本上不可能改变，只能做选择以对应将来。所以其背后主要隐藏的是在特定时间点做出恰当判断的问题。</p>
<p>我的一个同学曾经和我感叹，如果2001年毕业加入某家国内知名通信设备厂商，从收益的角度看，恐怕比读研要好的多。这样的例子可以提醒我们，稀缺性是有时效的。</p>
<p>这点会在后面章节里进一步展开。</p>
<p><strong>稀缺性与选择权</strong></p>
<blockquote>
<p>在前言中曾经简略提到如果非要选一个指标来描述一个人的成功的话，选择权可能远比其他的指标更有用。当一个人买房子的时候，可以在多种房型中选择的人往往就比只能选择偏远小区的人更成功。</p>
<p>不考虑理想和自我实现这些与人生价值相关的角度的话，人生争的往往也就是选择权。自我增值、表达力的增强、稀缺性的营造骨子里都是在扩大一个人的选择权，让一个人可以有能力去选择企业而不总是被选择。而选择合适的公司则讲的是不要浪费自己好不容易争取来的选择权，并为下一步的选择权打下更好的基础。</p>
<p>选择权的争取远比想的残酷，当一个很聪明的人在很好的大学里因为挂科而无法准时毕业时，他的选择权将大幅缩水，很可能必须退回到三线城市谋生；当一个技术很有天分的毕业生错位的进入了一家体力密集型企业时，他的选择权也将大幅缩水，5年后他可能一点竞争力也没有。</p>
</blockquote>
<h3 id="定律要素之四：身处公司的特质和未来"><a href="#定律要素之四：身处公司的特质和未来" class="headerlink" title="定律要素之四：身处公司的特质和未来"></a>定律要素之四：身处公司的特质和未来</h3><p>当令狐冲以华山派大弟子的身份来到林平之的外公家时，虽然衣衫褴褛，神情萎靡可大家也不敢瞧不起他，给了40两银子做见面礼不算，喝酒还有主家关键人物相陪。一旦这些人发现令狐冲在华山派里不太受待见时，虽然令狐冲还是那个令狐冲，挑衅就来了。这体现的是帮派的力量。</p>
<p>在程序员的世界里帮派一样有力量，不过这时候帮派都不叫帮派，而改名叫公司了。 </p>
<p>两个不熟悉的程序员一见面往往会互报家门，一听是微软、Google、阿里、腾讯等大公司出来的心里先高看三分；一听是个完全陌生的公司，倒不一定低看，但高看却是不可能的了。而公司作为一种平台，其力量则远不止体现在虚名上。</p>
<p>我认识的程序员中有这样一个人：</p>
<blockquote>
<p>他喜欢钻研程序，不喜欢和人说话，做事特别认真，并细致耐心，你如果有一个任务，交到他手里那可以放一百八十个心了。当然，勤劳肯干的同时，他也有一些不知道算是优点还是缺点的特征，比如：并不是很有野心，不善表达，并不会主动去改变身边什么。</p>
<p>他所从事的行业偏向于驱动程序，供需相对比较稳定，稀缺性上并不会有很大变化。</p>
<p>他加入第一家公司后，在那里工作了4年多，但即使表现比较好，公司却处在下滑期，这导致他的年收入始终突不破10万。</p>
<p>虽然在换工作上他的惰性比较强，可最后迫于无奈终于他还是动了。换工作之后，工作内容并没有太大变更，但职位和收入提升总算踏上了正轨，2年内的涨幅比过去4年还多。</p>
</blockquote>
<p>对于上述这个程序员，他工作内容和个人价值本身并没有太大的改变，但收入本身却起了比较大的变化。 </p>
<p>这里面的根本原因是因为公司提供的平台高度不同。对个人而言，公司是一个平台。平台如果天生高一点，那么一个人的起点也就会高一点。法律面前公司是平等的，但在实际上公司和公司间的差别可能比人与猴子的差别还要大。富士康和苹果都是公司，还都和 iPhone 有关，但即使只是看公开报道，我们也知道这两个公司内的生态一定差别巨大。富士康必须极度关注成本节约，而苹果则需要更多的创新能力。</p>
<p>如果要给公司进行归类，那么不同视角会得出不同的结果：</p>
<ul>
<li>如果把生产链条比作食物链，那么可以区分不同公司在食物链上的不同位置。</li>
<li>如果从公司的存在历史来看，则可以把公司分类为新创立的公司，成长中的公司，成熟的公司和衰落中的公司。</li>
<li>如果从公司的文化特征来看，则可以把公司分为相对公平的公司和不公平的公司。</li>
<li>如果从地域来看，则可以把公司分为大都市里的公司和发达二级城市的公司以及其它的公司。</li>
</ul>
<p>这类分类有助于我们认识公司的特质，并进行更为理智的选择，当然你要有选择权才行。</p>
<p>这点会在后面章节里进一步展开。</p>
<p><strong>组织是利益分配的基本单位</strong></p>
<blockquote>
<p>单只把一群人圈在一起并不足以形成组织，一群人有类似的价值观，有特定的行为规则，有共同的努力目标，那才能够形成组织。组织往往表现为一种个人之外的约束，所以很多人并不喜欢它。但确实是有组织才有力量，个人在组织面前力量往往非常渺小，这进一步导致组织是利益分配的单位。</p>
<p>那为什么说有组织才有力量？</p>
<p>这起源于人类的两个个基本特质：</p>
<ul>
<li>一是精神差异无限大，但肉体的差异则相对有限；</li>
<li>一是欲望的无边界特质。</li>
</ul>
<p>第一个基本特质内含着一种矛盾，即是一个精神强大的人其事实可以驱动的力量远大于其自身可以拥有的。这时候在第二个基本特质的驱动下，人们就必须结合起来才能达成自己的目标。结合之后，在统一意志之下，组织中的个人才能互补，形成远超个体的力量。虽然组织内部耗散往往非常严重，但相对于个人往往已是类似超人的存在。霍布斯论文中曾经把国家描画为一个有无数人组成的持剑巨人，这是非常形象的。</p>
<p>那为什么组织是利益分配的单位？</p>
<p>想想一个人去和微软，Google，美国、日本对抗是什么结果。这些大型组织虽然可能决策缓慢、行动迟缓，但远不是个人所能对抗和竞争的。而利益格局必然与参与利益分配的个人和组织的强弱有着关联。作为结果，不管喜欢不喜欢，组织是利益分配的基本单位，在这之后，才是组织中的个人如何进行利益分配。在分配 iPhone 所带来的利润时，首先是苹果和富士康间的利润分配，接下来才是苹果内部和富士康内部。</p>
</blockquote>
<h2 id="程序员生存定律——细论软件这个行当的根本特征"><a href="#程序员生存定律——细论软件这个行当的根本特征" class="headerlink" title="程序员生存定律——细论软件这个行当的根本特征"></a>程序员生存定律——细论软件这个行当的根本特征</h2><p>规律是必须顺应而不能改变的，但除此之外现实中还有一些事实也是无法改变的，这两者都很像程序中的常量，想提高人生的高度则需要同时驾驭这两者，而不能试图为两者赋值。下面我们就一起来看一下，软件世界中只能顺应，而不能试图改变的特质有那些。</p>
<h3 id="技术更迭偏快"><a href="#技术更迭偏快" class="headerlink" title="技术更迭偏快"></a>技术更迭偏快</h3><p>在学校里，动力机械类专业往往会学习一门叫工程热力学的课程，如果耐心翻阅就会发现虽然封皮换了，但这门课程现在的教科书和五几年的教科书其实差别不大，热力学第一定律还是那个热力学第一定律。与之相对应《C# 高级编程》这本书在2005年还是第三版，但到2011年已经出到了第七版，页数则从1027页增加到了1473页。</p>
<p>这看着是一个很小的不同，但实际上已经折射出了软件行业的一个根本特质：技术更迭、增加速度较快。</p>
<p>技术更迭较快说的是这样一种现象：今天有价值的，明天可能会贬值为0。</p>
<p>在软件行业里，你所依赖的某一平台或语言很容易产生更迭。单以 Windows 平台而论，十几年前很多人只有 Win32 API 好用，但一个人如果只停留在 Win32 API 里，是不太能适应今天的软件开发的——虽然没有官方统计，但感受上在今天 Web 开发、手机终端开发明显比 Windows 开发要火热。</p>
<p>这也许源自于这样一种现实，很多传统行业的技能直接依赖于某种自然规律，如：热力学、流体力学、材料力学等等。这些东西自身只会深化或细化，比如从牛顿定律到相对论，但很少会有颠覆性变化。但软件开发所需的东西（API 等）往往依赖于某一个公司或组织，比如微软、苹果等，进而是一种人造系统。一旦社会基本需求发生变化，这些公司或组织就必需不断地抛弃并更新自己的系统，比如：GDI –&gt; GDI+ –&gt; WPF。</p>
<p>同时，一旦公司因为某种原因倒闭，这一公司所支撑的技术也会变得淹没无闻。</p>
<p>1995年前后开始从事这个行业的人很多都会知道 Delphi，但我估计2005后加入这个行业的人就会对这个东西感觉陌生了。我们很难去深究原因，但至少现象上来看，Delphi 这样的开发平台随着 Borland 一起远去了。当然，与之一起远去的还有 Delphi 世界里的很多牛人。</p>
<p>极端来讲，如果 Windows 彻底打输了当前移动终端这场战争，那么靠 Windows 吃饭的人（包括研究 Native API 的和研究 .net framework 的）无疑的都有贬值的风险。</p>
<p>可以打一个比方来使这种差异更形象一点：</p>
<p>好比说两个不同的人，一个在传统行业一个在软件行业，两个人都很勤奋，不停的往自己脚下垫东西，努力使自己达到更高的位置。传统行业中的人比较自然的会越垫越高，而软件行业中的人则会垫到一定时候，突然间某几块砖就会消失了。</p>
<p>这倒并不意味着软件行业中并非没有具有较长生命价值的东西，但这些东西往往集中在一些特定的领域里，牵涉的从业人员比较少因此不太具有代表性。</p>
<p>具有长久价值的东西里面最典型的东西是通用数据结构和算法，今天的排序算法在10年后必然同样具有价值，但专门从事算法优化改良的毕竟是少数。可以讲大部分人群还是处在技术更迭的大潮之中。此外，图形算法、分析设计方法等也具有稳定且长久的价值。<strong>形象来讲似乎越抽象、越偏向于研究的东西其价值越长久，而越具体、越立刻可用的东西其时效性就越强。</strong> </p>
<p>这一基本特质的影响非常深远，甚至引出了学习可能会产生较大负效应这类比较特别的问题，这点将在后续内容中陆续有所陈述。</p>
<p>为了让大家对技术更迭有一个更直观的印象，我们来看一下袁峰先生所著的《Windows 图形编程》的目录，并看一下这本书里哪些东西在过去的10年里被更迭掉了，而哪些没有？目录有点长，但为了能把事情说清楚，我还是把它整个贴出来：</p>
<blockquote>
<ul>
<li>第1章 基本技术和知识</li>
<li>第2章 Windows 图形系统体系结构</li>
<li>第3章 GDI／DirectDraw 内部数据结构</li>
<li>第4章 Windows 图形系统窥视</li>
<li>第5章 图形设备抽象</li>
<li>第6章 坐标空间和变换 </li>
<li>第7章 像素</li>
<li>第8章 直线和曲线</li>
<li>第9章 区域 </li>
<li>第10章 位图基础</li>
<li>第11章 高级位图图形学</li>
<li>第12章 用 Windows 位图进行图像处理</li>
<li>第13章 调色板 </li>
<li>第14章 字体</li>
<li>第15章 文本</li>
<li>第16章 元文件</li>
<li>第17章 打印</li>
<li>第18章 DirectDraw 和 Direct3D 立即模式 </li>
</ul>
</blockquote>
<p>如果你仔细观察，你会发现其中第一章，第四章牵涉的是一些基础知识，比如 Windows 基本结构、如何 Hook API 等，因此虽然部分内容有点过时，主体上仍然是有现实意义的。</p>
<p>第十章、第十一章、第十二章主要和位图格式相关，而位图格式变化不大，所以这几章的主体部分仍然是有现实意义的。</p>
<p>第十四章主要讲的是字体，而 Truetype 字体即使在今天也是字体的主流，因此也还是有现实意义的。</p>
<p>其他的章节则因为主要是和 GDI 相关联大致上是过时了（不意味着完全没用），也就是说18个章节里只有6个章节还有较大的现实意义。</p>
<p>这本书在国内的出版时间是2002年，到2012年正好是间隔10年，10年时间淘汰了某一类技术差不多80%的内容。不知道还有那个行业会有这种淘汰率。</p>
<p>如果任何人以为书里被淘汰的那80%的内容容易学，那就错了，在当年即使是有 Windows 基础编程知识的人（知道线程、消息机制等）把这部分知识搞通至少也需要1年（工作后）。</p>
<h3 id="介入门槛偏低"><a href="#介入门槛偏低" class="headerlink" title="介入门槛偏低"></a>介入门槛偏低</h3><p>某一次喝酒的时候和几个朋友闲聊，谈到了自己的专业：</p>
<blockquote>
<p>有的说我是学物理的，和核能有关系。</p>
<p>有的说我是学涡轮机的，这是主要动力机械，发电厂常用。</p>
<p>有的说我是学变压器的，负责把电送出去。</p>
</blockquote>
<p>听了之后，其中一人大笑，说：你们几个拼起来就是一个发电站，纯属打入软件队伍的杂牌。</p>
<p>虽然看不到具体数字，但就日常感受来看软件行业中来自其他专业的人似乎确实偏多。这反过来就不成立，你很少听说学软件的跑去做数学了。</p>
<p>这背后隐含的是这样一个事实：软件行业介入的门槛相对比较低。虽然做到高处，很难讲软件就好做，机械就难做，但从介入壁垒来看，确实是软件行业偏低。</p>
<p>如果去做动力机械，那么要学习工程热力学、传热学、材料力学这样的课程，但如果要做软件开发，那么学好一门编程语言以及对应的 IDE 已经可以开始工作了。</p>
<p>当然，后劲不足可能会把不思进取的软件开发人员限制在某个范围内，比如说只能做应用级的开发，最终让他们等待淘汰。</p>
<p>软件的这个特质，也导致了软件开发人员所特有的一些问题，比如：如果自身没有突破，那么很容易就会被海量的后来者赶上。这点的影响也将在后续章节里陆续提到。</p>
<p>那门槛可以低到什么程度？</p>
<p>以著名的北大青鸟为例，其公开数据是累计培养了50万 IT 人才，均摊到10年里，这么一家培训机构每年就可以提供大概5万人。当然这其中不都是程序员，但从北大青鸟的角色来看，其中的主体部分是程序员。而国内的培训机构则远不止北大青鸟一家。这是量的视角。</p>
<p>如果你再细心去关注北大青鸟公开出来的故事，你就会发现，高考落榜者、酒店保安、流水线工人都在介入这个行业。这里并没有一点歧视任何人出身的意思，而只是想说，这个行业的介入门槛相对比较低。</p>
<p>而同时我们也很难讲，只有做编译器的、文件系统、MapReduce 的才是程序员。也许有的人做的工作更难，而有的人做的工作则相对容易，但不管怎么样，大家确实是属于同一个行业，都叫程序员。</p>
<h3 id="软件和软件差别可以很大"><a href="#软件和软件差别可以很大" class="headerlink" title="软件和软件差别可以很大"></a>软件和软件差别可以很大</h3><p>我在《完美软件开发：方法与逻辑》这本书里曾经写过一段有点抽象的话：</p>
<blockquote>
<p>从特质上来看，既然软件是固化的思维，那就必然同时具备思维以及思维所承载之物之特质。</p>
<ul>
<li>思维的特质是指：思维的澄清通常是渐进的，思维自身是不可度量的，思维的主体一定是人，思维通常由概念和逻辑组成，思维的无边界化（灵活易变）这样的特质。这部分特质是共通部分，同时属于所有软件。 </li>
<li>思维承载之物之特质是指：当思维的对象是数学的时候，思维本身也就具备了数学的特质；当思维的对象是商业逻辑的时候，思维自身也就具备了商业逻辑的特质。</li>
</ul>
<p>既然思维自身的特质是复合的，那么作为固化思维的软件，其特质必然也是复合的：</p>
<p>既有属于所有软件的共同特质，也有特属于某类软件，甚至同其他类软件完全相反的独有特质。</p>
</blockquote>
<p>上述文字主要想强调的是虽然都是软件但软件 A 和软件 B 可以有相似部分，但差异可能更大。一个人可能研究 OCR 算法好几年最终只写几百行代码，完全不需要用什么面相对象和设计模式，但在信息管理系统中一个人一两天内可能就需要写几百行代码。这两者虽然有巨大差异，但实际上都会被称作软件。</p>
<p>这种特质导致了软件开发所需要的知识日益的分化，最终结果就是不同软件领域差别很大。想用唯一的知识体系覆盖所有的软件类别变的非常困难。</p>
<p>对方法论而言，基于这一点最关键的一个引申结论是：任何一种方法论不只要陈述自己的方法，还要陈述自己方法的适用边界。</p>
<p>对个人发展而言，那就意味着要关注知识的可流动性这类问题。可流动性是说，你在 A 类软件中可能达到了一定高度，但如果穿越到了 B 类软件的领域中，可能江湖地位会一下子下降很多。</p>
<p>通俗的说法是：男怕入错行，不同的软件种类也勉强可以被看做是不同的行业，虽然他们都用一个词：软件来概括。</p>
<p>这一特质也带来很多非常典型的问题，比如：学习必须聚焦。这点的影响也将在后续内容里陆续提到。</p>
<p>那多内部分野可以多到什么程度？</p>
<p>要想对多内部分野这一点有个直观感觉，最直接的方法是去看招聘广告。</p>
<ul>
<li>有以语言来区分职位的：.net 开发工程师、C++ 软件开发工程师、PHP 开发工程师、Java 工程师等。</li>
<li>有以平台来区分职位的：Android 开发工程师、iPhone 游戏软件开发工程师等。</li>
<li>有以领域来区分职位的：GIS 数据工程师、金融项目软件工程师、电子商务软件工程师等等。</li>
<li>接下来还会有各种交叉，比如：Java 软件工程师（金融）等。</li>
</ul>
<p>这里面未必没有重叠，但大致上来讲很难在彼此间穿越，年头越多穿越越难。</p>
<p>如果觉得这个分类不是很系统，那么可以参照软件工程中对软件的分类，再乘上平台和编程语言就可以切分出大致不同的领域：</p>
<ul>
<li>航空电子</li>
<li>应用系统</li>
<li>命令与控制</li>
<li>嵌入式系统</li>
<li>微代码</li>
<li>Web 应用</li>
<li>科学研究和工程研究</li>
<li>实时系统</li>
<li>驱动程序</li>
<li>电信软件</li>
<li>… …</li>
</ul>
<p>最极端的情形是也不用分什么软件种类，一个项目的整个生命周期就能耗尽一个人一生中大部分的能量，想尝试的可以维护个电信或银行里的大系统试试。</p>
<h2 id="程序员生存定律——管理向左，技术向右"><a href="#程序员生存定律——管理向左，技术向右" class="headerlink" title="程序员生存定律——管理向左，技术向右"></a>程序员生存定律——管理向左，技术向右</h2><p>一个程序员在考虑增值时无法回避的一个根本问题是到底是做技术还是做管理。当然也有些职位会介于两者之间比如架构师，但我们暂时不去做细分，而是用简单的二分法。</p>
<p>这种基本方向上的选择对后续很多细节上的取舍有关键影响，所以在考虑其他之前，最好先回答一下这个问题。这就和修炼时要选择少林、武当、华山还是魔教一样，一旦选择，基本上是回不了头。</p>
<p>当然选择管理不意味着不需要掌握编程技能，毕竟当下大多公司还是信奉 “宰相拔于州郡，将军起于行伍” 的。但当技术达到一定水平后，管理还是技术这种方向性的选择将对下一步做什么有比较大的影响。在考虑那个方向前，则要先弄清楚管理和技术的关键差异。</p>
<h3 id="技术与管理的关键差异"><a href="#技术与管理的关键差异" class="headerlink" title="技术与管理的关键差异"></a>技术与管理的关键差异</h3><p>到了30几岁后，转为管理人员的程序员经常会调侃自己的技术能力：当年解决这种有时出、有时不出的Bug时，我常常在其前后都加几条调试输出，这招很管用很可能立刻就把它搞定了。结果多年后维护这代码的人困惑了，还来问我，这句为啥不能去掉，看着也没用啊，其实我也不知道，只能说运气和人品在程序里也是很有影响力的。</p>
<p>这是管理人员的一种真实写照，大家都知道，一旦走上管理岗位，那就和ppt越走越近，和代码越走越远了。虽然他仍然要跟踪最新技术的动向，但他很可能已经无法深究很多技术细节了。</p>
<p>据说微软这样的公司推崇一个人要想走上管理岗位，那要先把自己的代码用远少于别人的时间写好，省下来的时间才用来做管理工作。这很好，也不是完全不可能，但大多时候很难，需要很强大的天分，大多数人是做不到的。</p>
<p><strong>主要原因是管理和技术所要处理的问题有根本上的差异。</strong></p>
<p>管理者往往需要处理许多与人相关的事情，这导致要处理的事情是碎片化的，如果坚持编码，那么每天的打断往往会大幅降低写代码的效能，大家都知道编码是需要专注的。</p>
<p>管理工作总是需要面对大量的琐碎工作的，比如：老板对项目不满要赶紧去说明，免得发酵成大问题；人力缺了要赶紧协调，一是要能要到人，关键还得能要到合适的人；工具缺了，要赶紧购买；兄弟们有情绪了，要赶紧安抚；PPQA了有抱怨了，要赶紧改正。如果工作进一步泛化，还要涉及到预算、评估、职业路径规划等。</p>
<p>我们很难让这些事情按照自己的节奏发生，如果管理人员做编程，最终这些都会变成一种对编程工作的随机性干扰。所以一般来讲很难把它们很好的与编码结合在一起。想象一下，一个管理人员负责某个项目中影响关键路径的某个模块，接下来上面所列的意外发生了，那这个管理者怎么办？</p>
<p>唱歌的时候常说到 Key 或者调门这个词。同样是《花心》这首歌，周华健的用的 Key 和原本的冲绳民谣《花》的就不同，这导致两首歌听起来差别就很大，完全不一个感觉。也许可以说管理也是一种技术，但管理和设计编码这种技术的 Key 不一样。做技术需要面对的是程序，程序是讲道理的，Stack Overflow 时它一定会崩溃；而做管理时需要考虑技术因素，但更需要面对的是各种人，人则只在一定程度上讲道理，所以管理不只是一种技术。因此基本上可以认为管理和技术时完全不同的两个方向。</p>
<p>如果大家细心观察周围，就会发现，做技术（编码）的往往可以转去做管理，但做管理的再转回做技术（编码）就难了。这意味着技术背景对做管理往是很有帮助的，而管理背景对做技术则几乎没用。</p>
<p>了解到这种差异后，要想做出自己的那份选择，还需要考虑三件事情：</p>
<ul>
<li>一是既定环境下技术路径究竟有多长，也就是说做技术有前途么；</li>
<li>一是个人的性格适不适合做管理工作；</li>
<li>一是做管理工作可能会有什么负面影响。</li>
</ul>
<p>这三点将在接下来的三个小节中分别进行探讨。</p>
<h3 id="技术路径长短对前途的影响"><a href="#技术路径长短对前途的影响" class="headerlink" title="技术路径长短对前途的影响"></a>技术路径长短对前途的影响</h3><p>程序员往往自嘲自己是 “码农”，不知道这词是那里出来的，但听起来 “码农” 和 “农民工” 已经有点近似了。而 “农民工” 往往是收入低，工作时间长的代名词。这就折射出了一个很尴尬的事实，在很多公司中，单纯从收入的角度来看管理职位是要高于纯粹的技术岗位的。</p>
<p>这并非是一个绝对规则，前文就曾经提到早在20年前，微软的超级程序员就可以拥有比管理人员更高的工资，可以拥有多辆保时捷。但在技术路径短的公司里，管理人员收入偏高这事情却具有必然性。</p>
<p><strong>当一个公司的核心技术并没有创生多大价值，而是需要靠人力规模、商业模式等来支撑业务的时候，那么我们可以称之为技术路径短的公司。</strong>想象一下，如果一家公司专门承接本地化工作，那么也许也会需要程序员编制某些工具，但对程序员而言技术路径无疑是短的。</p>
<p>如果暂时把眼光从程序的世界移开，那么事情就可以看得更清楚。</p>
<p>在盖楼的时候，只要达到基本的质量，一个人每天砌200块砖，固然比砌100块要好的多，但相对于大楼而言，多砌100块砖，所多带来的价值有限。再进一步由于砌每块砖的价值是固定的，同时一个人每天所能砌的砖也是有限度的，这就会导致砌砖工人，不管多么努力，其收入水平必然会被限制到某一个较低的水平，只要他的工作还只是砌砖。这种限度是由这一工作的内涵所决定的，倒不是谁遭到了歧视。</p>
<p>再类比到软件行业里，单纯的在既定接口下实现已定义的业务逻辑就是技术路径比较短的工作，是体力密集型的；而分析业务逻辑，控制整体架构或者去研究 TTS 的算法则是智力密集型的，技术路径较长。</p>
<p>在选择方向时关键要避免的是选择了技术方向，但身处的现实中技术方向却路径较短，或者喜欢管理但跑到了纯粹技术流的公司里，这种选择其内部所蕴含的矛盾会给当事人的人生造成极大的困扰。比如说开发小型信息管理系统时，其所需要的技术含量并不高，公司的主营如果是这个，单纯的做技术可能会直接影响收入。这是一个需要考虑的很现实的事情。</p>
<h3 id="什么样的程序员适合转管理"><a href="#什么样的程序员适合转管理" class="headerlink" title="什么样的程序员适合转管理"></a>什么样的程序员适合转管理</h3><p>《黑客帝国》的动画片中有一集叫做 “Matriculated”，在这一集里有个机器人被逮住后，人类通过各种场景让他相信自己是个人类，计划看似成功了，但实际却不是。这个动画的启示意义在于，先天带来的很多东西，比如性格等实在很难改变，更多时候选择顺应自己的天性比选择对抗更加明智。</p>
<p>从先天性格来看，确实有的人天生适合做管理多一点，有的人天生适合做技术多一点。比如说：</p>
<ul>
<li>有的程序员天生有点被动，不喜欢主动学习很多东西，不喜欢与人沟通，但对工作所直接关联的领域研究较深，做事情兢兢业业，一丝不苟。</li>
<li>有的程序员非常聪明，理解东西很快，但不愿意搭理别人，总感觉别人水平比较差，脾气也比较暴躁。</li>
<li>有的程序员精力充沛，对技术狂热，但并不仅局限于技术本身，有大局观，有理想，能坚持。</li>
</ul>
<p>单从性格而论前两者都不太适合做管理工作的，一旦做了管理工作，接触各种性格的人，容易造成人际关系紧张，反倒对自己形成一定的压力，极端情形下就会精神失常。</p>
<p>单纯的因为收入而选择管理工作，并不总是明智的，你可能无法适应，反倒导致事业出现起伏——不要低估这点的影响，现实中非常多的人因为这种错位而使人生走入低谷，甚至生病。</p>
<p>在大五模型里用五个因素来考察人格特质：</p>
<ul>
<li><p><strong>外倾性（extroversion）</strong></p>
<p>外倾者者倾向于喜欢群居，善于社交和自我决断。内倾者则比较内向，胆小害羞，安静少语。</p>
</li>
<li><p><strong>随和性（agreeableness）</strong></p>
<p>高随和性的人是合作的，热情的和信赖他人的，低随和性的人是冷淡的，敌对的和不受欢迎的。</p>
</li>
<li><p><strong>责任心（conscientiousness）</strong></p>
<p>高责任心的人是负责的，有条不紊的，值得信赖的，持之以恒的。低责任心的人则容易精力分散，缺乏规划性，且不可信赖。</p>
</li>
<li><p><strong>情绪稳定性（emotional stability）</strong></p>
<p>积极的情绪稳定性者倾向于平和，自信；而消极情绪稳定性者（神经质的人）倾向于紧张，焦虑，失望和缺乏安全感。</p>
</li>
<li><p><strong>经验开放性（Openness to experience）</strong></p>
<p>开放性高的人富有创造性，凡事好奇，具有艺术的敏感性；开放性低的人则保守对熟悉的事物感到舒适和满足。</p>
</li>
</ul>
<p>总的来看，外倾性和经验开放性好的人更适合走上管理岗位。</p>
<p>千万不要忽视这种错位的力量。金山的求伯君先生就直承自己不擅长做管理。他认为人的一生之中最关键的是对自己能够有所了解，不是说自己什么都能干，是万能的。在雷军走后的4年里，做 CEO 有些力不从心，快50岁的他精神压力太大，多次想退休，请雷军出山。最终求伯君先生在不到50岁的时候退出江湖，不知道是不是和这个有关。</p>
<p>当然很多人可能远走不到求伯君先生的高度，但终究类似，可以打个比方形容错位的中层管理者。上司和下属员工像两块板子，管理这门功夫没练好的话，中层管理者就被搓球了：上司说，你做的这叫什么事儿，脑子大大的坏了。下属说：你瞎答应什么，这事儿怎么做，我不干，要干你自己干，爱咋咋地。</p>
<p>管理这功夫练好了，情形就变了：<strong>上司尊重你的意见，下属把你视为旗帜。</strong>一处天堂，一处地狱，核心差别其实不大，根本还在天生的人格特质。待管理人群的特质也很有影响，但这是运气所管理的范畴。</p>
<p><strong>是不是适合做管理者的简明判断方法</strong></p>
<blockquote>
<ul>
<li>假设说团队里两个兄弟吵起来来了，你愿不愿意去调解？</li>
<li>假如有一个人脾气很坏你愿不愿意和他沟通，即使你不喜欢？</li>
<li>假如有一个人问题很多，你愿不愿意面对面批评他？</li>
<li>假如有一个人屡教不改，你愿不愿意采取直接的惩罚措施，那怕关系紧张？</li>
</ul>
<p>这个列表还可以增长。一旦做管理工作，这类需要抛开个人视角，而从组织的视角去看待问题并行动的地方很多。如果对这类问题的回答是否定的，那么最好是不要往管理的方向上走。</p>
<p>上面这几个问题，纯走技术道路的还可以作壁上观，但如果是发生在自己团队里，管理者却保持逃避的态度，那么管理者就失职了。</p>
<p>由于人的世界很复杂，所以期望坏的事情一件也不发生，那是不现实的。我个人感觉管理者面对这类事情的几率是100%，区别是遇到多少件，而不是遇不遇得到。</p>
<p>其实故事到这里还没完，如果往深了考察，就会发现，即使一个人愿意去搞定吵架中的两个人，那还有你怎么去搞定，搞不搞得定的问题。</p>
<p>捣糨糊、各打五十大板这类简单粗暴的方法往往只能有效于一时，等价于埋下定时炸弹，长线来看不是什么高明方法。但把这个展开就需要另外一本书，这里就不进行展开了。</p>
</blockquote>
<h3 id="管理工作的负效应"><a href="#管理工作的负效应" class="headerlink" title="管理工作的负效应"></a>管理工作的负效应</h3><p>从日常很多人发表的言论来看，管理工作似乎被无限美化了，很多人都认为管理工作似乎是一条彻底金光大道，但这并不完全正确。为了让事情回归本来面目，这里说一点管理方所可能带来的负效应。</p>
<p>同纯技术工作相比，管理工作（特别是中层管理）的可流动性可能会非常低，形象来讲很多公司并不会愿意请外来的中层管理者来管理已有的员工，而更愿意请技术上有专长的人来解决具体的问题。这是由管理工作的几个特质所决定的：</p>
<p>管理工作和人打交道比较多，所以对人员的特质有很强的依赖性。如果一个团队的人都非常像机器人，那么在不同公司间管理技能是完全通用的——只要有PMP，CMMI这类东西就够了。但关键问题是人员的特性是多样的，这导致管理人员和被管理人员需要较多的磨合和适应。形象点讲就是，如果无法搞定特定人群，你考5个 PMP 证书，该不管用还是不管用。</p>
<p>同时长时间在管理岗位的话，即使是做技术出身，技术能力也会退化，沟通技能、与上级的信任程度反倒会提高。而这些东西，到一家新公司后，一定会被归零，，其价值并不明显。反倒不如擅长算法，擅长某类业务的技术人员可流动性好。</p>
<p>这也就意味着，管理人员往往与公司的利益绑定的更紧。尤其是中层管理人员，达到一定年纪后（比如：40岁），很可能会失去流动的可能性，一旦所处的公司出现问题，那就可能会面临非常尴尬的局面——直接讲就是，如果你选择了管理方向，却缺乏相应的人脉，35岁之后基本不具备可流动性，换工作会很难，至少比纯技术的高端人员难。</p>
<p>这点的一个旁证是各个初创期公司的人员构成。如果你用心观察就会发现对于初创期的公司而言，它需要创始人把握方向和寻找资金，也需要工程师来完成具体事务，但不太需要中层管理人员。比如：Pinterest 曾经公开了自己的数据，在2010年是2个创始人，1个工程师；2011是3个工程师；2012年是6个工程师；2013年是40个工程师。这种情况下，只有到2013年后中层管理人员才有存在价值，而一般情形而言这种情况并不会社招，而是会从现有人员中选拔。这最终导致纯管理人员的可流动性并没有想的那么好。</p>
<p>当然什么事情都有例外，如果你是成功运作几个产品的产品经理，那么也可不在流动性上受到限制。因为那些产品就是你最好的名片，他们使你在江湖里有了一席之地。</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>考虑上述三个方面，大多时候可以判明自己是应该做技术还是做管理。比如说：如果一个人日常很容易和人产生冲突，但脑子很好使，也能静下心来钻研技术。这种情形大致上应该努力找一家技术路径长的公司做技术，否则可能会人际关系紧张。而与此相反，一个人如果技术能做的还不错，也愿意与人沟通，同时已经身处一家技术路径不是很长的公司，并不太能够换工作，那么就很可能需要尽早转向管理方向。</p>
<p>总之，别太为了点钱过度难为自己，走不远的话，最终还是吃亏。</p>
<h2 id="程序员生存定律——编程的起点与可能的失足"><a href="#程序员生存定律——编程的起点与可能的失足" class="headerlink" title="程序员生存定律——编程的起点与可能的失足"></a>程序员生存定律——编程的起点与可能的失足</h2><p>从大环境来看，想不写程序直接去做管理工作是很难的。大多时候都要在开发上做出一定成绩，接下来才有选择技术还是管理的机会。因此即使是希望选择管理方向，技术上的基本功还是需要的。所以下面这节的内容和选择做管理方向还是技术方向关联不大，只要是想做程序员，大致上都有必要一读。</p>
<h3 id="从那里开始编程生涯"><a href="#从那里开始编程生涯" class="headerlink" title="从那里开始编程生涯"></a>从那里开始编程生涯</h3><p>大学里经常会开设软件工程专业，在这门课程里面大多时候会讲解需求工程、开发模型、设计方法、项目管理等。但很多同学会感觉这课程让人摸不着头脑，认真学也学不到什么。从这种普遍现象可以发掘出一些本质问题。</p>
<p>这里的本质问题是指软件开发是实践性非常强的科目，因此不适合先从概念开始。这不意味着软件工程、设计思想不重要，而只是说不适合从纯粹的概念开始学习编程。 </p>
<p>在软件这个行业里，很多比较资深的人员对如何学习编程是有统一认识的：学一点，实践一点，再学一点，再实践一点。但困难的是每个人对每次迭代的 “一点” 究竟是多少认知不同，对 “一点” 是什么的定义也是不同。</p>
<p>我个人的观点是以3000代码行为界算第一个一点，也就是说一个人学会某个语言后小练习不算，先完成一个3000代码行左右的，没有 UI 的独立程序。为解释什么叫独立的程序，举一个具体的例子。</p>
<p>在《敏捷软件开发：原则、模式和实践》一书中有一个薪水支付的例子程序，正好是这个规模，很适合帮助达成这一目的。这个程序的基本规格说明是：</p>
<p>（下文引自《敏捷软件开发：原则，模式与实践》）</p>
<ul>
<li>有些雇员是钟点工。会按照他们雇员记录中每小时报酬字段的值对他们进行支付。他们每天会提交工作时间卡，其中记录了日期及工作小时数。如果他们每天工作超过8小时，那么超过的部分会按照正常报酬的1.5.倍进行支付。每周五对他们进行支付。</li>
<li>有些雇员完全以月薪进行支付。每个月的最后一个工作日对他们进行支付。在他们的雇员记录中有一个月薪字段。</li>
<li>同时对于一些带薪（Salaried）雇员，会根据销售情况，支付给他们一定数量的酬金。他们会提交销售凭条其中记录了销售的日期和数量。在他们的雇员记录中有一个酬金字段。每隔一周的周五对他们进行支付。</li>
<li>雇员可以选择支付方式。可以选择把支付支票邮寄到他们指定的邮政地址；也可以把支票保存在出纳人员那里随时支取；或者要求将薪水直接存入他们指定的银行账户。</li>
<li>一些雇员会加入协会。在他们的雇员记录中有一个每周应付款项字段。这些应付款必须要从他们的薪水中扣除。协会有时也会针对单个协会成员征收服务费用。协会每周会提交这些服务费用。服务费用必须要从相应雇员的下个月的薪水总额中扣除。</li>
<li>薪水支付程序每个工作日运行一次，并在当天为相应的雇员进行支付。系统会被告知雇员的支付日期。这样它会计算从雇员上次支付日期到规定的本次支付日期间应付的数额。</li>
</ul>
<p>在学完编程语言、面向对象、UML 之后可以先参照这份规格说明，什么例子程序都不看，自己完整的做一份实现，实现中要包含 UML 图和代码，接下来可以去把 Robert C.Martin 的例子程序下载回来，同自己的实现在设计上和实现细节上做详细的比较，找出哪点自己好，哪点 Robert C.Martin 的好。这样对编程语言、对面向对象、对设计原则就可以有比较踏实的一些理解。此外，这个程序的一个额外的好处是它可以完全独立于平台，只依赖于语言和标准库即可。 </p>
<p>假设说一个新手已经熟练掌握了一门语言，那么完成上述的任务估计需要2~4人周，当然有经验的人1个人周左右已经足够了。</p>
<p>在此之后，可以精读一个上点规模的（1~5万行最佳）独立性比较强的应用程序，由于已经上了规模，做到完全的与平台相隔离就有点难了，没法提供统一的例子作参考。但选择标准主要有两个，一个是尽可能和自己未来期望的方向相吻合，一个是尽可能比较独立和经典。独立的目的是方便调试，经典的目的是确保代码质量。比如：如果是 Windows 本地应用就可以考虑 Notepad++ 类的开源应用，Web 应用就可以考虑 WordPress 等。这个时间点上需要避免好高骛远，Linux 内核与 Chrome 当然很好，但它们并不适合初学者的。 </p>
<p>在精读过程中可能需要几类书籍：一是平台框架相关的（线程机制等），一类是模式相关的，一类是工具型的书（如何调试）。这个时候是要耐下心来读几本比较经典的书的。 </p>
<p>精读之后，就要再找到一个项目来实践。这里的关键是真的项目，至少要有真的用户，并且用户数目越多越好。最好是能够向知名开源项目提交代码。 </p>
<p>各种基础知识中比较例外的是计算机体系结构、数据结构和算法这类理论性比较强的东西，这种学习曲线比较陡的东西需要结合大学的课程把它学会，接下来再在实践中逐渐应用，而不能一边做事一边学习。原因是学习曲线越陡的东西越需要大块时间，毕业之后再学效率会差。 </p>
<p>总的来看，上述几个步骤，应该在大学毕业后 2~3 年内完成，最好在大学里完成，这样可能会有点优势。这些完成之后，打基础阶段可以算是基本结束。</p>
<h3 id="打牢根基-VS-速成道路"><a href="#打牢根基-VS-速成道路" class="headerlink" title="打牢根基 VS 速成道路"></a>打牢根基 VS 速成道路</h3><p>有很多不同的方法可以学会编程，比如说：一个人既可以先打牢基础，接下来再逐步学会如何进行各种开发工作；也可以不管三七二十一，先借助各种 IDE 把程序做出来再说。上一节主要介绍的是先打根基的方法，而不是速成的方法。</p>
<p>相对于打根基的方法，后一种学习方法更容易在短时间内看到效果，所以很多人都是这么入的行，比如：先从 IDE 开始，接下来再从表面往本质去学，逐步去了解控件拖放背后所隐含的东西。这不能说完全不好，但我认为这是一种失足，几乎一定会催生程序员只能吃青春饭的结果。</p>
<p>在刚开始编程的时候，如果形成对 IDE 的过度依赖，那就会导致根基浅薄，能做的事很可能被限制在某个有限的范围内。当下的大多 IDE 功能已经非常强劲，这对提高产品的生产率无疑是非常有必要的，但在学习阶段，则要尽可能避免过度依赖于 IDE，避免用各种控件来快速完成任务。</p>
<p>比如说：微软在 Visual Studio 2012 里面内置了一种名为 LightSwitch 的技术，基于这项技术，一个人可以在基本不编码的情况下，完成信息系统的开发，并支持相对比较丰富的功能（增删改查，搜索，排序等）。无疑的基于这样的工具做开发速度会快上很多，但在学习阶段过度使用这类工具，却会毁了一个人的根基。</p>
<p>想象一下，在使用 LightSwitch 的过程中一个人会学到什么？他所能学到的主要是这种工具的使用方法，既不会学到 SQL 语句，也不会学到数据库表格的设计方法，也不会学到 ASP.net 的基本架构（虽然 ASP.net 已经封装了非常多的东西）。这样一来，这个人虽然能够快速的完成某个工作，但却给自己埋下了很深的隐患——他很容易的被束缚于某个工具，并且无法应对新领域。</p>
<p>善用 IDE 集成好的功能进行快速开发不是学习阶段应该做的事情，学习阶段最根本的目的是打基础，把一门语言学精，把一种设计思想学精，把一种算法学精等等，这种基础可能不直接表现为生产力，即使把算法学精了，可能还是无法立刻写出来比较炫的程序，但这有助于面对不停变化的世界，这与单纯的达成某个目的，完成某个程序不同。这可以类比为打地基与盖楼，地基部分显然不能单独进行销售，也不能住人，但没有地基也就没有其上几十层可以高价售出的住宅，楼越高，地基也就越深。当然，只盖地基或者让五层楼和五十层楼使用一样的地基也没必要，这不用多说。</p>
<p>那具体来讲，那些东西可以被认为是编程的根基，需要在学习阶段扎实的掌握？下面将通过推荐几本书（或者说几类书）来描述一个共通于所有程序员的最小集合。 </p>
<ul>
<li><p><strong>计算机体系结构</strong></p>
<p>这一类别下最具代表性的书籍是《深入理解计算机系统》，作者是 Randal E.Bryant 和 David O’Hallaron。读这本书的目的是了解计算机到底是怎么个东西，软件到底运行在什么样的基础之上。</p>
</li>
<li><p><strong>算法和数据结构</strong></p>
<p>这一类别下最具代表性的书籍是《算法导论》，作者是 Thomas H.Cormen，Charles E.Leiserson，Ronald L.Rivest，Clifford Stein。读这本书的目的是了解软件到底可以用什么样的手段干些什么事情。软件是一种工具，可以帮助解决人类面临的许多问题，而主要手段则只有两种，一种是这本书里所介绍的算法和数据结构；另一种则是下一类别中所涉及到的分析和设计方法。它们像小刀子一样，可以把各种领域中的各种问题进行分割，并映射到程序的世界里来。</p>
</li>
<li><p><strong>设计原则和模式</strong></p>
<p>这一类别中比较有代表性的书籍是《敏捷软件开发：原则、模式与实践》，作者是 Robert C.Martin。读这本书的目的是了解数据结构和算法之外另一种对现实问题进行抽象的方法如面向对象以及进行这种抽象时所要遵守的原则。</p>
<p>这类书籍经典的还有很多比如：GoF 的《设计模式》，而之所以选择上述这本是因为这本书里提供一些比较完整的例子，更适合初学者一些。</p>
</li>
<li><p><strong>软件工程</strong></p>
<p>这一类别中最具代表性的书籍是《代码大全》，作者是 Steve McConnell。读这本书的目的是建立对软件开发的全局视图。知道一个软件从无到有所要经历的一系列过程。</p>
<p>软工的书还有很多，比如很有名的《人月神话》，但《人月神话》类书其实对很多人是不适合的，对初学者就更不适合。</p>
</li>
</ul>
<p>上面四本书是一个最小集合，针对不同场景需要进行不同的增加，比如可能需要进一步了解某种框架的机制，那就需要读《XX 技术内幕》这类书。但即使是读这几本书也不适合只读书而不动手，最好是穿插在上一节中提到的实践中来读，否则的话对后两本的理解会有所欠缺。</p>
<p>如果想走厚积薄发这条路的上面几本书是一定要预先读通的。阅读过程中，如果发现有些细节问题彻底无法理解，那就要在实践过程中进一步琢磨，找到自己的答案。读这类书时，有一件事情一定要有心理准备：虽然这些书读通并不容易，很花时间，但想读了这些书后立刻写出来一个能卖点钱的工具是不太可能的，这真和大楼的地基一样，没什么立竿见影的效果。如果想尽快达成后者这样的目的，那很可能就要走速成的道路，去读些介绍 IDE 怎么用，某个框架怎么用的书，比如：《C# 高级编程》这类。</p>
<p>为避免误解，有一点需要额外进行一点说明。前面强调的避免过度 IDE 依赖主要是指不要用封装良好的模块来取代对基础知识的学习，不是说不需要建立自己的工具箱。查找工具、调试工具（进程线程查看等）、二进制数据查看工具、正则表达式工具、持续集成工具、文档生成工具（JavaDoc)、正则表达式工具等对一个程序员的生产力是非常有帮助的，应该在学习过程中逐个掌握。软件开发工作发展到现在，任何一个类别下面都有相当多的比较成熟好用工具了，关键是选定一个把它用熟。</p>
<h2 id="程序员生存定律——如何尽快变得稍微专业一点"><a href="#程序员生存定律——如何尽快变得稍微专业一点" class="headerlink" title="程序员生存定律——如何尽快变得稍微专业一点"></a>程序员生存定律——如何尽快变得稍微专业一点</h2><h3 id="掌握读代码的方法和技巧"><a href="#掌握读代码的方法和技巧" class="headerlink" title="掌握读代码的方法和技巧"></a>掌握读代码的方法和技巧</h3><p>不管最终想成为什么，刚入行之后，一定离不开的是读代码和写代码。这里将介绍一些读代码的方法和技巧。</p>
<p>读代码这事，先要分是精读还是泛读。从学习的目的来看，一定要精读一定量的经典代码。而精读是指每行都读懂，不看代码脑子里就能勾画出程序的基本结构。</p>
<p>要想判断是不是精读了有个很形象的判断方法：精读代码时会满脑子都是代码，放不下，甚至睡觉前脑子里也是代码。达到这个程度就是精读了，否则应该就还不是。精读代码要控制规模（初始阶段一万行以下即可）并用心，不太需要什么特别的方法。</p>
<p>这节里主要关注的是如何泛读较大规模代码，不是精读。</p>
<p>现存的很多系统往往很大，几十万行的可能也只算普通。这时候一旦加入了这样一个项目，应该如何去读代码？ </p>
<p>读规模较大的程序前，先得把规格说明书大致弄清楚，而不能上来就读。比如：对于应用程序，要先大致整清楚它的使用方法、使用场景；对于库则要弄清楚它对外接口的定义。 </p>
<p>如果其中有涉及到某些专门的领域知识，比如：流程、财会等，那也最好预先有些认识。这类东西彻底的从代码里反推回来是不太可能的。如果弄不清这类东西，很多时候对读程序是个很大的障碍。你不知道代码做的是什么，却去读对应的程序，那就只能看到调用来调用去，最终会云里雾里。</p>
<p>接下来从大往小，从面到点来看。</p>
<p>一旦开始接触代码，那要先弄清楚代码的基本静态结构。如：包构成、类构成等。这里几乎一定会涉及一个层次问题。一下子把层次探的太深，就容易盯在细节上出不来。把层次拔得太高，又容易流于表面。从数目上看，一个层次最好不要超过10个关键概念，超过了真记不住。在静态结构这步，要弄清楚每个部分的核心职责，可以是很简单的概括，最好能记住。 </p>
<p>接下来选择出最常用的典型场景，然后在典型场景下考察上面的静态结构是如何发挥作用的。典型场景下用到的接口往往就是关键的接口，要弄清楚他们的定义和作用。也要整清楚典型场景下数据流的变迁。</p>
<p>通过这两个步骤等价于脑子里可以生成一份比较高层次的静态和动态结构图，很像 UML 里的 Sequence 图和类图。牵涉到数据库的时候，一般需要对相应的数据规格有所了解。</p>
<p>接下来要关注进程、线程的结构。比如：都是什么时候开始、什么时候结束的，在上述典型场景下都负责干什么。</p>
<p>上述四步（规格、静态结构、典型场景、进程线程）完成后，对程序的第一次泛读完成。检验是否达成目标的方法可以很简单，如果真的基本读懂了，这时应该能够单靠纸笔描述出程序典型场景的 Sequence 图。</p>
<p>做第一次泛读的时候，要抑制自己的求知欲，因为总是很想在调试器里通过 call stack 把一个功能的实现细节整清楚。至少在第一个次泛读里，可以先不要这样。</p>
<p>第一次泛读后，就要进入深掘的过程，一般来讲需要针对自己会负责的部分进行深入挖掘。这部分功能往往会隐藏在某个接口之下。</p>
<p>这时候一般来讲可以把功能型的模块优先级降低，比如：XML 解析的模块等。其他部分可以认为是需要把之前所说的四个步骤再重复一下。但这时候要关注细节和调用堆栈了。</p>
<p>不管是在那个读代码的层次，有两个基本技巧总是需要的，一个是要掌握具体程序里内嵌的 Log 机制，要能看 Log，必要时可能还得加 Log；一个是基本调试方法。同时一个合适的代码阅读工具会对提升代码阅读速度有所帮助，比如：一款名叫 SourceInsight 的小工具中可以把窗口分拆为几个部分，点击任何方法的时候，这个方法的实现以及 Calls Graph 都可以被自动展开，这样的小功能无疑的对阅读代码是有帮助的。</p>
<h3 id="从哪门编程语言开始学习好些？"><a href="#从哪门编程语言开始学习好些？" class="headerlink" title="从哪门编程语言开始学习好些？"></a>从哪门编程语言开始学习好些？</h3><p>学习编程至少要掌握一门编程语言，但从那门编程语言开始是一个极其容易引起争议的问题。为使结论经得起推敲，这里需要做一点系统的分析。</p>
<p>纯从未来应用的角度看，结果是不确定的，在学习的时候，其实没人能够知道未来会主要使用那门语言。因为最终工作中使用那门编程语言往往取决于一些很偶然的因素，比如现有产品的开发语言，待解决问题的领域等。比如说如果命运安排你去做和 Hadoop 相关的工作，那很可能会用到 Java，如果安排你去做驱动开发，那就很可能会用到 C/C++。</p>
<p>如果上述这点成立，并且被预设为前提，那么在学习阶段应该学什么就可以有个相对确定的答案：学习阶段学习语言的目的是为了掌握编程的基础概念并能更快速的学好另一门语言。显然这仍然是打基础的范畴。</p>
<p>从这个角度看，只有一门语言是必须学的，那就是C。因为不了解这门语言会造成一定视野上的限制，使基础薄弱，比如不掌握 C 语言的人，很可能无法了解《深入理解计算机系统》这样的书，进一步也就不理解什么是指针，什么 Stack，什么是 Stack Overflow，什么是写超界，做性能优化的时候可能也就想不到一些系统级的手段。Joel 在《软件随想录》里专门有一章叫 “学校只教 Java 的危险性”，其中所表达的观点与这里的观点类似。</p>
<p>作为结果，尽管很可能在工作中用不上 C 语言，在学习的时候还是要把它掌握，除非在最初阶段就已经下定决心只把技术当做敲门砖，而不想走的更远。要不然根基就过于薄弱了。</p>
<p>至于其他一些比较主流的语言比如 C++，Java，C# 等可以完全按照兴趣来进行选择，唯一关键的是不管选择那个都要累积一定代码量并把它学透。这样依此扩展到将来要用的编程语言，学习曲线往往就会很平，大致 2~3 周就可以用新的语言做一些基本的开发工作。</p>
<p>选择编程语言的另一种思路是从脚本语言入手，比如 PHP，Python，Javascript 等。这就和赵匡胤当年要下决策是先搞定弱的南唐还是先搞定强的辽国一样，是个两难的话题。从入手容易，培养兴趣的角度看，显然脚本更好些，并且脚本语言也是互联网的显学，未来用到的机会很高；但如果想多积累，厚积薄发那么就还是从 C 入手会好些。我个人的建议是如果在大学里那就先难后易好些，因为人生里不总是有这么大块的时间；但如果是后想转入这个行业，那就直接找脚本开始吧。</p>
<h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><p>写程序、读程序、学好学习曲线陡的知识、避免 IDE 依赖这些事情的根本目的都是为了打好基础。这个环节里最忌讳的是急功近利，比如：学习一堆 IDE 的操作方法、每个编程语言都掌握一点。很多人可能误以为这对找工作有帮助，所以把但凡接触过的技术都列到简历里是很常见的做法。但其实这个认识是不对的，但凡有点规模的公司招聘毕业生或者刚毕业不久的开发人员的时候都更看重他的基础和发展潜力。而基础和潜力这两样东西很难精确度量，但并不难判断，通过简单的面试既可以判断出来。<strong>只关注当下这个人能干什么的公司很可能是看不到明天的公司</strong>。</p>
<h2 id="程序员生存定律——升华成高手的可能方法"><a href="#程序员生存定律——升华成高手的可能方法" class="headerlink" title="程序员生存定律——升华成高手的可能方法"></a>程序员生存定律——升华成高手的可能方法</h2><p>一旦度过了初始阶段，做过了前面说的那些事情，那么一个人算是基本入行了，接下来的目标就非常简单，要在选定方向上成为高手。高手意味着专业，而在分工无限细化的年代里，专业则是生存、发展好最为重要的一个前提。</p>
<h3 id="高手的定义和养成关键"><a href="#高手的定义和养成关键" class="headerlink" title="高手的定义和养成关键"></a>高手的定义和养成关键</h3><p>我估计如果问100个人 “什么样的程序员是高手？”，那答案会有100多个。因为同一个人还可能给高手下不同的定义。</p>
<p>在这里我们认为，在特定领域里能搞定大部分人搞不定事情的就是高手。从这样一个定义出发，我们会发现在技术人员和销售人员眼里，高手的内涵是有很大差异的。</p>
<p>纯技术人员更多的关注性能能不能提到极致，并发能不能处理的很好，内存溢出 Bug 能不能很快搞定，类库的机理熟悉不熟悉等等。而在销售人员的眼里，则在技术外还多看了些东西，比如业务流程熟不熟悉、使用性好不好、能否迅速对应变化、能否在限定工期和预算下搞定任务等。</p>
<p>考虑到职场和产品销售有着非常紧密的关系，我们这里使用后一个视角，而非是单纯的技术视角。</p>
<p>有几类本质上很不同的人都会被视为高手，比如说：</p>
<ul>
<li>能写出很牛的病毒的。这个不举例子，但当年读过 CIH 的代码，我是被其精巧给震住了。此外也许搞加密解密的也应该放在这个类别里。</li>
<li>能把一堆 3D 图形放到 64K 的。以前专门有个比赛是干这个的，64K 大小的 EXE 能给你放10几分钟很酷的 3D 动画，第一次见绝对会很震惊。</li>
<li>能迅速调试出问题所在的。内存泄露、多线程同步这类问题往往让人纠缠很久也搞不定，但就是有人能很快的解决这类问题。</li>
<li>能仅靠几个人就架起高并发网站的。新兴 Web2.0 网站如：Flickr，甚至还可以包括 Google，在初期往往是几个人搞起来的，这些人名声不显，但绝对是高手。</li>
<li>能主导开发出很牛的产品的。这个上可以想想 Unix 和 Linux 的作者等。</li>
<li>能主持大规模软件设计的。这个往往更有商业价值，我们常说的 Martin Fowler 应该可以算在这个类别。</li>
<li>能把一种语言研究的特别牛的。想想各个编程语言的创建者，想想 C++ 的大牛们。当然创建某一门语言的也可以归到这个类别里。</li>
<li>能开辟自己方法论的。比如搞 CMMI 的 Watts S. Humphrey。</li>
<li>能写出很牛的书的。比如：Windows 平台下写了 Windows 核心编程的 Jeffry Richard。</li>
<li>能写出很牛的算法的。比如：Donald Knuth。</li>
</ul>
<p>这个表应该还可以加长很多，单以大家认可这个角度来看确实高手可以从各个方面冒出来。 </p>
<p>不管在那一方面，要想成为上面所描述的高手总是需要学习、思考、实践这些环节，这没什么可说的。但和软件相关的知识其实多如牛毛，完全不像小说里武功秘籍那么稀缺，几乎可以讲满地都是。这就使选择和集中成为难题。</p>
<p>软件的三个基本特征（技术更迭快、低介入门槛、多内部分野）就像铡刀一样，一旦选择出错，就会把个人的努力切的粉碎，一点价值也留不下来。而与此相对的，则是人的黄金学习时间其实并不多——不过是毕业后的10年左右的时间。</p>
<p>曾经有人希望自己能够从事嵌入式软件的开发，因此给自己买了 ARM 板，自己在家里花了很多时间来学习并实践相关知识，最终却因为其他的原因进入了一家做网络的公司。这个人等价于被软件的内部分野较多，而彼此间技能流动性较差这样的一个特质斩了一刀，被斩掉的倒不是 ARM 板，而是自己一年多的辛苦投入。这种情况下强调学的知识将来有用是没有太大意义的，因为还有两刀在等着：如果你三年都不做这个，你今天学到的知识可能会被更迭掉了，同时由于你年纪增长了，可能也不太适合与大批新介入这个行业的人员进行竞争。 </p>
<p>这类事情使软件行业中的成为高手这事变得复杂了。</p>
<p>为了在成为高手这条路上走的顺畅，事实上有三个关键点：</p>
<ul>
<li>一是要有一张全局性的地图，以便选好方向；</li>
<li>二是要知道都有那些坑，好绕开它，免得掉进去；</li>
<li>三是要有足够的热情和动力，能坚持走下去。</li>
</ul>
<p>下面将分别从这三个方面来说明成为高手途径和方法，而这种途径和方法会因为具体目标不同而有所微调。</p>
<h3 id="全局性的地图"><a href="#全局性的地图" class="headerlink" title="全局性的地图"></a>全局性的地图</h3><p>清代著名学者曾对知识地图的必要性做过非常精确的表述：</p>
<blockquote>
<p>凡读书最切要者，目录之学也。目录明，方可读书，不明，终是乱读。</p>
<p>——王鸣盛，《十七史商榷》</p>
</blockquote>
<p>目录即是地图。</p>
<p>对于软件开发的知识，我更愿意使用下面的的 “地图”，这不一定是最合理的，但确实对归纳各种软件开发知识有所帮助。</p>
<ul>
<li><strong>通用的领域知识</strong><ol>
<li>编程语言（C/C++，Java，C#，Python，Perl，PHP 等）</li>
<li>框架和类库（Struts，Spring，OSGi 的某个具体实现，MFC，Boost等）</li>
<li>平台（Windows API，POSIX，.Net Framework[^1]，Java API，C/C++ Runtime Library 等）。恰如 Jeffry Richter 所说，大多时候可以从内存机制、线程机制、错误处理、异常处理、组件构建、组件组合等方面来进一步考察一个平台。</li>
<li>计算机体系结构（CPU 指令，虚拟存储等）</li>
<li>数据库</li>
<li>实用技巧（调试方法，代码生成器等）</li>
<li>……</li>
</ol>
</li>
<li><strong>概念和逻辑创建和优化</strong><ol>
<li>面向对象分析和设计/结构化分析和设计</li>
<li>设计模式</li>
<li>重构</li>
<li>契约式编程</li>
<li>UML[^2]</li>
<li>……</li>
</ol>
</li>
<li><strong>专业领域知识</strong><ol>
<li>图形图像算法</li>
<li>网络协议</li>
<li>人工智能</li>
<li>数值/非数值类算法</li>
<li>财务知识</li>
<li>负载均衡</li>
<li>……</li>
</ol>
</li>
</ul>
<p>[^1]: 有的时候子类别间的界限并不是很容易界定，其中一个主要原因就是存在着像 .Net Framework 这样涵盖了过多内容的概念。<br>[^2]: 从形式上来看 UML 更近似于一种编程语言，但从其目的上来看也许归在这里是更合适的一种选择。 </p>
<p>关于软件的间接知识：</p>
<ul>
<li>需求开发和描述</li>
<li>估算<ol>
<li>估算法。比如 COCOMO、FP 等。</li>
<li>估算术。比如使用计数等原始办法。</li>
</ol>
</li>
<li>软件工程和方法论<ol>
<li>轻量型方法论。比如敏捷。</li>
<li>大方法论。比如 CMMI。</li>
<li>综合分析。比如《人月神话》、《人件》所做的工作。</li>
</ol>
</li>
</ul>
<p>随着待解决问题越来越复杂，通用的领域知识中，几种技术往往会组成一种技术 Stack，他们更需要被看做一组必须一起掌握的知识，比如：LAMP（Linux + Apache + MySQL + Python/PHP）。</p>
<p>当然上面罗列的远不是全部，这种罗列更多的是展示一种分类的方法。通过对这种分类方法的补充和完善，大多可接触到知识都可以被归入特定的类别，比如说：WinRT 可以看做一种新的平台，HTML5 则可以看做是一种语言等。</p>
<p>每个人可以根据自己的情形，参照上面的分类建立属于自己的地图，有点问题没关系，有就比没有要好很多。接下来依据这样的地图就可以选一条自己的线路，持续累积，寻求实践机会，最终就很可能会成为真正的高手。</p>
<p>而关于增值所需的动力，所要避开的陷阱，将下面陆续提到。</p>
<p><strong>增值、读书与大局观</strong></p>
<blockquote>
<p>单纯从达成某一目的而言，读书往往非是绝对必要条件。</p>
<p>秦始皇把书一把火烧了，刘邦项羽一样造反并取得胜利。但读书无疑的可以加速一个人增值的过程，记不得是谁说过：实践无疑是人类最好的老师，但只靠实践来认知世界无疑也是愚蠢的。这是非常精辟的。除此之外，要想培养大局观，那就非读书不可。</p>
<p>每个人的亲身经历，在大的时空背景中往往只是一个简单的截面，这一截面中绝不会包含可以归纳出所有真理的事实，因此只依赖于自身的实践也就必然限定了一个人的视野。 这一点随着一个人的责任范围变大往往会体现为一种制约和限制。所以培根讲：有实际经验的人虽能够处理个别性的事务，但若要综观整体，运筹全局，却唯有学识方能办到。 </p>
<p>即使从实践来看也是如此，要想培养出一种大局观，那就非读书不可。而大局观往往是成为将帅之才的必要条件。</p>
<p>具体到软件而言，有一本很有名的书对培养技术的大局观有帮助：《代码大全》。至于专业性较强的书，反倒是可以根据自己的情景比较容易的选择，这里就不提了。</p>
</blockquote>
<p>基于上面这样的一张地图，我们就可以具体的去考虑几条进阶路径。</p>
<h4 id="路径一：由程序员转架构师"><a href="#路径一：由程序员转架构师" class="headerlink" title="路径一：由程序员转架构师"></a>路径一：由程序员转架构师</h4><p>架构师是一个很火的职位名字，但你很难给它下精确的定义。</p>
<p>下面所陈述的一切是我个人的理解和体会，我无法保证它和其他人的解释完全吻合。因为架构师，乃至架构设计实在是一种非常模糊的概念，如果你用心去找，可以找到各种定义（甚至 IEEE 和 SEI 的定义也不一致），这就导致你只能参照别人，相信自己。</p>
<p>本质来讲架构设计也是设计，所以凡是做设计的都可以称自己为架构师。</p>
<p>当一个系统的规模变大的时候，设计上的决策就具有了特别的价值，并且也越来越需要专门的人来做，架构设计也就越来越像是一种特别的设计。比如说：考虑架构设计的时候，可能需要考虑选用什么样的数据库、选用那个开源框架、选用什么样的硬件平台，这些东西在小规模程序中往往是居于次要地位的。</p>
<p>假设说一个人已经掌握了一门或几门编程语言、面向对象、设计模式、能够很熟练的写出质量较高的代码，接下来他想成为架构师，这个时候他需要做什么？</p>
<p>我个人认为，这时候这个人首先要有一个 “专业”。这个专业可以是 “金融”，“财务”，“电商”，“管理” 等等。这是一种属于某一专业的领域知识，而不是编程技术。如果把需求和最终的代码，看成描述同一事物的一体两面，那么设计始终是要架起这两者间的桥梁。而架桥的时候，怎么可能只知道一端而不知道另一端。</p>
<p>接下来是深化设计所需要的各种通用领域知识（UML、面向对象、性能确保等）。这时和一般所说的设计的一个关键区别是，那就是架构设计要分心思去考虑哪些东西用别人的就好了，而哪些东西要自己开发。而一般所说的设计技术中，比较侧重自己应该怎么干（面向对象、测试驱动等）。为达成这一目的，就需要对现有技术的优劣有相对比较清晰的认识，比如要能分清楚哪些是成熟稳定的技术，哪些是处在实验阶段的技术。Pinterest 网站就曾经进行过下列这样的架构改进，在这样的改进过程中，不知道各种技术的优劣是代价很大的：</p>
<blockquote>
<p><strong>早期阶段：</strong></p>
<ul>
<li>Rackspace</li>
<li>1 small web engine</li>
<li>1 small MySQL DB</li>
</ul>
<p><strong>2011/1：</strong></p>
<ul>
<li>Amazon EC2 + S3 + CloudFront</li>
<li>1 NGinX, 4 Web Engines (for redundancy, not really for load)</li>
<li>1 MySQL DB + 1 Read Slave (in case master goes down)</li>
<li>1 Task Queue + 2 Task Processors</li>
<li>1 MongoDB (for counters)</li>
<li>2 Engineers</li>
</ul>
<p><strong>2011/9:</strong></p>
<ul>
<li>Amazon EC2 + S3 + CloudFront</li>
<li>2NGinX, 16 Web Engines + 2 API Engines</li>
<li>5 Functionally sharded MySQL DB + 9 read slaves</li>
<li>4 Cassandra Nodes</li>
<li>15 Membase Nodes (3 separate clusters)</li>
<li>8 Memcache Nodes</li>
<li>10 Redis Nodes</li>
<li>3 Task Routers + 4 Task Processors</li>
<li>4 Elastic Search Nodes</li>
<li>3 Mongo Clusters</li>
<li>3 Engineers</li>
</ul>
<p><strong>2012/1:</strong></p>
<ul>
<li>Amazon EC2 + S3 + Akamai, ELB</li>
<li>90 Web Engines + 50 API Engines</li>
<li>66 MySQL DBs (m1.xlarge) + 1 slave each</li>
<li>59 Redis Instances</li>
<li>51 Memcache Instances</li>
<li>1 Redis Task Manager + 25 Task Processors</li>
<li>Sharded Solr</li>
<li>6 Engineers</li>
</ul>
<p><strong>2012/10:</strong></p>
<ul>
<li>Amazon EC2 + S3 + Edge Cast,Akamai, Level 3</li>
<li>180 Web Engines + 240 API Engines</li>
<li>88 MySQL DBs (cc2.8xlarge) + 1 slave each</li>
<li>110 Redis Instances</li>
<li>200 Memcache Instances</li>
<li>4 Redis Task Manager + 80 Task Processors</li>
<li>Sharded Solr</li>
<li>40 Engineers (and growing)</li>
</ul>
</blockquote>
<p>摘自：<a href="http://highscalability.com/blog/2013/4/15/scaling-pinterest-from-0-to-10s-of-billions-of-page-views-a.html">http://highscalability.com/blog/2013/4/15/scaling-pinterest-from-0-to-10s-of-billions-of-page-views-a.html</a></p>
<p>这个过程比较真实，大家可以参照着想想如果自己来主导，那还欠缺什么。</p>
<p>最后一点要说的是，做架构设计已经相对于在做技术管理工作，至少要适当涉猎估算并能做出合适的任务分解，这样一旦日程紧张，则可以通过增加人手等手段来在质量、成本和进度之间进行均衡。</p>
<p>由于知识面已经扩的比较大，架构师在具体某个专业领域上的深度可能会有所欠缺，比如：在做一款电子消费产品时用到了 TTS，但架构师不一定能很好的了解 TTS 的算法——这是 CodeGuru 的领域。</p>
<p>架构师所需要达成的最终目标可以形象的描述为：产品经理考虑用户和市场建立了一个模型，那么架构师要能把这东西映射到技术的世界里来。如果是在互联网行业，那么在你的主导设计下要可以做出高并发的网站。换到其他行业也与此类似，从产品的的角度往回看，架构师要能解决和技术相关的所有问题，主导完成商业上有价值的产品或项目的开发工作。实现手段上倒并无限制，可以是购买，可以是组织人员进行开发，只要能平衡短期和长期利益，解决特定的问题即可。</p>
<h4 id="路径二：由程序员转-CodeGuru"><a href="#路径二：由程序员转-CodeGuru" class="headerlink" title="路径二：由程序员转 CodeGuru"></a>路径二：由程序员转 CodeGuru</h4><p>与架构师相对应，在某些智力密集型的程序中，也需要技能高超的程序员，这种程序员往往被称为 Guru。</p>
<p>这条路线里，程序员并不把自己擅长的领域扩的太宽，但在指定领域上会挖掘的很深。驱动、字库、图形库、算法库、OCR 等都偏向于这一领域。</p>
<p>假如说，一个程序员在掌握基本语言之后，想往这个方向发展，那么需要的技能和架构师差别很大。比如：一个人如果想往驱动方向发展，那么就需要了解 CPU 的基本结构、内核调试方式、操作系统中与相应驱动所对应的机制、硬件侧的规格、通讯协议等。</p>
<p>这时候很可能由于程序规模并不十分庞大，面向对象、设计模式这类东西没有太大发挥空间，而是需要处理的是大量或麻烦或艰深的细节。</p>
<p>2013年1月，ITeye 发布了一条信息说：Intel 面向学生免费提供 C++ 开发工具，并简单的介绍了一下是哪些工具免费向学生提供：</p>
<ul>
<li>Intel C++ Composer XE，其中包括：<ol>
<li>Intel C++ 编译器（高度优化的编译器）</li>
<li>Intel 数学核心函数库（高性能数学库）</li>
<li>Intel 线程构建模块（C++ 任务模型、最流行的 C++ 并行方法）</li>
<li>Intel 集成性能基元（多媒体基元库）</li>
</ol>
</li>
<li>Intel Advisor XE（推荐的并行开发建模方法）</li>
<li>Intel VTune Amplifier XE（非侵入性的性能分析工具）</li>
<li>Intel Inspector XE（先进的线程和内存调试工具）</li>
</ul>
<p>看到这张列表，我们可以思考下要开发这类工具需要什么样的程序员。上面这些工具的开发都属于高难度的工作，和开发大规模的 MIS 系统完全不同，如果不是某方面的专家，基本不太可能负担起相应的责任。而这类领域则正是 Guru 的天下。</p>
<h4 id="路径三：由程序员转纯管理"><a href="#路径三：由程序员转纯管理" class="headerlink" title="路径三：由程序员转纯管理"></a>路径三：由程序员转纯管理</h4><p>纯管理工作和技术管理工作可以用是否接触乃至编写代码来区分。纯管理工作往往需要把精力放在预算编制、人员职业路径、考评、度量、流程改善这些工作上。一定程度上讲，这等价于和编程工作说拜拜，当然前提是你得有编程经验，有一些通用领域知识和概念创建乃至逻辑优化的知识，否则的话和程序员没法沟通，进而给工作造成障碍。</p>
<p>从需要读的书来看，这时候可能要看过 PMBOK，《项目管理修炼之道》，《管理的实践》，《基业长青》等等。</p>
<p>但如果一个人认为想做管理要从 PMP 开始，那大概是还没太明白管理这项工作的本质。管理本身是一种借势，虽然有技术性的一面，比如要理解增值曲线这类，但这方面知识其实并没有想的那么复杂——至少没有 C++11 复杂，只要有时间正常智商的人都可以在不太长的时间内掌握。所以如果你想做管理，并使用了和学习 C++ 语言一样的方法，那基本上是偏离了方向。</p>
<p>抛开机缘这类东西不论，做好管理工作有两点很关键：</p>
<ul>
<li>一是要把技术工作做的相对比较好。这好像有点学而优则仕的意味，但大多时候人们更愿意相信 “将军起于行伍，宰相拔于州郡”，而不愿意相信单只会耍嘴皮子的人。过度务实的人容易迷失于道路，过度务虚的人则容易飘的太高而丧失根基。管理者正应该身处在这两者之间的一个平衡点。</li>
<li>二是要能够借势。要情商比较好，能把很多人组织在一起。这个时候要知道那些东西需要规则化，那些东西需要灵活把握。过度偏向规则是教条，过度偏向灵活则是人治，平衡点始终要根据具体人员的状况，工作特质这些不可改变的事情来把握。这有点微妙。但即使程序员这个群体相对简单，但并不能推翻先人后事这类规则。这不知道是不是东方特色，当你想做管理并想推进事情的时候，终究要理清人际上的关系，否则就和可能会欲速则不达。这点会在第五章进一步展开来谈。</li>
</ul>
<p>下面我们来看一个具体点的例子，这个例子出自郭致星老师的博客，是一个学员的真实疑问（文字上有修饰），X 入职后的现状如下：</p>
<blockquote>
<p>开发部现在26个人。基本组织架构是由开发组、需求组、测试组、运维部四个部门组成。需求组的人收集需求，再通过系统指派给开发组，进行开发。开发组的文档严重缺乏。</p>
<p>现在公司内有技术总监和开发部经理的岗位。眼下全公司就 X 一个项目经理，目前是跟着开发部经理，在熟悉一个核心系统，由于没有任何文档的遗留，所以现在是相当于一个开发人员在开发一些实际的功能，一边开发一边熟悉现有系统。</p>
<p>现在 X 并没有项目的实际权力，而且整个项目组也只有开发部经理，加上2个开发，再加上1个测试和 X 共5个人。其中 X 和其中一个开发都是新来的。</p>
<p>与此同时，业务部门在搞一些流程，但还没做完，没有在开发部进行实施。工作气氛比较沉闷。技术总监和开发部经理，都是技术型的人，比较偏向技术，平时工作也多偏向于具体执行。</p>
<p>在使用一个 Redmine 系统进行项目管理和 BUG 跟踪。</p>
<p>这里的系统大部分都类似于产品线制，属于需要长期开发维护的，需求源源不断的来，相应人员也就需要不停的做，没有版本制度，也没有计划和规划。</p>
<p>系统现在主要的问题是性能问题。 </p>
</blockquote>
<p>问题就是在这样的一种环境下，X 应该如何开始自己的管理工作？</p>
<p>这类问题通常并没有唯一答案，但确实有些通行的手段可供参考，最终做不做得好和个人能力乃至环境关联很紧：</p>
<ol>
<li>了解现有系统的状况，包括规格、代码规模、代码质量、代码内部结构、工作流程、问题所在等。比如说：很可能这类系统缺乏一种整体设计，是靠单纯的增加代码的量堆积出来的，代码冗余非常厉害，数据库的表也创建的比较随意。</li>
<li>了解人员。包括人员的能力水平、工作意愿状况、性格。</li>
<li>了解公司。尤其是公司的运作风格，有的公司偏人治有的公司偏于规则。短期对这类现行秩序要考虑如何顺应，而不是如何改变。</li>
<li>对当前系统的状况和人的状况有所把握后，要对愿景进行描画，比如在功能上做那些改善，对速度做如何改善，目标的高低要适度，要能获得上司和下属的支持。这时候还要能平衡短期和长期目标，既不能长时间投入没有产出，也不能有产出但进步不可见。在这一步骤里最典型的忌讳是急功近利的做超出自己影响力范围的事情。比如：目标与现有人员的能力完全不匹配或者完全不顾及对销售可能产生的影响而单纯的做系统的优化。最理想的情形是，连续达成几个目标，提升自己的影响力。</li>
<li>搞清楚团队成员和公司的的基本诉求，在取得成绩的同时尽可能双赢的扩大自己的影响力，目标是确保团队的执行力。</li>
<li>逐步导入基本流程，使项目上轨道。但流程不能成为成绩的借口。</li>
<li>接下来进一步的规划愿景，看能否取得更大的成绩，比如：挑战是否能做出真正有特色比较优异的产品。</li>
</ol>
<p>在不同类型的公司里，对应手段上会有不同。比如在规范性比较强的大公司，第4、5两步的权重就会比较低。在上述这样的场景下，PMP 这类书籍中所提到的种种技术手段诚然是必要的，但和人打交道的部分（老板、直属上司、下属）往往会对最终的结果产生更大的影响，这是管理工作与纯粹技术工作不同的地方。</p>
<h2 id="程序员生存定律——成长路上常见的坑"><a href="#程序员生存定律——成长路上常见的坑" class="headerlink" title="程序员生存定律——成长路上常见的坑"></a>程序员生存定律——成长路上常见的坑</h2><p>前面讲到了程序员成为高手需要有一张地图，借助这样一张地图，程序员可以尝试成为架构师、Guru 或者纯管理者。但这条路总是不会那么顺畅。</p>
<p>升级练功流的网文中总会给修仙的主人公设置下几大关卡，比如：金丹难成、元神难成、成了元神后还有天人五衰等等。没有这些关口，情节很难推动，所以仙侠类的网文几乎无一例外依赖于这类设定。这一传统甚至可以追溯到《西游记》和《封神演义》。</p>
<p>拿这个来对照程序员的增值道路，就会猛地发现，升级练功流也不完全是扯淡。不管走那条道路，程序员的修炼路上同样的也有三灾九难，要想成就高手，还是得一个个跨过去才行。如果一个程序员达到一定高度后再回头观望，那就会发现自己的同学、曾经的同事总是会因为这样那样的原因倒下去。这并不是一个简单的天道酬勤就可以敷衍的行当，下面就让我们来具体看看，究竟增值过程中可能遇到那些陷阱，掉到坑里又需要付出多大代价才爬的出来。 </p>
<h3 id="学习失去焦点"><a href="#学习失去焦点" class="headerlink" title="学习失去焦点"></a>学习失去焦点</h3><p>软件行业里有几个经典的题目，每过一段时间就会被翻出来 PK 一下，比如关于编程语言优劣的比较等。其中一个经典题目是软件和数学的关系。</p>
<p>从结果来看，一派人认为数学是软件的基础，而另一派人认为数学和软件没什么太大关系，除非是在某几个特定领域里。如果你用心观察过这事情，你就会发现这事情特别有意思。</p>
<p>比如说，2011年 CSDN 转了一篇叫 “数学是成就卓越开发人员的必备技能” 的文章，在文末作者说：</p>
<blockquote>
<p>那么，数学对所有事都有利么？这事情很难说，我对我现在的处境十分满意，或许你也如此，但这都和潜能有关系。如果你是协作世界的一名开发人员，你真的不需要数学。如果你乐于你的整个职业生涯是这样的：在工作时间中做企业 CRUD 应用，或在闲暇时间滑翔跳伞或极限水上滑板（或其他各种时髦的极客运动），也分配较多时间在 Spring、Hibernate、Visual Studio 或其它东西上。那些特殊的职位并没有真正限制你的潜力，你能变得极具价值，甚至可深入追求。但是如果你想为多样化的职业生涯而奋斗，想要有能力尝试几乎所有涉及代码的事，从信息检索到 Linux 内核。总之，如果你想成为一个开发人员、程序员和计算机科学家的完美组合，你必须确保你的数学技能达到标准。长话短说，如果你在数学方面有一定天赋，那在软件开发领域中所有的大门都是向你敞开的，如果没有，那你就安安心心地做 CRUD 型工作吧！</p>
</blockquote>
<p>总的来看，这个作者认为数学很关键，得学。</p>
<p>而在2012年 CSDN 又转了篇文章，叫：编程需要知道多少数学知识？在文章里作者说：</p>
<blockquote>
<p>数学和编程有一种容易让人误解的联系。许多人认为在开始学习编程之前必须对数学很在行或者数学分数很高。但一个人为了编程的话，需要学习多少数学呢？</p>
<p>实际上不需要很多。这篇文章中我会深入探讨编程中所需要的数学知识。你可能已经都知道了。</p>
<p>对于基本的编程，你需要知道下面的：</p>
<ul>
<li>加减乘除——实际上，电脑会帮你作加减乘除运算。你仅需要知道什么时候运用它们。</li>
<li>模运算——模运算是用来计算余数，它的符号通常用%百分号来表示。所以23除以7等于3，余数是2。23 mod 7 = 2。</li>
<li>判断是奇数还是偶数的模运算—如果你想知道一个数是奇数还是偶数，用它mod 2来作模运算。如果结果是0，它就是偶数。如果结果是1，就是奇数。23 mod 2等于1，所以23是奇数，24 mod 2等于0，24是偶数。</li>
<li>对一个数作百分数运算，就是用这个数来乘以一个百分数。譬如你要得到279的54%，就是用0.54*279。这就意味着为什么1.0等于100%，0.0等于0%。</li>
<li>知道负数是什么。负数乘以负数等于正数。负数乘以正数等于负数。就这么简单。</li>
<li>知道迪卡尔坐标系统。在编程中，（0,0）代表屏幕左上角，Y坐标的正轴往下。</li>
<li>知道勾股定律，因为它是用来计算笛卡尔坐标中两点之间的距离的。勾股定律 a^2^+b^2^=c^2^。(x1,y1) 和 (x2,y2) 两点之间的距离等于 ((x1–x2)^2^ + (y1–y2)^2^)。</li>
<li>知道十进制、二进制、十六进制。十进制就是我们通常用的十个数：0-9。通常认为这个十进制系统是人类发明的，因为我们有十个手指。</li>
</ul>
</blockquote>
<p>总的来看，这个作者认为数学不太关键，大多时候可以不学。</p>
<p>你如果持续关注这事儿，各种极端对立的观点绝对会吵爆你的头。但这事情其实不可能有结论，因为被对立起来的两极都是太大的概念。</p>
<p>比如说：如果把软件开发缩减为应用软件的开发，那争议性就会降低很多。</p>
<p>这里的关键问题是，假如一个人的目标是应用软件开发，却花了10年来学习数学，接下来在实际应用程序开发过程中，每天面对的是 UI 布局、IDE 使用、圈复杂度控制、面向对象使用、设计模式的使用和类库的使用这类问题，那么这个人就会发现数学其实没啥用，他等价于因为失去焦点而失去了10年。</p>
<p>这里想表明的是，一旦误读了知识与目的间的因果关系，那么学习就会失去焦点，进而造成负效应，毕竟相对于人的可承受负荷而言，这个世界上的知识不是太少，而是太多。</p>
<p>一般的认识是只要学习就必然有所得，所以对人生的影响一定的是正面的。但实际上这个想法是偏颇的，尤其是在软件行业里。</p>
<p>在软件行业中，这种风险之所以异常突出，就在于前面提到过的软件的两个特质：更迭速度快和子领域众多。这两个因素导致软件相关的知识是爆炸性增长。</p>
<p>而避免 “失去焦点” 这一陷阱的第一关键则是分类：<strong>对软件开发进行分类，对软件所关联的知识也进行分类，形成自己的大局观和整体视图。</strong></p>
<p>前文曾经提过集中对知识进行分类，对软件进行分类的方法，这里再补充一个对绕过这一陷阱有帮助的分类方法，它来自《软件成本估算：COCOMOII 模型方法》这本书。</p>
<p>书里面把软件分成了下面几个类别：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+-----------------------------------------------------------+</span><br><span class="line">|                终端用户编程（一般的应用程序）                  |</span><br><span class="line">|-----------------------------------------------------------|</span><br><span class="line">|  应用程序生成器（开发工具） |    应用组装     |     系统集成     |</span><br><span class="line">|-----------------------------------------------------------|</span><br><span class="line">|                    基础结构（OS、DB等等）                    |</span><br><span class="line">+-----------------------------------------------------------+</span><br></pre></td></tr></table></figure>

<p>在进行分类的同时，书里还给出了一组数据，即95%的人从事的是终端用户编程。</p>
<p>这个分类的意义在于，通过它我们可以认识到每一类别背后隐含的知识需求其实不一样，程序员则要根据自己的目的设定焦点。再来看一个具体的例子：</p>
<p>算法领域中，最经典的书籍恐怕是 Donald Knuth 的《计算机程序设计艺术》。对此书的评价已经不止是高那么简单了，如：</p>
<blockquote>
<p>这部多卷专著是公认的对经典计算机科学最权威的描述。几十年来，无论是学生、研究人员还是编程从业人员，本套书的前三卷都是他们学习编程理论、进行编程实践的宝贵资源。</p>
<p>这是一套集所有基础算法之大成的经典之作，当今软件开发人员所掌握的绝大多数计算机程序设计的知识都来源于此。</p>
</blockquote>
<p>那么是不是每个人都应该把这书读一读？这书的前三卷大致有2000页，上班的人都读通估计要1~2年这个样子。</p>
<p>至少在我来看，答案是否定的。具体情况要看你做的是那类软件，你人生的下一步在那里而定。</p>
<p>假设说一个人做的是终端用户编程（比如：财务类软件），并且目标也是在这个方向上继续深造，那么你读这书其实是在浪费时间。</p>
<p>这是因为在终端用户编程上，自己去写算法的机会非常的少，甚至可能没有。反倒是业务领域知识（会计知识）、OO、设计模式、甚至于估算这些知识都比研究算法更有价值。 既然如此，那么从务实的观点上看，为什么去学习不能在可见范围内创生价值的东西，而不是去学习立刻可以变现的东西。走极端的人会找出需要写算法的例子来反驳上述立论，但点不足以表征面，即使偶尔需要自己了解下算法，真就值得花那么多时间去学习么，为什么不尽可能借鉴现成的。</p>
<p>而在基础结构性的软件开发中，情形就不同，这时算法无疑是非常核心的东西。所以 Google 这类公司的面试中往往非常强调算法。</p>
<p>这里最关键的就是聚焦，聚焦的根本则是要在限定时间范围内创生价值。</p>
<p>从方法上讲，聚焦就是找到一个适合自己大小的区域，然后做深。才华横溢的不论，一般来讲，横向穿越和纵向穿越都不太行，除非已经基本穷尽当前的领域。纵向穿越是指从底层穿到上层（想想开发网络协议的和用网络协议的），横向穿越则指横跨太多的领域（想想从内核驱动跨越到信息管理软件）。</p>
<p>其实如果一个人真的拥有无限的时间资源，那么什么时间点学习什么就变得不太关键。但这是不可能的，同时一个人的学习时间远不像想的那么充沛。这点会在后面探讨。 </p>
<p>在清楚自己的目标后，再配合前面提到的知识分类地图，那么避开这一陷阱的几率就大了很多。</p>
<h3 id="学习与实践相分离"><a href="#学习与实践相分离" class="headerlink" title="学习与实践相分离"></a>学习与实践相分离</h3><p>喜欢看网文的很少有人会不知道起点，不过估计很少有人注意过起点给小说分类的标签。在网文小说里有很多个流派，其中一个叫做 “扮猪吃虎”。这个流派的基本特征是很厉害的一个人要假装很菜，最后在关键时刻力挽狂澜。这个流派十分有人气，大概仅次于 “升级练功”，而远高于 “重生”、“转世” 这类的流派。</p>
<p>网文是绝对的市场导向，所以这个现象可以从侧面说明很多人喜欢 “扮猪吃虎” 或者说潜意识里有着 “扮猪吃虎” 的情节。“扮猪吃虎” 这事儿小说里看着很爽，但挪到现实里来很容易让人掉到学习陷阱里。更可怕的是，现实里有这种心思的人其实也还很多。</p>
<p>有时候会看到这样一种现象：很多人自学的东西和工作中用的东西完全没关系。比如：一边用着 C# 做 Web 开发，一边自己学习着 C/C++ 做嵌入式。</p>
<p>这事并不一定不对，只能说非常危险，很可能会导致那样都没有高度。我们得承认当人生被错位的时候，往往只能这样来改变命运，这是没办法，也是正确的。但首先要认识到这样做是相当低效的，低效到一定程度后对的事情也并不一定有结果。</p>
<p>CSDN 曾经做过一份薪酬统计（<a href="http://www.programmer.com.cn/5877/%EF%BC%89%EF%BC%8C%E8%BF%99%E9%87%8C%E9%9D%A2%E6%9C%89%E4%B8%89%E4%B8%AA%E4%B8%8E%E4%B8%8A%E8%BF%B0%E8%BA%AB%E5%9C%A8%E6%9B%B9%E8%90%A5%E5%BF%83%E5%9C%A8%E6%B1%89%E7%8E%B0%E8%B1%A1%E6%9C%89%E5%85%B3%E8%81%94%E7%9A%84%E7%BB%93%E8%AE%BA%EF%BC%9A">http://www.programmer.com.cn/5877/），这里面有三个与上述身在曹营心在汉现象有关联的结论：</a></p>
<ul>
<li>一是 73% 的程序员对自己的薪资并不满意。</li>
<li>二是各个主流开发语言上的差异并没有想的那么大。虽然 C# 开发者中月收入小于 5000 元的比例最高，但5000~10000这个群体在主流开发语言上相差并不大。</li>
<li>三是平均来看，收入增长和工作年限正相关。当然认为到那个岁数工资自然就高了是很危险的。</li>
</ul>
<p>对薪资不满意应该是程序员希望跨界的一个原动力，但收入和年限正相关，与语言非正相关却说明单纯从功利角度看跨界并不明智。因为假设一个人 Java 语言用过三年，C# 用过三年，总的来看收入水平更可能处在三年的水平上，而不是六年的水平上。</p>
<p>软件是一种固化的思维，这就软件开发更多是一种实践而非是一种理论。软件开发内的很多领域，总体上看体现的是复杂而不是艰难，不论是前端开发还是驱动开发。</p>
<p>讲到到这里就有必要简单区分一下 “复杂” 和 “艰难”。考试出题可以有两种方法：一是每道题都不是很难，但题量很大；一是题量很少，但每道很难。从结果来看，两类考试方法下，得高分都并不容易，但其难度的来源却并不相同，前者更多的体现为复杂，而后者却体现为艰难。</p>
<p>在软件行业里，除了一些专门的领域，比如图像算法等，软件开发则更类似于前者，所以经过培训后大部分人都可以做软件开发，进入门槛并不高。</p>
<p>解决艰难问题时，天分很重要；解决复杂问题时，练习很重要。所以软件开发的学习过程中，实践很重要，纯理论知识的权重较低，当然基本的算法复杂度还是要明白的。</p>
<p>这也就意味着脱离项目实践的学习投入产出比往往会差。比如说：编程中常见的多线程问题。如果单纯从学习的角度看，创建线程本身并不复杂，掌握各种线程同步方法（事件、信号灯、互斥量等）也并不复杂。写简单例子的时候，也很少会出错。但一旦落到具体的场景下，虽然多线程的本质没变，但没经验的人几乎一定会在涉及多线程的代码上导致一会儿出，一会儿不出的问题。</p>
<p>再比如说：你可能看了很多设计的书，但从来没有从头到尾写过什么程序，总是在既有代码上修修改改，或者只是完成几千行代码的小工具，那么你的设计知识是很难融汇贯通的，也还是无法很好的承担大系统的设计工作。</p>
<p>这点上有一个旁证，根据统计最多的 Bug 是由新手导致的。这从侧面说明，能做和能做好之间的鸿沟需要大量的实践来填平的。</p>
<p>在这样一种前提下，期望先选个工作，再自己学习，努力转行这样的想法是损失很大的。单纯从增值效能上看，解决这点很简单，除非必须放弃当前的工作领域，否则要以当前参加的项目为根基展开学习，这样才能比较好的调和学习和实践。</p>
<p>而除非一个工作领域过于偏狭，大多时候在编程语言（C# → C/C++）、不同领域间（图形处理 → 地理信息系统等）穿越损失可能更大。</p>
<p>至于如何在 “博” 与 “专” 间平衡，如何选中更适合自己的工作领域，将在后续章节里陆续谈到。</p>
<h3 id="“博”-与-“专”-上的迷失"><a href="#“博”-与-“专”-上的迷失" class="headerlink" title="“博” 与 “专” 上的迷失"></a>“博” 与 “专” 上的迷失</h3><p>假设说一个人的学习已经聚焦，并且学习的内容和自己实际参与的项目也相吻合，那么是不是就没有问题了？很不幸，答案仍然是否定的，在任何一个子领域里，仍然需要进一步去考虑 “博” 与 “专” 的均衡。</p>
<p>对于软件开发而言，设计是再常见不过，再简单不过的一个词了。可如果把视角拔高一点就会发现，单以设计而论仍然是一个不可穷尽的领域，我们可以快速扫描一下和设计相关的部分概念：</p>
<ul>
<li>面向对象分析与设计</li>
<li>结构化分析与设计</li>
<li>模型驱动开发</li>
<li>契约式编程</li>
<li>面向方面的开发</li>
<li>基于组件的开发</li>
<li>元编程</li>
</ul>
<p>有些时候方法论也会和设计牵扯到一起：</p>
<ul>
<li>测试驱动开发</li>
<li>敏捷软件开发</li>
</ul>
<p>如果感觉这个还不够多，那可以去 Wiki 上查编程的范式（<a href="http://en.wikipedia.org/wiki/Programming_paradigm">paradigms</a>）这个条目，那里列了47种范式，每个都和设计多少有点关系。</p>
<p>上述这些还只是说了设计，如果横向展开，那么在特定领域中必然还会牵涉到框架的选用、辅助工具的使用等等。这也就意味着，从博的角度来看，即使是在设计这样一个看似狭小的领域中仍然是没边界的。</p>
<p>与此同时，把一个 API 研究的再透，也是低值人群，因为这种深入理解和单纯会用某个 API 相比，从创造价值的角度看，差别不大。</p>
<p>这也就意味着对于大多数软件开发人员而言，要去寻找广博与精专间的均衡点：既不能闭上眼睛，也不能就用显微镜来看世界。而这一均衡点的价值则可用反木桶原理来说明：木桶原理说的是桶里的水是由最短的一块板决定的，但考量人的价值时却是适用于反木桶原理，即<strong>人的价值往往由最长的一块板决定</strong>。</p>
<p>考虑博和专的问题不能离开产品开发进行考虑，前面曾经提到过，产品开发往往和公司的现金流绑定的更紧，能为现金流贡献力量的技术才是有价值的技术。而产品开发本身事实上对博和专的程度提出了最基本的要求，这种要求往往具有迭代的特质。为了形象的说明这一点，这里举一个通用的例子来进行一点说明：</p>
<p>在第一次迭代里，往往需要达到两个最基本的目标。</p>
<ul>
<li><p><strong>第一个目标是可以为产品贡献自己力量</strong>，但代码质量普通。这个目标如果达不到，一个人会失去自己的存在价值。</p>
<p>这时候最少需要了解某种语言（比如：C++)、某个平台（比如：Windows)、某个 IDE（比如：Visual Studio）和某些业务相关的知识（比如：打印体系）。这个范围可以尽可能圈的小点，但用到的则要学透。比如：不管接触到那个框架，都要去了解它的内存机制、线程机制、异常处理组件构建和国际化处理这些全局性的机制，而不能只是了解某个接口怎么用。</p>
<p>这并非是很高的要求，没有这些就变成了 “靠运气编程”，写完程序后还要祈祷他能跑起来。了解这些之后就可以负担起部分开发工作，否则的话只能做旁观者，没法参与到实际工作中来。</p>
</li>
<li><p><strong>第二个目标是把事情做好</strong>，并能负担些层次更高的工作。这时候要比较深入地了解面向对象、结构化方法、设计模式、理解设计原则，并能把它们用好。至少要能判定，这个程序写得好，那个程序写得不好，同时面对需求能把工作进行下去。</p>
</li>
</ul>
<p>前两个目标是基础，一般来讲学校中基础打的越好，这个阶段越短。达成这两个基本目标之后就可以结合情境来做进一步的选择，可以认为这是博与专选择上的第二次迭代。当然这时候也要谨记不要和实践分开。</p>
<p>完成上述两个层次后，可以有两个方向可供选择。</p>
<ul>
<li><p><strong>可以进一步考虑专的问题，比如在特定领域里把知识深化下去。</strong>做驱动就要理解操作系统的核心机制，做打印的就要了解页面描述语言等，但这个时候要适当警惕边际效应。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">边际效应是说，你让一亩地从亩产500斤增加到1000斤可能只需要投入100块；让亩产从1000增加到1500可能就需要200块；让亩产从1500增加到2000则需要400块了。</span><br></pre></td></tr></table></figure>

<p>一个典型的例子是对 C++ 的学习，C++ 是公认的复杂，如果想做 C++ 的工程师，那么估计搞个10年可能够资格了，但问题是把时间都投在这个上，投入产出比可能不好。而停在哪里合适则是个尺度问题，大致来讲是可以靠时间弥补的细节问题，并不适合专到最底层。比如对于100万行的程序，预先花时间去了解每一处细节，就有点过了。</p>
</li>
<li><p><strong>可以把博再推进一步</strong>，比如：熟悉专门领域的专业知识、熟悉多种既存框架的特性、熟悉提高用户体验的关键点。熟悉多种既存框架的特性的具体含义是：</p>
<p>设计某一种解决方案时，首先要考虑的就是是自己开发还是使用现有的模块。一旦决定使用现有的模块（包，框架等），那就要进一步考虑究竟用那个。</p>
<p>做这类工作时，如果没有一定广博的知识，做选择的时候就会特别的艰难。</p>
</li>
</ul>
<p>假使说现在公司内部要导入一套项目管理系统，那么做决定的负责人必须至少考虑所有下面这些事情：</p>
<ul>
<li>自己从头造，还是用现成的做二次开发？</li>
<li>用现成的，是用开源产品，微软的还是其他公司的？</li>
<li>用微软的话，是用 MS Project 还是基于 SharePoint，还是混合？考虑 License 费用的话真的划算么？</li>
<li>用开源产品，有这么多选项究竟导入那一个?</li>
<li>如果自己从头造，那么是基于微软的技术，还是基于 LAMP 这样的技术？</li>
<li>使用什么框架？</li>
<li>如果要做，用什么语言？</li>
</ul>
<p>一个人很难精通上面所有的领域，但当做选择时，完全没有概念也是灾难性的。</p>
<p>此外，考虑博与专平衡点时似乎有一种特例，钻研特定算法的人，从一开始就只往专的方向发展，并不会考虑其他。比如：钻研 TTS 的人，可能几十年如一日只要专注于 TTS 就完了。</p>
<p>至于具体选择那个方向，则要根据自身情形来定。总的原则是要以当下工作为根基，以实用为目的甄选各种知识，并追求平衡点。</p>
<p>大致上讲，期望做技术专家的更适合前一个方向，而期望做技术管理的则更适合后一类方向。</p>
<p><strong>学习软件工程的时机与必要性</strong></p>
<blockquote>
<p>简单来讲越是没实践经验的人越不适合学习软件工程，越需要规划整体把握全局的时候越需要学习软件工程。</p>
<p>软件工程中覆盖的元素非常繁杂，可以有管理、流程、开发模型、估算、分析设计方法等。这无疑会把知识面扩展的很宽，一旦没有根底，就很容易变成纸上谈兵，夸夸其谈。</p>
<p>在众多软件相关的知识中，软件工程绝对是很特别的一个。很多人很鄙视软件工程，说：我一看到软件工程的书就直接略过；与之相对应，很多人很推崇软件工程，会花很大的心思去研究敏捷、CMMI 等。</p>
<p>刚入职场的程序员大致上是讨厌软件工程的，因为这东西离自己的实践有点远，并且主要是添加束缚。但既然更加复杂纷繁的历史都可以总结出规律，忽视软件开发的内在规律无疑的对有志于成为管理者的人是不利的。</p>
<p>真要学习软件工程，不太适合从抽象层次很高的教科书开始，而适合从《代码大全》这样与实际关联比较紧密的书籍开始。</p>
<p>在国内软件工程的落地似乎始终困难，软件工程相关名词始终在不停的变换（ISO，CMMI，敏捷等），但实际能落地起作用的却不多，这最终导致了一种吊诡的局面：刚对一个绝望，就开始对新的一个报以希望，并在这两个简单的步骤上做无限循环。这种状况也许有其更深层次的原因，比如生存压力过于强大导致工程力量的长远价值被漠视，进而使方法论并不为解决现实问题而存在，而是为了证书而存在。很难据此就说软件工程毫无价值。</p>
</blockquote>
<h3 id="错过人生中的好时机"><a href="#错过人生中的好时机" class="headerlink" title="错过人生中的好时机"></a>错过人生中的好时机</h3><p>没毕业的程序员或者刚毕业的程序员往往感觉空余时间比较充沛，还很苦恼不知道如何打发时间，但实际上一个人一生中可以用于充电的时间远比想的少。一旦错过时机，往往悔之莫及。</p>
<p>对于大多数人而言，人生就像个模板，小处还有偏差，大处却基本相同。</p>
<ul>
<li>20~30岁这个阶段可以讲是黄金时期，这个阶段里，家庭负担较小，可以自由支配的时间较多。当然撞到了很特别的、需要疯狂加班的公司只能另算。</li>
<li>30岁之后因为娃娃出生等，家庭上的时间开销增加，个人可支配时间变少。其中很大一部分人还有很大可能会面对电视剧里常说的婆媳矛盾，让你每天心绪不宁。</li>
<li>40岁之后，家庭琐事会进一步增加，典型的上有老下有小。实在运气不好的自己也会生点病——颈椎病、腰间盘突出、胃病大概可以入选程序员的三大职业病。</li>
<li>50岁之后，时间上会再次解脱，但可惜的是自己也老了，时机不在。</li>
</ul>
<p>如果把人生按照年龄画一条抛物线的话，40岁左右一个人可以达到的人生的顶点，未来再突破的几率则变小。从历史人物来看，大器晚成的不是没有，但真的很少。</p>
<p>用心观察就会发现，招聘启示里经常会注明年龄要在35周岁以下或者40周岁以下，除非是招聘高层。这反过来意味着如果没有到高层，人生会在40之前定型，之后有下滑危险（如遭遇不景气、公司倒闭等）。对程序员而言，这种风险尤其的大，因为很可能你辛苦掌握的知识体系被更迭掉了。</p>
<p>学习本身无疑的是需要顺应这种自然规律的。</p>
<p><strong>很多人很大的一个错误在于，在黄金时期，没做什么积累，就顾得享受生活了，而一旦意识到积累的必要性时，却又受困于诸多琐事而欲振乏力，最终人生高度有限，并迅速走低。</strong>这就是现代程序员版的 “少壮不努力，老大徒伤悲”。</p>
<p>基本上讲，35岁以前要把需要花大量时间，比较硬的技能，学习曲线陡的技能掌握，具备工作所需要的所有主要技能，而35岁之后则主要关注知识的更新和某些软技能。</p>
<p>学习时添水战术效率真的很差，每次点一根火柴烧水，一亿年水也烧不开一壶。同时，比较硬的技能（比如：Donald Knuth 的《计算机程序设计艺术》)往往是需要大块时间投入的，但年纪越大时间越呈现为碎片化，越难搞定硬的知识——先天就容易造就添水战术。比较软的技能，则可以用碎片时间来学习，比如：提高 PPT 的制作水平，提高表达能力。</p>
<p>如果能够安排好自己的时间和软硬知识的关系，那么就可以在特定基础上做积累，小步前进，使自己的价值越来越高。从这个角度看，年轻绝对是一种债务，大多数人必须在他没完全结束前，还掉所欠的东西。</p>
<p>那么具体来讲那些东西是比较硬的，要在35岁前搞定呢？这因目标而异，但下面这些项目应该具有非常高的通用性：</p>
<ul>
<li>精通一门最常用的语言</li>
<li>了解一个最常用平台的基本机制，比如：内存管理、线程机制等</li>
<li>UML 图和面向对象分析设计方法</li>
<li>设计原则，如：职责单一等</li>
<li>设计模式</li>
<li>《代码大全》里讲的一切</li>
<li>精读一个知名的，但有点规模的程序。这点上要感谢开源项目给我们提供了这么多优秀程序。但要谨防好高骛远，动辄挑战 Linux 内核，精读是关键。</li>
<li>累积一定的代码量，比如：独立的完整做过一个数万代码行的东西。这里的关键是完全自己打造，一定不要拷贝粘贴。</li>
<li>掌握基本算法和数据结构（可以不自己写，但至少要知道其复杂度和区别）</li>
<li>养成一种清晰的编码风格</li>
<li>有自己的专业（金融、高并发网站，图像处理，TTS 等）</li>
</ul>
<p><strong>学习英语的时机和必要性</strong></p>
<blockquote>
<p>总的来看，程序员学习英语是一项投资回报率相对比较好的投入。从目标上来看，程序员未必一定要口语流利，但最低要达到阅读英文资料没有障碍的程度。这里面有一个微妙的事情，一旦英语阅读问题较大，查找问题会习惯用百度，这天然会限制一个人的视野。不是说百度自身有多不好，而是说英语的世界里有着更多更精彩的内容。不管喜欢不喜欢，我们必须承认一种现实，在 IT 的世界里英语是一种世界语，一方面是由于美国公司的强大，一方面则是由于开源选择了英语。这最终导致 IT 世界里的新动向、解决问题的小技巧、网站的架构等等都要到英语的世界里去找。在 StackOverlow 很容易找到各种小问题的答案，在 Quora 则很容易找到各种网站的架构。</p>
<p>从学习时机来看，这件事情特别应该在大学里面搞定，如果不行至少也要在毕业1~2年内达到阅读无障碍的程度，当然希望加入外企还需要额外的付出。从学习方法来看，学习外语真没什么特别的窍门，坚持并投入时间即可。</p>
</blockquote>
<h3 id="停止知识更新"><a href="#停止知识更新" class="headerlink" title="停止知识更新"></a>停止知识更新</h3><p>对程序员的增值而言，<strong>人生里最大的陷阱也许是为安全的假象所欺骗而彻底的放松自己</strong>。这种状况在生存环境比较恶劣的情形下不太会发生，但在垄断企业或某一领域中绝对领先的企业里则容易滋生。发现自己是否停止知识更新了并不困难，比如：一年一本书没看，一年一点新知识没接触，一年中工作负荷基本不满等都可以成为一种信号。</p>
<p>这真的是温水煮青蛙，一旦到了三十几岁，并在这种环境中呆习惯了，那么再想跳出来，基本没可能。唯一能做的事情是，祈祷公司不要挂掉，公司也不要来场运动，进行人员的大换血。孔夫子说：日当三省吾身，这是很有必要的，至于认识危险后能否做点什么，那就是事在人为了。</p>
<p><strong>技术人员的知识更新</strong></p>
<p>接触一个新的岗位后，大致要经历一个学习并逐渐胜任的过程，这个时间段里大多数人的学习热情是很高的。一旦基本胜任之后，事情就有了变化。</p>
<p>很大一部分人可能会感觉，反正工作也就用到这么些知识，学习其他的也用不上，因此开始把自己封闭起来，不太看书，不太看技术新闻。</p>
<p>这其实很危险，因为这种做法等于把自己绑死在当前这份工作上。而任何一个产品都有自己的生命周期，一旦一个产品的生命周期结束时，碰巧其所用的技术也已经过时，那么当事人就会很尴尬。因为产品可以结束，生活却还得继续。</p>
<p>这里面一个非常经典的例子是 MFC。微软的这款产品的历史非常悠久，从1992年发布到2012年几近存在了20年时间。随着90后程序员的逐渐出现，马上这款技术就要变得比程序员的年纪还要大了。</p>
<p>即使到今天，很多桌面应用仍然是基于 MFC 开发的，这可以通过查看程序包的 dll 依赖来很容易的进行验证。MFC 是一个很大的池子，有深度、有历史。想把 MFC 的类继承关系、消息机制、框架结构、RTTI、序列化都搞清楚还是要很花一点时间的。</p>
<p>现在我们假设一款庞大的企业应用是基于 MFC 开发的，一个程序员也通过几年的努力了解了 MFC，了解了应用本身，并可以负担起 Bug 修正，新功能追加等任务了。</p>
<p>接下来这个程序员似乎没什么好学的了。因为 MFC 的更新几乎已经停滞，因此对 MFC 的学习几乎不需要花太多的时间了。现有代码也理清楚了，也不需要再花很多时间学习了。现有程序也比较好的满足了企业的需求，推倒重来的可能性几乎没有。</p>
<p>那这个时候这个程序员不需要学习了么？答案一定是否定的。</p>
<p>这里面蕴藏着一个天大的矛盾。</p>
<p>从企业的角度看，一定是需要一个团队来维持这个程序的开发的。但从个人的角度看，如果把所有的青春都耗费在老技术上，那么一旦老技术退出历史舞台，个人该何去何从？</p>
<p>还是上面的例子，假设说一个人持续投入在这类开发上，当他45岁的时候，当前产品生命周期结束，世界变的只有移动开发和云端开发，那么只擅长 MFC 的他该何去何从？</p>
<p>如果真的如此，这个人就被逼到了死角里，人生很可能产生巨大滑落。所以一定不能认为所学足够而停止技能的更新与学习。 </p>
<p>从具体应对措施来看，一是要参照知识的地图，横向扩展知识的广度，比如不只要盯着代码，也要了解业务；不只关注开发也关注一点估算；二是提升可流动性比较好的东西的掌握程度，比如：面向对象分析与设计，这样跨越到其他技术时就能够比较平缓的进行过渡。三是要争取轮换岗位，争取多种实践机会。</p>
<p><strong>管理者的知识更新</strong></p>
<p>到现在为止大部分人认同，管理者是需要懂技术的。从逻辑上看 “懂” 基本上是不瞎指挥的前提，所以这可以称为中国版的 “现场主义”，估计争议不大。</p>
<p>那关键问题就是究竟要 “懂” 到什么程度？</p>
<p>如果说两个人，一个选择了管理方向，一个选了技术方向。接下来要求管理方向上的人技术水平要和技术方向的一样，那么除非这个人特别天才，否则不太可能。正像前面所说，这是由于这两个方向的 “Key” 不同所造成的。</p>
<p>如果把目标设定为确保最终产品的成功，同时假设管理者有更高的决策权，那么管理者必须在下面这些方面有技术感觉。</p>
<p>从做产品来看，要想成功，有两个关键维度需要同时进行把握，<strong>一是产品的概念完整性的把握；一是用合适的手段去实现这个产品。</strong></p>
<p>前一个话题很老，《人月神话》就有提及，但实践中却总是被人忘记。好的产品必须贯彻某一种统一意志，iPhone、微信又重新验证了这一个老的原则。 机械拼凑的产品虽然融合了很多人的想法，但往往是平庸的，并且在项目执行过程中，往往是出错的根源。很像是虽然有法律，但每个人有自己的理解，各行其是这样一个状态。这种概念完整性是管理者第一个需要有所把握的事情，其次就是解决如何去构建产品这个问题。为达成这一目标在下面这几个方面上，管理者要有自己的理解，至少要有自己的原则：</p>
<p>下面简单列举几个比较关键的考量，这和前面论及的如何往博的方向发展有点重叠：</p>
<ul>
<li><p><strong>使用现有产品还是自己开发</strong></p>
<p>比如：那些模块适合自己搞定而那些购入就可以了。购入的时候要遵循怎么样的标准去选择。</p>
</li>
<li><p><strong>使用哪种平台技术</strong></p>
<p>比如：是使用微软的技术，还是开源的技术。</p>
</li>
<li><p><strong>现行架构是否可以达成产品目标</strong></p>
<p>比如：在硬件加软件可以同时支撑的并发数目。</p>
</li>
<li><p><strong>代码可维护性如何约束</strong></p>
<p>这要求必须熟练掌握一些原则性的东西，比如：什么信息隐藏、正交分解、抽象是否充分等。以及一些无歧义指标，比如：圈复杂度，单元测试的收益平衡。</p>
</li>
<li><p><strong>那些环节必须固化为流程，那些一定要团队自由决定</strong></p>
<p>比如文档化要到什么程度才合适，不同阶段间什么是必须的输入输出。</p>
</li>
<li><p>……</p>
</li>
</ul>
<p>假设说有人不这么认为，而是在做了管理后，表现出足够的惰性，不再持续更新自己的知识体系了，那么会发生什么事情？</p>
<p>这时候会很可能会管理倒置。即管理者是名义上的上级，但基本失去对现场的把握，所有的决策完全依赖于下属。得力下属不在，各种决定就只能靠瞎蒙，最终变成只会沟通的管理者—即使被食人族吃了也不会有人注意到，因为存在价值已经被无限稀释，变成了一个象征性的符号。也可能会和下属爆发激烈冲突。因为这类管理者没有自己的立场，上面有任务只能下压。结果同实际情况偏离万里，不具有可实现性，这类管理者无法对自己的上司陈述，也就只能向下转移压力。</p>
<p>不管是那种，一旦到这种地步，其实是趋于失败，只能祈祷食人族不要来。</p>
<p><strong>为什么中层管理者也要坚持知识更新？</strong></p>
<blockquote>
<p>在 IT 行业流传着一个很有名的关于食人族的笑话，这个笑话说的是：</p>
<p>两个食人族的人应聘进了某家大公司，公司人事主管知道这两个这伙每天都要吃人，于是警告他们：“如果你们胆敢在公司吃一个人，你们就会立即被炒掉！” 两个食人族唯唯喏喏地答应，表示绝不会在公司吃人。两个月过去了，公司平安无事。</p>
<p>突然有一天，公司发现负责打扫公司卫生的清洁工不见了。于是人事主管非常气愤，找来两个食人族怒斥，并当场炒掉了他们。出了公司大门，一个食人族马上对另一个抱怨起来：“我一直警告你不要吃有在做事的人，你就是不听！我们两个月来每天吃一个经理，没人发现。你看现在吃了清洁工，他们马上就发现了！你真是个猪！”</p>
<p>这个笑话嘲讽的是某些大公司大企业病发作，人浮于事。大企业病的成因很难一下子说的清楚，但结果却比较明显，一定会导致较多人成为中层管理者。如果说成功的企业天然有感染大企业病的趋势，那无疑的中层管理者也天然有着膨胀趋势。从个人角度看，成为被食人魔吃掉也没有人在意的经历并非是什么好事，因为这意味着存在价值减弱，也不需要什么知识更新。一旦面临裁员这类事情，这个人很可能已经失去了面对残酷竞争的能力。</p>
</blockquote>
<h2 id="程序员生存定律——使人生永动的势能"><a href="#程序员生存定律——使人生永动的势能" class="headerlink" title="程序员生存定律——使人生永动的势能"></a>程序员生存定律——使人生永动的势能</h2><p><strong>这篇说的是精神，比较务虚，不感兴趣的可以略过。</strong></p>
<p>在国内有一个很特别的现象：高中打了鸡血一样使劲学习的人，到了大学往往会放松下来，跑去享受生活了，大学里打游戏、打牌、临考冲刺的大有人在。</p>
<p>这倒也在情理之中，高中不学真考不上大学，考不上大学真就完蛋了；大学不学，只要能毕业，大致还能找到工作。但人生是场长跑，稍一停顿，后面的人就嗖嗖的窜到你前面了，虽然你不一定能看得到到底是谁。这很像龟兔赛跑，但为了避免不成为那只兔子，单靠口号层次的主观意愿是不行的。</p>
<p>停下来的人其实很多，有的人停在了大学里，有的人停在了小有成绩之后，而为了持续前行而成为高手，那首先要给自己找个动力源，而要想找到动力源，那么首先要拷问自己的内心，知道自己为什么上山学艺，为什么要成为高手。</p>
<h3 id="纯物质上的驱动力"><a href="#纯物质上的驱动力" class="headerlink" title="纯物质上的驱动力"></a>纯物质上的驱动力</h3><p>如果回看历史就会发现历史记下名字的人（孔子、商鞅、汉武帝、李白、王安石等等），往往具有一个共通的特征：他们具有澎湃的生命力，绝对不是每天混混日子的人，虽然生命力的表现往往不同。</p>
<p>这似乎和好人坏人，理想高尚与否无关，必须的只是这个人要有所执著，并持续的运用你的脑力、体力去做某件事情。而一个人要想有所执著，那就必须有一种持续存在的驱动力。</p>
<p>在这个时代里，对于大多数人而言第一驱动力无疑是物质及金钱，但这似乎只可以做起点而不能做终点。这就和梁山好汉一样，最开始没准只是为了大碗喝酒，大块吃肉，可聚了义之后，则要考虑替天行道，除暴安良这类比较高端一点的事情了。</p>
<p>组织行为学中的研究佐证了这一结论，美国人的研究显示，当年薪超过40000美元后，薪资将不再是工作满意度的核心支撑因素。</p>
<p>在中国估计相差不大，20万以上年薪的人，往往需要寻找其他的驱动力。</p>
<p>否则这个时候程序员会处在一种瓶颈状态：基本物质需求得到满足（比如：住房、汽车等），但更高一层的物质需求又很不现实（比如：别墅、游泳池等）。</p>
<p>这个时候单纯的物质支撑会让生命力变得萎靡，人也就会变得无可无不可，工作中即不会很高兴，也不会很不高兴，每天也只是例行公事。接下来人生就会开始下滑，倒霉的话还会失业。等到困境真的来了，再想振作，却没那份儿心力了。</p>
<p>在2012年11月，新闻报道百度总裁李彦宏先生在公司内呼唤狼性，排斥小资。具体来讲，呼唤的是敏锐的嗅觉、不屈不挠奋不顾身的进攻精神，群体奋斗，排斥的是信奉工作只是人生的一部分，不思进取，追求个人生活的舒适的态度。这事情的是非很复杂，这里略过不提，反倒是百度这一行动本身说明公司里确实容易存在一种生命力萎靡的状态，这点甚至让 CEO 忍无可忍。</p>
<h3 id="兴趣的力量"><a href="#兴趣的力量" class="headerlink" title="兴趣的力量"></a>兴趣的力量</h3><p>如果说纯物质上的驱动有一定局限性，那么兴趣又如何？</p>
<p>当问及一个人为什么从事软件开发时，很多人会回答是：兴趣。但人们这么表达的时候可能并没有意识到常说的这种兴趣是一个不怎么靠得住的驱动力。这种兴趣往往是一种一时的好奇心，而不是与自己性格特质相契合，可以用来给生命解闷的那种兴趣。</p>
<p>总的来看，兴趣可以分为两个层次：一个是浅层次的。比如看到一个游戏比较酷可能想玩玩，看别人写博客，自己也写几篇；另一种则是深层次的。比如：爱因斯坦你不让他思考，他可能感觉活着就没什么意思了。</p>
<p>找到后一种兴趣的人是幸运的，但大多数人并没有这么幸运，所以一般所说的兴趣都是前一种，尤其是即将毕业和刚毕业不久的人。</p>
<p>真正做软件产品的时候，牵涉的往往是大量比较繁琐的细节，大多时候脏活、累活、苦活远比看上去风光的活，有趣的活多。具体一点讲就是，可能需要面对比较垃圾的既存代码，可能要面对不怎么负责的同事，无理的需求变更，十分紧张的日程等。除非你做的是很高端的研究。</p>
<p>这些东西本身并非是很有趣的，它们很快会让初始时的一点夹杂着好奇心的，浅层次的兴趣消耗殆尽。最初印象和实际的偏差很可能是造成某些程序员提前退场的一个主要原因。</p>
<p>这种原生态的兴趣消失后，又没有其他支撑点的话，人就越来越会像机器人，并可能会厌恶自己的生活。因为每天大部分时间都花在工作上，而工作本身又是如此的无聊。所以故事到兴趣这里并没有结束，还需要继续找寻驱动力。</p>
<p>当然很可能以兴趣为出发点而找寻其他，最终反倒又回到起点，这是人生常态，倒不值得惊讶。</p>
<p><strong>兴趣、体力与智力</strong></p>
<p>人和人之间的体力往往相差不大，但智力的差异却往往不可以道里计。所以一个经验丰富的老农半天种一亩地，一个不太熟练的忙和一天大致也可以搞定一亩地。</p>
<p>纯体力上不太拉得开人的差距。而智力则不一样，人的智力容易有数量级上的差异。前苏联著名物理学家、诺贝尔获得者朗道将世界上的物理学家从一级到五级分为5个层次，每个层次的贡献差一个数量级。朗道认为自己是2.5级，获得诺贝尔奖后，才把自己生为1.5级。就不用再考虑5级的物理学家和普通人的差异了。</p>
<p>我个人感觉，越是靠近体力一端的工作越不可能兴趣驱动，而越靠近智力一端的工作越可能是纯兴趣驱动。恰如我很难相信干重体力活的人是因为兴趣一样，我也很难相信爱因斯坦不去做以色列总统而选择继续研究物理不是因为兴趣。</p>
<p>程序员的工作在这两个极端间，所占跨度较大，但产品开发也许是中间偏左，完全的兴趣驱动估计很难。即使是兴趣驱动，也不是我喜欢游泳，我喜欢吃小笼包这个层面的兴趣。</p>
<h3 id="使人生永动的势能"><a href="#使人生永动的势能" class="headerlink" title="使人生永动的势能"></a>使人生永动的势能</h3><p>如果说物质和单纯的兴趣不足以成为一种长久的驱动力，那么无疑的我们需要继续去寻找一种可以使人生永动的势能。</p>
<p>很多一部分程序员其实是认识到了技术更迭这样的特征时刻在淘空自己立足的根基的，但很多的人在这种时候并不是采取积极的态度去面对，而是会试图欺骗自己，给自己一种安全的假象。比如：可能会告诉自己，反正公司短时间没问题，把手里的事做好就行了。让自己那么辛苦干什么？这在某些有点年纪生活相对安稳的程序员身上比较常见，这很可怕，有时候会把自己逼到死角里。摆脱这种状况当然需要一定的危机意识，但更关键的是要找到一种使人生永动的势能。</p>
<p>据说美军的麦克阿瑟将军非常喜欢一篇名为《青春》的散文，在占领日本期间日本人在美军总部发现了这篇散文，于是这篇文章很快变得很流行，在商界大佬（如松下幸之助等）间流传甚广。那《青春》这篇散文说的究竟是什么呢？我们来一起看一下：</p>
<blockquote>
<p>青春不是年华，而是心境；青春不是桃面、丹唇、柔膝，而是深沉的意志，恢宏的想象，炙热的恋情；青春是生命的深泉在涌流。</p>
<p>青春气贯长虹，勇锐盖过怯弱，进取压倒苟安。如此锐气，二十后生而有之，六旬男子则更多见。年岁有加，并非垂老，理想丢弃，方堕暮年。</p>
<p>岁月悠悠，衰微只及肌肤；热忱抛却，颓废必致灵魂。忧烦，惶恐，丧失自信，定使心灵扭曲，意气如灰。</p>
<p>无论年届花甲，拟或二八芳龄，心中皆有生命之欢乐，奇迹之诱惑，孩童般天真久盛不衰。人人心中皆有一台天线，只要你从天上人间接受美好、希望、欢乐、勇气和力量的信号，你就青春永驻，风华常存。</p>
<p>一旦天线下降，锐气便被冰雪覆盖，玩世不恭、自暴自弃油然而生，即使年方二十，实已垂垂老矣；然则只要树起天线，捕捉乐观信号，你就有望在八十高龄告别尘寰时仍觉年轻。</p>
<p>——塞缪尔-厄尔曼德</p>
</blockquote>
<p>文字非常优美，但意思并不深奥。青春是一种进取的精神，是一种远离颓废追逐理想的状态。我个人非常认同这种观点。</p>
<p>人的思维和欲望具有无边界特质，只要在未来和现在之间制造一种差距，那么就会产生无尽的势能，人也就会不断的前行。而制造这种差距的最佳素材往往只能是理想。</p>
<p>大多数人可能误解了理想和道德间的关系，但实际上理想并非是一个高尚的词汇，与善恶无关，更与宏大与渺小无关。</p>
<p>鲁智深说：平生不修善果，专爱杀人放火，这也可以是种理想，只要你可以承受它所带来的负能量并不感到痛苦。物质需要、成就需要、权利需要、归属需要这些动机理论中经常提到的东西，乃至前文提到的兴趣都可以成为理想的素材。<strong>所以反过来讲，理想是什么似乎并不关键，关键是要有，并且你真的可以很狂热地投入去做，这就可以产生一定的势能。</strong></p>
<p>对与天生对代码狂热的程序员而言，这并不是什么问题；但对大多数人这种理想往往并不在程序之内，而在程序之外。这时候很可能需要叠加几类东西才能给自己蓄积足够的势能：物质的需求、成就的渴望、不安全感的驱离、技术上的追求等都是不错的素材。</p>
<p>当然这是个人的私有领域，最终只能由个人做出选择。 </p>
<p><strong>这里最后想说的是有理想、有斗志不一定会成功，但无理想、无斗志几乎一定会铸就平庸和失败，因为细致想来世界本身归根到底是理想主义者的。</strong></p>
<p>这可以通过一个简单的逻辑游戏来做点证明：</p>
<p>意识决定行动：个人意志决定个人行止，组织意志决定组织行为 → 理想主义者个人意志更为鲜明，自我意识强烈，而无理想的个人意志薄弱，愿意随波逐流 → 意识强者上位 → 处于组织核心地位的是理想主义者 → 无理想的人不论在个人层面还是组织层面都沦为追随者 → 从资源掌控的角度看理想主义者掌控世界。</p>
<p> 对这事而言，理论其实不关键，选择与坚持非常关键，但还是把它们放在这里，供大家参考。</p>
<p><strong>动机理论与人生势能</strong></p>
<p>如果把我们前面提到的 “势能” 做细致分解，那么你可以得到各种各样的动机理论。动机理论却真的可以解释现代人种种行为，因此在这里对其做一点介绍。</p>
<ul>
<li><p><strong>马斯洛的需求层次理论</strong></p>
<p>动机理论里最有名的可能是马斯洛的需求层次理论，即：</p>
<ul>
<li>生理需要：包括觅食，饮水，栖身，性和其它身体需要。</li>
<li>安全需要：保护自己免受生理和情绪伤害的需要。</li>
<li>社会需要：爱、归属、接纳和友谊。</li>
<li>尊重的需要：自尊、自主和成就感；地位、认可和关注等。</li>
<li>自我实现的需要。</li>
</ul>
</li>
<li><p><strong>ERG 理论</strong></p>
<ul>
<li>存在需要 (Existence)：与马斯洛的生理、安全需要相似。</li>
<li>关系需要 (Relatedness)：与马斯洛的社会及地位需要相似。</li>
<li>成长需要 (Growth)：与马斯洛的自尊及自我实现需要相似。</li>
</ul>
</li>
<li><p><strong>X 理论和 Y 理论</strong></p>
<p>X 理论持下面四种假设：</p>
<ul>
<li>员工生来不喜欢工作，只要有可能，他们就逃避工作。</li>
<li>由于员工不喜欢工作，因此必须采取强制和控制措施，或采用惩罚威胁他们从而实现目标。</li>
<li>只要有可能，员工就会逃避承担责任，并寻求正式的指令。</li>
<li>大多数员工把安全感视为高于其他所有工作相关因素，并且没有雄心壮志。</li>
</ul>
<p>与之相反，Y 理论持四种积极的人性假设：</p>
<ul>
<li>员工视工作如同休息、娱乐那样自然。</li>
<li>如果员工承诺完成某个目标，他会进行自我引导和自我控制。</li>
<li>通常人们都能学会承担责任，甚至会主动寻求责任。</li>
<li>人们普遍具有做出创造决策的能力，并不仅仅是管理者才具备这种能力。</li>
</ul>
<p>如果把 X 理论和 Y 理论对应到IT行业，那么提倡人件和敏捷的基本是基于Y理论，而提倡 CMMI 和大棒加胡萝卜的基本是基于 X 理论。</p>
</li>
<li><p><strong>双因素理论(two-factor theory)</strong></p>
<p>也被称为激励-保健理论 (motivation-hygiene theory）。这个理论认为激励和让人不烦（保健）是两码事情。满意与不满意不是对立的两极，满意对立的是没有满意，而不满意对立的则是没有不满意。简单来讲管理质量、薪金水平、公司政策、工作环境这些被认为是保健因素，他们不产生满意，只产生不满意或没有不满意两种状态。要想激励员工必须在晋升、个体成长上有所作为。</p>
</li>
<li><p><strong>麦克莱兰的需要理论</strong></p>
<p>这个理论把人的内在需要归为三类：成就需要、权利需要和归属需要。成就需要是一种追求卓越、获取成功的需要。权利需要则是一种控制他人行为的需要。归属需要则是建立良好人际关系的需要。</p>
</li>
<li><p><strong>认知评价理论</strong></p>
<p>这个理论比较神奇。他认为工作本身的乐趣是已经是一种内在的奖励，而外部奖励反倒会降低动机的水平。这听着比较抽象，但意思是如果总是用奖金配合绩效考核来激励员工，那么个人由于兴趣而从事某项工作的动力就会降低。这很难理解，但确实也有证据来支持这个理论。</p>
</li>
<li><p><strong>目标设置理论</strong></p>
<p>由于很多公司会做目标管理，所以很多程序员对这一理论反倒不陌生。这一理论大意是说：明确而具体的目标有助于提高个人效能，目标的挑战性、针对目标的反馈都在此基础上进一步提高目标的效果。</p>
</li>
<li><p><strong>自我效能理论</strong></p>
<p>这个理论走到极端就是常说的“人有多大胆，地有多大产”。大意是说一个人对自己有能力完成某项任务的信念越强，那效能越高。或者简单说就是自信很重要，而促成自信的方式可以是：过去的成功经验、从榜样吸取力量、受到言语激励等。</p>
</li>
<li><p><strong>公平理论</strong></p>
<p>公平理论是说一个人总是会拿自己的产出收入比和另一个人比较，如果比率相似，那么人们会认为环境是公平的。</p>
<p>这落到个人头上，就是我们要重视这种差异么？都是同样的学校、同样的智商、同样的家庭背景，如果一个人收入等比你多很多，你在意么？</p>
</li>
<li><p><strong>期望理论</strong></p>
<p>这种理论把人的动机分解成几个部分：一是如果我努力了，那么这种努力能否在绩效评估中表现出来？二是如果我获得了良好的绩效评估，那么能否得到奖励？三是即使我被奖励了，这东西是不是我想要的。</p>
</li>
</ul>
<p>这些动机理论从公司的角度看是激励员工的方法，从自己的角度看则是努力前行的动力。我还是上面的观点，这些理论知道就可，但如果无法找到对自己内心进行触动的点，理论在这里并没有很大的价值。如果想进一步了解，则需要阅读组织行为学相关的书籍了。上面的内容则主要参照了人民大学出版的《组织行为学》一书。</p>
<p>最后想说的是单纯从境界上来说似乎有一种精神远远超出动机理论所能涵盖的范围，这种澎湃的生命力和永不屈服的精神，虽然年代久远，乃至失去传承，但这种精神却正是上古华夏民族所身体力行的精神。</p>
<p>何新先生为自己国学经典系列写了一个总序，对此进行了很好的描述，他说：</p>
<blockquote>
<p>华夏民族的先史中有一个神话时代。这个时代实际就是华夏民族肇始和文明滥觞的英雄时代。</p>
<p>女娲是敢于蹈火补天的英雄。伏羲、神农、黄帝、炎帝、蚩尤、大禹，或创世纪，或创文明，或拓大荒，或开民智，或奋身为天下法。</p>
<p>鲧与大禹父死子继，以身济世，拯黎民于水火；蚩尤共工九死不悔，虽失败而壮志不屈，天地为之崩陷。</p>
<p>夸父逐日，体现了对神灵的藐视。而精卫填海，则表现了对宿命的不驯。</p>
</blockquote>
<p>由此观之，中华民族的神话先古时代，实在是一个群星灿烂的时代，慷慨悲壮的时代，奋进刚毅的时代；是献身者的时代，殉道者的时代，创造英雄和产生英雄的时代。</p>
<p>传说中华民族是龙和凤的传人，而龙凤精神，我以为就是健与美的精神。 </p>
<p>我个人总是感觉很难用动机理论去解释这种宏大且壮阔的精神。 </p>
<h3 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h3><p>IT 这个行业确实是年轻人更容易出头的行业，如果不信，去看看腾讯和银行高层的年龄吧。</p>
<p>一个企业兴起的时候往往会带着一批人走上成长的快车道。在这类企业里没有太多的历史包袱所以占据高位的往往是些年轻人，这和有个几十年历史的行业非常不同。</p>
<p>而为了达成这一目的，程序员首先必须有效的持续增值并成为某一方的高手（架构师、Guru 或者优秀的管理者）。单纯从技能上讲，你一定不能和金字塔最底层的百万大军竞争，想象一下一个刚学会某门语言的人和一个每天思考虚拟机原理与设计、设计跨平台系统的人有多大的差距。而从公司的角度看，高手则意味着可以为公司在现在或将来创生较大价值。</p>
<p>想成为高手就需要选定一个大致的方向，持续深化，并避开学习路上的诸多陷阱，如：失去焦点、分离学习与实践、过散而不专等等。</p>
<h2 id="程序员生存定律——表达背后的力量（1）"><a href="#程序员生存定律——表达背后的力量（1）" class="headerlink" title="程序员生存定律——表达背后的力量（1）"></a>程序员生存定律——表达背后的力量（1）</h2><p>前面讲的主要是提升一个人自身的价值，对于程序员而言，自身价值几乎与技术能力相等价。对喜欢编程的程序员而言，最简单的生存方式也许是最幸福的，比如说：我只把精力放在提高编程技术上，并且工作中也只负责把程序写好，凭借这个也可以让自己物质上比较富足。如果真的可以实现，这无疑是非常让人幸福的工作生活方式，但现实往往并没有那么纯粹，所以这里还是会讲些有用但可能并不讨人喜欢的内容。 </p>
<p>前面曾经提到过一个人的表现出来价值始终由两部分组成，一是自身的价值或者说能力；一是表达力也就是自身能力的表现程度。一旦说到表达力、说到沟通、说到公司政治，纯粹的程序员往往是没耐心听下去的，但这确实是一种现实，与喜欢与否关联不大。不同公司间不同的是对表达力的需求程度，而不是表达力是否有其存在价值。</p>
<h3 id="表达力的类别和作用"><a href="#表达力的类别和作用" class="headerlink" title="表达力的类别和作用"></a>表达力的类别和作用</h3><p>如果一件事情真的是非你莫属，那么作为需求方的企业会尽一切努力来从茫茫人海里把你挖出来，这时候表达力反倒不太关键。这种可以叫卖方市场。想象一下，你的简历中如果只有一句话，如：我创建了 C 语言或者我开发了 Linux 的第一个版本，那么这时候是不需要说别的说明的。</p>
<p>但在更多时候，具体到某个程序员，他往往只是众多可选项之一，总是有着 A、B、C 可以替代你做同样的工作。这时候他就会面临竞争。这种叫买方市场。越有吸引力的职位，越是买方市场。</p>
<p>前者总是很难达到，毕竟杰出的天才程序员并不像想的那么多，这样的话，表达力就有了价值。</p>
<p>在公司里，如果你稍微用点心进行观察，就会发现，CEO、CTO 只有一个，总监级的人数要少于部门经理，部门经理则要少于项目经理，项目经理要少于程序员。当然这只是管理路线的情形，纯技术路线在不同公司间差别较大，不太好比较。这样一种进阶路径已经足以说明竞争之惨烈，高职位总是稀缺的。在竞争高级职位时，往往并不会有唯一的决定性因素，一旦有缺乏表达力这样的明显短板是很难一层层脱颖而出的——因为待选者很多，你有技术，他也有技术，你没有表达力但他有表达力，这种情况下显然他的机会更大。</p>
<p>前面曾经提到过，表达力和技术技能不是一种对立关系，而是一种叠加的关系。从纯量的观点来看，叠加后的高度，才是一个人表现出来的高度。超级程序员单只技术一项就已经足够高了，他们真不用理会这事儿，但大多数人不行，大多数人在技术达到一定高度后可能会碰到瓶颈，因此需要从其他方面做弥补，这样才能确保最终表现出来的高度。</p>
<p>一提表达很多人会想到沟通，尤其是言语沟通，但这是一个非常巨大的误解，表达力并非只限于语言，现实亦可为表达作证。当面对一个陌生人的时候，更多人会采用察其言观其行的方法。这时候往往行重于言。也就是说，但凡影响一个人在他人、在组织里的形象的东西皆可视为一种表达。</p>
<p>这不意味着言语沟通没有价值，而是说言语需要有现实进行佐证才更有力量，表达力正是言行合一后所形成的力量。大多的程序员不善言辞，但很少有人对此反感；反倒言行分离者容易遭到一致的排斥。其实大家都知道说很容易，而做很难，从时间轴上来看，“说” 赢的是短线，而 “做” 赢的是长线。其实倒没什么可以偏废的。</p>
<p>在下面的章节里我们所主要关注的并非是如何改善自己的沟通方法和言辞，<strong>而是如何提高自己言行合一后的表达力</strong>。这种表达力对任何人都是必须的，但对管理方向上的人帮助会更加明显。</p>
<p><strong>证书是表达力的来源之一么？</strong></p>
<blockquote>
<p>诚然证书也是一种表达自己的方式，但我总怀疑软件开发，项目管理的证书是各种证书中含金量最低的。至少我是想不出那个认证能有注册会计师在会计行业里同等的地位。事实是因为注会证书找到高薪职位的常常听说，但因为某个软件考试认证找到特别好职位的就不太听说了。</p>
<p>很可能下面这段文字是偏颇的，但我还是想对此表达一下自己的看法。</p>
<p>证书只在职业的初级阶段会略有作用，比如：一个人如果不是学计算机专业的，但想做软件开发，这时候持有软件设计师这样的证书会有一定的帮助。但长线来看，各种证书似乎只能起一个敲门砖的作用。这也许是因为，一个人程序写的好不好实在太容易检验了。在代码面前基本没什么秘密可以隐藏起来。而对于管理来讲，实践又远比理论重要，所以持有 PMP 证书和能管理好项目的重叠度并不高。这大概就是 IT 行业里证书不太有用的两个主要原因吧。</p>
</blockquote>
<h3 id="改善表达力的途径"><a href="#改善表达力的途径" class="headerlink" title="改善表达力的途径"></a>改善表达力的途径</h3><p>在这系列里中，我们认为四个因素对一个人的表达力有关键影响，它们分别是：资历、性格与习惯、借势与公司政治。下面将分别针对这四点做一点说明。 </p>
<h4 id="给自己一点资历"><a href="#给自己一点资历" class="headerlink" title="给自己一点资历"></a>给自己一点资历</h4><p>资历也是一种表达方式。</p>
<p>如果你翻看创业公司高管的简历，往往会发现，有些人曾经披荆斩棘的一起奋斗过，具有着某种特别的资历。如果 CEO 是掌门，那么这些人很像真传弟子，在公司里有着很特别的地位。</p>
<p>马云先生身上曾经发生过一个很有意思的转变。大概是在2001，马云先生对自己一起创业的部下说：你们只能做小组经理，而所有副总裁都得从外面聘请。 而后马云先生承认这是个错误，他说：公司初创，融了钱就开始犯错，尽招有著名大公司经历的人。寒流起，这群人大都犹如蝗虫，只留下一堆概念、 PPT 和不屑。多年来总有一批 “人才” 在各公司甚至竞争对手间奔走，加薪升职！其实错在自己。看到十年换过七八份工作的人，就像十年内结过七八次婚，漂亮但无忠诚，您敢娶和该娶吗？</p>
<p>与此同时，柳传志先生曾经强调联想要做不是家族的家族企业。</p>
<p>这两位泰山北斗级人物的表述虽然不同，但其核心其实偏差不大，皆是强调一种对公司的忠诚度和归属感。这应该引起职场中人的注意：在跳槽的同时，似乎有些损失被忽略了。</p>
<p>这个被忽略的东西以往一直被称为资历。在很多人眼里，资历代表着一种腐朽的力量，是应该被后浪打在沙滩上或者被扔进垃圾堆的。但资历本身的力量在过去数百年里却一直起着不容忽视的力量。这甚至可以扩展到国外，史蒂夫·鲍尔默之所以成为微软的首席执行官，应该不单只是因为能力。</p>
<p>资历本身并不直接增加一个人自身的能力，但他增加一个人可以左右的力量，影响个人力量的表达。程序员很容易就对着程序使劲，而忽略这个维度上的力量。</p>
<p>这可以举个简单例子来做一点说明：</p>
<p>一个人在一个公司工作了10年，那么这10年中他就会在他所接触过的人中间，建立某种声誉，培养一种信任。这种声誉和信任都会转化为做事时的润滑剂，很多人可能更愿意去配合他。但一旦他换了个环境，可能原本只需要打个招呼的小事情，就需要一个上午的解释。</p>
<p>资历这东西位置越高，背后隐藏的力量越大，但即使是对于没成为管理者的程序员，资历中也还蕴含着力量，比如：</p>
<p>总是很投入的去考虑多线程、数据结构、出错处理的人，确实有些方面会疏忽，比如思考的太投入，就忘记和其他人联络进度了。这个时候从管理者的角度看，可能表现为一个被分配的任务，既没有被完成也没有进行预先联络，这就很可能被曲解为对自己的不尊重，接下来就会出矛盾了。这类事情往往可以被资历化解无形。</p>
<p>用心来想，资历之中主要包含了三个方面的力量：<strong>忠诚、信任与对既有规则的熟悉和对既有人员的熟悉</strong>。</p>
<ul>
<li><p>形象一点来讲，假设说一个人白手起家开创了一番事业，有一批人风里雨里跟随十几年，甚至几十年，同时另外有一批人，假设能力上比老部下略微优秀一点，那作为领头的人会因为这种优秀把老部下都换掉么？这固然是因为人与人之间终究还有一种情分在，但往往这并非主因。一个人最终表现出来的能力事实上有两个关键支撑，一是能做什么所对应的能力，一是工作意愿，两者相乘才是一个人表现出来的能力。当归属感强的时候，工作意愿上会有绝对优势。一个私心过重的人，能力越优秀，位置越高，对公司的损害可能就越大。</p>
</li>
<li><p>生人和熟人之间的主要一个差别是信任程度不同，一个人在生命中其实是在不断的累积自己的声誉，但这种声誉的作用范围往往是有限的。而资历正是反映了这个影响范围的一个东西。当一个人很好的理解另一个人的时候，他就会知道这个人会用心做事，那个人马马虎虎，合作的时候心里也就更有底，因此大多时候人都喜欢和熟人来往，背后其实是一个道理。</p>
</li>
<li><p>没有哪个公司会把事情事无巨细都写在纸上，资历可以帮助人们很好的理解这部分事情。这也不难理解，A 和 B 可能性格不合并小有恩怨，不了解的项目经理可能就会把这两个人安排在一起做沟通很多的工作。</p>
</li>
</ul>
<p>上面说了很多，但结论其实很简单：资历有助于体现个人能力，所以要给自己一点资历，只在彻底没有希望的时候换工作。否则会损失掉资历背后的力量。</p>
<p>那究竟在什么情形下，应该舍弃资历背后的力量，而另谋出路？总的来看，<strong>一个人应该在自己价值无法增长且自己不愿意混日子的时候换公司。</strong></p>
<p>造成价值无法增长的原因有很多：</p>
<ul>
<li>公司开始衰落，看不见自己的未来；</li>
<li>做的是非主营业务，遭到明显歧视，看不到希望；</li>
<li>公司内斗太厉害，显失公平，完全没人敢说真话了，都在搞政治；</li>
<li>无所事事或做的事情完全的简单重复；</li>
<li>公司需求和个人意愿完全对立；</li>
<li>你虽然水平一般，但在公司里已经是绝顶高手了；</li>
<li>感觉每天活得特别虚伪，很累。</li>
</ul>
<p>出现了上述场景大致上是该换工作了，反之就要斟酌。出现了上述情形，不换工作是一种误判。但误判却不只是 “该换不换” 这一种。反过来 “不该换换了” 也是一种误判。后者这类误判比较常见的是：</p>
<ul>
<li>因为薪资、福利的小幅增加而换工作，比如上浮10%。</li>
<li>因为工作无趣而换工作。这点要补充一点说明，大部分工作都会包含一定无趣的部分，期望工作和打游戏一样有趣是不可能的。所以这里的关键是判断无趣的尺度。而树立这种尺度的关键是看工作和思考的关联程度。如果一项工作已经是需要很多思考才能做好，那么如果对这类工作感到无趣的时候，要适当做些自省，因为很可能下一个工作还是同样的无趣。比如说：如果你不喜欢用 C#，那么很可能你也不喜欢用 Java。因为这类问题，往往并不是出在工作有没有趣，而是出在了对有趣无趣的定义上。</li>
<li>如果一个工作真的只是简单的重复，不需要动脑，那无趣就真是工作本身的问题。</li>
<li>因为某件事情受点委屈而换工作。比如遭受了批评，感觉很没面子。</li>
</ul>
<p>最后想说的是，不要低估资历的影响而频繁换工作。换工作是可以的，但想通过频繁换工作而提高获取较高职位的几率则是缘木求鱼。想象一下，要什么样的跳槽才可能获得华为前100号员工的职位和收入？一位曾经前100号的员工，在较早的时期因为误判而离开了华为，在当时无疑的这种跳槽会带来一定的收益，但这种收益往往是有限度的。这位员工在几十年后，非常感慨的说：人这一生，跟对人是非常重要的。这种事情和观点的是非很难评论，但无疑的它是值得职场中人思考的。</p>
<p><strong>资历是东方文化特有的产物么？</strong></p>
<blockquote>
<p>我们经常听到很多国外大公司会空降 CEO，因此可能会感觉资历这东西独属于东方文化。但这其实不对，即使在美国很多的公司也愿意选择长时间在自己公司工作的人做 CEO，而非是空降。空降只是没办法时候的办法。</p>
<p>我们熟知的大公司往往如此，微软的史蒂夫鲍尔默是微软的最老员工，苹果的吉姆库克在1998年加入苹果，GE 更是历来如此，而新秀们（Google 等）的 CEO 都还太年轻，没到这个时候。</p>
<p>对此 Intel 即将退认的 CEO 保罗·欧德宁的观点很有代表性，他说：“我认为英特尔将继续坚持从公司内部选聘新任首席执行官的策略，董事会对这一策略很满意。只要我们从公司内部选聘新任首席执行官，我们的管理团队会相当优秀。我认为这是最可能的结果。我对公司内部的新任首席执行官候选人非常满意。芯片产业以往的经验表明，可能的情况下应当尽量从公司内部选聘新任首席执行官。如果从公司外部选聘，新任首席执行官需要 2 年时间了解公司文化、同事和运作方式，我们为什么要浪费这 2 年时间，冒这样的风险？我猜测新任首席执行官将来自公司内部。”</p>
<p>上述的两年时间大致可以等价于量化了的资历力量。</p>
<p>当然在没有做一份美国企业 CEO 甄选规则的列表前，得出美国公司也重视资历这一观点具有片面性。但可以换个视角来让论述更充分一点。并进一步查看 CEO 级别上资历的力量。</p>
<p>在管理的书籍里有一本是当之无愧大腕：基业长青。</p>
<p>这书在对大量公司进行调查之后得出了这样一个结论：<strong>要想成为基业长青的公司，那么最关键的是要恪守核心价值观、核心目标。而要想维护核心价值观，那么首先要有认同这一价值观的当家人。</strong>空降的CEO在这一点上是有绝大风险的。</p>
<p>对此，基业长青一书中还提供了一些很有力也有意思的数据:</p>
<p>高瞻远瞩公司从内部人才中培养、提升和慎重选择管理人才的程度，远远超过对照公司，他们把这件事当成保存核心要素的关键步骤。从1806年到1992年间，我们发现，只有两家高瞻远瞩公司曾经直接到公司外面聘请 CEO，比率是11.1%，却有13家对照公司直接聘用外人当 CEO，比率是72.2%。我们持有资料的高瞻远瞩公司的113位 CEO 当中，只有3.5%来自公司外，对照公司的140位 CEO 中，却有22.1%来自公司外。</p>
<p>上文里高瞻远瞩的公司是指可以基业长青的公司，而对照公司则是指无法基业长青的公司。</p>
<p>我想这样一种统计至少可以说明，资历在很多美国公司中也有着举足轻重的作用，而并非只属于东方文化。</p>
</blockquote>
<h2 id="程序员生存定律——表达背后的力量（2）"><a href="#程序员生存定律——表达背后的力量（2）" class="headerlink" title="程序员生存定律——表达背后的力量（2）"></a>程序员生存定律——表达背后的力量（2）</h2><h3 id="去除性格和习惯中的致命缺陷"><a href="#去除性格和习惯中的致命缺陷" class="headerlink" title="去除性格和习惯中的致命缺陷"></a>去除性格和习惯中的致命缺陷</h3><p>性格决定人缘，而人缘影响沟通成效，最终影响一个人的表达力。想成为一个道德完美的人是非常困难的，但只要稍微注意，去除一些谁都厌烦的性格缺陷还是可能的。</p>
<h4 id="人情练达"><a href="#人情练达" class="headerlink" title="人情练达"></a>人情练达</h4><p>在《红楼梦》第八十二回里有一小段对话很有意思：</p>
<blockquote>
<p>袭人道：“你还提香菱呢，这才苦呢，撞着这位太岁奶奶，难为她怎么过！” 把手伸着两个指头道：“说起来，比他还利害，连外头的脸面都不顾了。” 黛玉接着道：“他也够受了，尤二姑娘怎么死了。” 袭人道：“可不是。想来都是一个人，不过名分里头差些，何苦这样毒？外面名声也不好听。” 黛玉从不闻袭人背地里说人，今听此话有因，便说道：“这也难说。但凡家庭之事，不是东风压了西风，就是西风压了东风。”</p>
</blockquote>
<p>最末一句鲜明的体现了林黛玉和薛宝钗的性格差异。如果是薛宝钗估计会讲，姐妹们需要互相扶持。从《红楼梦》的故事里也可以看到这两种人格会导致的不同结局。</p>
<p>这对我们有一定的启示意义，我们可以抽象出一个极其绝对的场景：</p>
<blockquote>
<p>两个人作为一个团队而存在的时候，如果张三无求于李四，或者张三具有绝对的控制权，那么张三不需要和李四做沟通，只要保持沉默或者命令也就足够。否则的话，两者就需要协作，进行更多的交流，今天是你帮助我一点，明天是我帮助你一点，这样彼此工作上都可以有比较好的进境。</p>
</blockquote>
<p>以程序员的工作状况来看，期望东风压倒西风式的绝对控制基本上是不可能的。把自己封闭在某个独立的领域里（比如算法），达到绝对高度，做孤狼型的人倒是可能，但终究罕见。而与人协作，从他人那里获得更多的支持并取得成绩这一事情则需要人情练达。 </p>
<p>走纯粹技术路线的程序员之间不需要很多这方面的考量，但程序员也是人，一点情商也不要也是不可能的。 </p>
<p>想象一个很常见的场景：</p>
<blockquote>
<p>张三和李四同时加入公司，张三的水平高一点，因此李四在遇到程序问题时，总是会问到张三，而张三也总是很热心的给予帮助。有一天，张三有事，下午要请假半天，但有一个功能还没有对应掉。这时张三找到李四请他帮忙。但李四头也不回地说：没空，你自己解决吧。</p>
</blockquote>
<p>这种情境下，一般来讲张三会愤怒，在可做可不做的时候会拒绝向李四提供帮助。李四不是不能拒绝，但他应该认识到自己欠人人情，拒绝的时候需要诚恳的表示歉意，解释一下自己的困难。</p>
<p>李四如果持续自己的做事风格，可以想见他会越来越被孤立，也许他的技术能力不断提高，但对他的评价则会下浮。除非有一天他达到了一种别人只能仰望的地步，事情也许会有变化。如果李四想往管理方向发展，那么影响就更为致命，这种行事方式几乎堵死了自己取得成绩的可能性。</p>
<p>对于程序员而言，在这个上面需要注意的点并不多，也不需要把自己搞的很累，但有几条传统的智慧还是要的：</p>
<ul>
<li>欠人的要记清楚，别人欠自己的可以含糊。不要认为任何对自己的帮助都是理所应当的。</li>
<li>不要为无谓的事情争吵，乃至口出恶言。人与人的关系坏起来容易，修复起来难。</li>
<li>要言而有信，确实无法信守承诺时，要主动道歉。</li>
<li>不要通过贬低别人来证明自己，也不要因为言辞不当让人以为是在贬低别人。</li>
<li>不要恶意欺骗他人。想想当你被恶意欺骗了，你会什么感觉，就知道恶意欺骗别人能造成多大的伤害。</li>
</ul>
<p><strong>傲气与狂妄的差别</strong></p>
<blockquote>
<p>程序员是需要有点傲气的，一点傲气都没有的程序员往往就会失去对技术的追求并失去对自己的信任。这在技术上是很致命的。</p>
<p>但狂妄则是走向灭亡的前兆，要引起警觉。傲气的人会坚持自己的看法，在没有事实和逻辑支撑时绝不轻易认输；但狂妄的人则会在坚持自己的同时贬低甚至羞辱他人。傲气的人大致知道自己骄傲的边界，能够在工作中找出自己的位置；狂妄的人则眼里只有自己，认为公司的规则、所有的同事都得围着自己转。</p>
<p>一旦一个人由傲气转向狂妄，那必然会人嫌狗不爱，这样一来这个人能创造的价值往往会降低，但他的索取却会因为狂妄而不断增加，这就为未来可能的悲剧打下了伏笔。</p>
</blockquote>
<h4 id="有条件的顺应环境"><a href="#有条件的顺应环境" class="headerlink" title="有条件的顺应环境"></a>有条件的顺应环境</h4><p>中国古代的钱币外形是圆的，但中间则是一个方空，这可以是一种很有含义的隐喻。全无个性的人往往是平庸的，但在那里都张扬个性的人往往是痛苦的。因为公司必然有自己的规则和文化，而这种规则和文化并不会因为某个人而突然发生变化。</p>
<p>我们可以强调职业精神，说拿了钱必须干活，个性完全不关键，但只有这个是不够的。这里面必须把握一种限度，在这种限度下，不只要拿了钱干活，还要努力适应选定的公司。而一旦超过这种限度，那则意味着需要尽快离开，而不是继续的抱怨。这时有两个关键点需要被认识到：一是天下间没有完美的公司；一是要知道那类事情需要顺应。</p>
<p><strong>天下没有完美的公司</strong></p>
<p>2012年 CSDN 转过一篇 Facebook 员工对公司的抱怨，其中的几条非常特别：</p>
<ul>
<li>Zuck 的过于关注。既然都成为上市公司了，作为公司的CEO，你主要接头的应该是：投资者、分析师、博学者等。但你仍然和我们这些工程师谈产品的规划和战略！这是彻彻底底的侵吞时间。你忘了你主要的责任是提高公司的股价而不是原材料的加工。</li>
<li>太多的决策由工程师给出。有些决定甚至是一个工程师单独下的，更甚至在午饭中就做出了决定。让缺少公司运作经验的工程师去做这些决定是不是太草率了？！</li>
<li>对于内部员工的过度信任。 </li>
</ul>
<p>我们有理由相信，完全相反的抱怨也绝对存在：</p>
<ul>
<li>CEO 完全不关注技术。</li>
<li>工程师没有决策权。</li>
<li>员工完全不被信任。</li>
</ul>
<p>这充分说明，只要你想抱怨，那就总会有可抱怨的东西。这点起源于人思维的善变以及欲望的无边界特质，实属正常。其实事情并没有那么麻烦。喜欢和不喜欢就像天平的两端，临界点就一个：走还是留。</p>
<p>想走的可以尽情抱怨，自不必说，想留的就要适应某些自己并不喜欢的东西。<strong>而选择留下来却使劲抱怨则是最不明智的选择。</strong></p>
<p>这似乎很消极，但以人生而论，无法改变的，无法抛弃的，就要考虑如何去适应。想象一下，不管你如何生气，地球也不会围着你转。</p>
<p>选择了留下来，却去抱怨完全不可能改变的东西，进而总是认为自己受到了不公正的待遇，总是满腹怨气，这不可能不影响到工作，也不可能不影响到别人眼中的你，所以说这也是一种表达。</p>
<p>这里其实有个陷阱：越是认为自己怀才不遇的，那就越真的会怀才不遇。当然也可能其实才华也只是自己认为的。这点在容在有些知名学校的毕业生身上，体现出来。假设说对应某一个学校有一个大致的就业水平，这似乎会对这个学校的学生产生一种心理暗示，他们就应该在某个水平以上的公司里。一旦进入了低于这个水平的公司，心理先天就会有优越感，可能会想：这个人怎么能来领导我？这么多这么差水平的人每天干的都是什么事？逐渐下来就很容易眼高手低，评价也会走低，反倒是越来越沉底。</p>
<p>认不清这点会很麻烦，但凡是多人聚集在一起地方几乎必然是名利场，而名利场中几乎一定有不堪的地方，公司也不例外。总是期望公司百分百与自己的期望相符会导致所有的公司都可以抱怨，进一步导致工作状态变坏，并对自己造成损伤。当然，接受某些自己不如意的东西也是有底线的，这是下一节的话题。</p>
<p><strong>知道那类事情必须顺应</strong></p>
<p>受到委屈的时候，首先要判定的是环境是否公正，不要因为升职的不是自己而郁闷，更可怕的是升职的人不具备对应的能力——后者说明整体环境有问题，这是更应该引起警觉的事情。</p>
<p>坦诚的讲，大部分人并不具备改变周围环境的能力，而更像行业或者公司历史中的一片尘埃。当一个企业的基因确定，其中所蕴含的力量是无比宏大的，当这个企业并没有突破基本公正的底线时，最优的选择只能是在大多地方进行顺应，而非是消极对抗。</p>
<p><strong>最不应该顺应的东西主要有两个：一个是公司中处处显失公平；一是个人在公司里面完全看不到发挥的机会和未来。</strong>这两点对个人未来是致命的，弄不清楚还不只是适应不适应的问题，而是糊涂不糊涂的问题。</p>
<p>其他的东西则大多是要适应的。不要看很多大人物今天站在台上无限风光，但在取得成绩的路上，几乎每个人都调整过自己来适应周围的环境。</p>
<p>据说杨元庆先生曾经在事业挫折时流泪过，而柳传志先生曾经对杨元庆先生讲：当你真像鸵鸟那么大时，小鸡才会心服。只有赢得这种 “心服”，才具备了在同代人中做核心的条件。</p>
<p>这里隐含的一层意思是，两个公鸡可能一个尾巴长，一个冠子亮，但这时候人们往往无法区分究竟那个更好。选尾巴长的，冠子亮的可能会抱怨；选冠子亮的，尾巴长的可能会抱怨。但这种愤怒是格局不够的一种体现，与其抱怨，不如考虑怎么让自己成为鸵鸟。但恰如前面所说，环境要相对公正。</p>
<p>具体来讲，人不能老等着上司变的开明，变得更英明，这些事很多时候，你改变不了。</p>
<p>你想干个什么事，你得自己做准备，把脏活累活都干了，当然大家看不见这些的，能看见的只有成绩。不能老指望自己动动嘴巴，事情搞定，功劳到手。你得去了解，公司里可能不太好的流程，利害关系人可能有些奇怪的想法，这些都得去理解和摆平。因为换个公司它更可能还是这样子。</p>
<p>你可以讲这太烦了，那也 OK，关键是要能接受平凡的结果。做点事情其实远比想的麻烦，即使是在开明的公司里面，唯有抱怨最容易，但抱怨什么也换不来。</p>
<p>适应环境里有一个极端的情形，也很危险：</p>
<p>很多人可能会认为反正我就赚这么多钱，混混日子也没什么，这也算是彻底适应环境了。但这时候，可能没认识到只要这个状态持续五年，诚然你可能赚到几十万，但失去的却是人生最为黄金时期的五年，一生中所有剩下的时间都可能需要为此而背负债务。在相对公平的环境里主动就是人家跟着你跑，被动就是你跟着别人跑。从长期视角来看，主动去做，错了也是对的；被动做事，对了也是错的。<strong>所以被动混日子是危险的，做事的时候要尽可能主动。</strong></p>
<p>这点之所以需要针对程序员群体专门一提是因为程序的世界里是非比较分明，但公司里不是的，再怎么优秀的公司里，也需要一些模糊区域。如果用看待程序的眼光来看待公司，那就 Bug 太多了，并且很多时候很多 Bug 你还不能修，还得假设它是对的，并顺应它，简直是岂有此理，但这也确实是一种现实的规则，无论喜欢不喜欢，都要学会给予它一定的尊重。如果你真的很长情，很有理想，那不妨耐心等待，直到有足够力量把你不喜欢的击个粉碎。当然这不意味着，有意见不能提，而是说提了意见没被采纳，大多时候实属正常。</p>
<p><strong>遭遇可怕的上司怎么办？</strong></p>
<blockquote>
<p>很久以前看过慕名看过杰克韦尔奇写的《赢》，可能是自己记忆力不太好，书里说过什么大多是很快忘记了，但其中记录的一件小事却记得特别清楚。</p>
<p>杰克韦尔奇在书里说，2004年在中国的时候，听众中一个年轻女性流着泪问到，“在只有老板才有发言权” 的情况下，又有哪个商业人士能够实践坦诚精神和推行区别考评制度呢？我们这些在基层工作的人们有非常多的想法。但很多人甚至想都不敢想能把它们讲出来，除非自己成为老板。”</p>
<p>我之所以记得这个片段，倒不是因为问题本身，而是因为一个人会在公众场合哭着发言——这必然是因为心里累积太多的压力。这也让我私下猜测，想必是我们的商业环境里有很多特别之处。</p>
<p>这种特别之处往往会让我们以更大的频度遭遇一个麻烦的问题：真遇到一个可怕的上司，程序员该怎么办？</p>
<p>在细说这个问题前，首先还是要再强调一下选择权。选择权是博弈的基础，而上一章里提到的自身价值则是选择权的基础。这点虽然在后续章节里不会总强调，但他明显比其他因素有更高的权重。</p>
<p>如果真的遭遇了可怕的上司，并感觉遭遇了不公正的待遇。首先倒不是去和他吵一架，而后辞职，而是要先反省下，看看问题是不是出在自己身上，或者说自己究竟有多大责任。</p>
<p>培根说：聪明者反省自身，愚蠢者欺惑大众，还是很智慧的。</p>
<p>这里可能的原因就太多了。</p>
<p>可能是价值观的冲突，你的上司并非只是针对你而是有自己的是非标准和行事原则，找你麻烦只是因为你的价值观和他的不一样。这种时候如果工作本身没问题，可能需要考虑适应，因为你换个工作可能还有问题。</p>
<p>可能是你年少轻狂做人失误，在很多场合对上司过于藐视。要是这种，要看看能不能修补。毕竟如果当前工作很适合自己，并不适合因为意气之争而换工作。</p>
<p>也可能真是上司纯属个人瞧你不顺眼（因为内斗等）或者他自己过于古怪，这种大致没办法，要考虑尽快换个地方。</p>
</blockquote>
<h4 id="去除致命的坏习惯"><a href="#去除致命的坏习惯" class="headerlink" title="去除致命的坏习惯"></a>去除致命的坏习惯</h4><p>谈习惯的书很多，但基本上是在告诉你，什么样的习惯更好。但在考虑改善表达力时，却要做逆向思维，在这里认清什么样的习惯更差是更加关键问题。很少有人会期望程序员八面玲珑，因此很多程序员的习惯都是可接受的，那么不可容忍的到底是什么？</p>
<p>我们来看一个每天都会发生的例子：</p>
<blockquote>
<p>A 是一名程序员，每当他宣称自己的工作完成时，你总是能在他的代码或者文档中发现缺陷。比如：代码中不遵守大家约定好的编码规范，使用文件时可能会使用绝对路径并导致基本测试无法通过，文档中记录错操作系统的名字等。</p>
</blockquote>
<p>想象一下，长久下来 A 身上会发生么？很简单，他会逐渐失去周围人的信任，也许 A 的能力并不差，能解决比较复杂的问题，但是做程序的时候，有这样的队友也还是很可怕的。</p>
<p>这类问题并不涉及高深的知识，基本上是因为习惯不好而导致的。这类习惯里充满了负能量，会让周围的人倾向于看低你。会导致下面两种结果的习惯等价于职场上的核弹，如果你有，没准那天会被他们炸的粉身碎骨。</p>
<p>一是忽视细节，这会导致别人认为你不具备做事能力。一是负不起责任，这会导致别人认为你不用心做事。“能力不足” 和 “态度不好” 这两顶帽子只要带上一个，个人前景立刻会变的非常暗淡。</p>
<ul>
<li><p><strong>关于忽视细节</strong></p>
<p>有的人工作习惯比较好，做的时候稳扎稳打，自己做完会做双重检查，表现出来的结果就是工作的一次成型能力强。与之相反，有的人则做事的时候分心，做完之后不做自我检查，表现出来的结果就是小错误很多，在文档上可能就表现为拼写错误，版本号不对，字体混乱等等。总之，让人感觉就是个半成品。能够一次成型其实是一种很关键，也很被看重的能力，而要想保证这个，只能在小习惯上下功夫。</p>
</li>
<li><p><strong>关于推卸责任</strong></p>
<p>写程序的时候给自己的问题找借口特别容易，因为纯粹的像 <code>int add(int i, int j)&#123; return i+j;&#125;</code> 这类代码特别少，总是要用一点别人的东西，因此总是可以在别人的身上找到借口。可以抱怨开源的文档少，可以抱怨微软代码不公开，诸如此类。但其实这一点意义也没有，只会让人认为对工作负不起责任。</p>
</li>
</ul>
<p>上述这两类不良习惯中蕴含着巨大的负能量，是每个人要用心规避的。如果说一个人的天分、才华、知识、能力都像水一样，那么上述这两个坏习惯就像漏勺，不知不觉中就拉低了你可以达到的高度。</p>
<h2 id="程序员生存定律——借势的价值与力量"><a href="#程序员生存定律——借势的价值与力量" class="headerlink" title="程序员生存定律——借势的价值与力量"></a>程序员生存定律——借势的价值与力量</h2><p>取他人、他物所长，为我所用的这一面，始终有着不可忽视的价值。在大约2300年前，荀子对此进行了很好的说明：</p>
<blockquote>
<p>吾尝终日而思矣，不如须臾之所学也。吾尝跂而望矣，不如登高之博见也。登高而招，臂非加长也，而见者远；顺风而呼，声非加疾也，而闻者彰。假舆马者，非利足也，而致千里；假舟楫者，非能水也，而绝江河。君子生非异也，善假于物也。</p>
<p>——引自《荀子·劝学》</p>
</blockquote>
<p>借势这事儿其实很微妙，既可以认为是自我增值的一个子项，也可以认为是表达力的一个子项，但这里把它归结为表达力的子项，因为它直接影响一个人在他人眼里的高度。</p>
<h3 id="借势的价值"><a href="#借势的价值" class="headerlink" title="借势的价值"></a>借势的价值</h3><p>从易中天老师在百家讲坛开讲《品三国》以来，三国又重新热了起来。而提到三国，最不能忽略的环节大概就是三顾茅庐和隆中对。</p>
<p>隆中对里讲：</p>
<blockquote>
<p>自董卓以来，豪杰并起，跨州连郡者不可胜数。曹操比于袁绍，则名微而众寡，然操遂能克绍，以弱为强者，非惟天时，抑亦人谋也。今操已拥百万之众，挟天子而令诸侯，此诚不可与争锋。孙权据有江东，已历三世，国险而民附，贤能为之用，此可以为援而不可图也。荆州北据汉、沔，利尽南海，东连吴会，西通巴、蜀，此用武之国，而其主不能守，此殆天所以资将军，将军岂有意乎？益州险塞，沃野千里，天府之土，高祖因之以成帝业。刘璋暗弱，张鲁在北，民殷国富而不知存恤，智能之士思得明君。将军既帝室之胄，信义著于四海，总揽英雄，思贤如渴，若跨有荆、益，保其岩阻，西和诸戎，南抚夷越，外结好孙权，内修政理；天下有变，则命一上将将荆州之军以向宛、洛，将军身率益州之众出于秦川，百姓孰敢不箪食壶浆以迎将军者乎？诚如是，则霸业可成，汉室可兴矣。</p>
</blockquote>
<p>这是非常经典的天时、地利、人和分析法。</p>
<p>曹操得天时，气候已成无法与之争锋；孙权是国险而民附，可以说是即得地利也得人和，因此可以为援而不可图；那么刘备自己就要充分利用这三者为自己谋得优势，出路即是把握时机，谋得荆州、益州，而后通过帝室之胄，信义著于四海扩大人和优势，蓄积力量并进一步等待时机，最终成就霸业。</p>
<p>从这里我们可以清晰的看到，天时、地利、人和皆是借势，是巩固或达成目的的手段，其中差异不过是借的对象不同。</p>
<p>从时运借来的势即是天时。所谓天下大势浩浩汤汤，顺之者盛逆之则亡；时来天地皆同力，运去英雄不自由，说的都是天时的力量。曹操把握时机趁着诸侯混战而坐大，那么对刘备而言最大的天时其实已经没有了。</p>
<p>从地理格局借来的势即是地利。《过秦论》提到的崤函之固和上文提到的国险而民附等皆是此类。现代的地缘政治仍是和这一维度紧密相关。</p>
<p>从人借来的势即是人和。隆中对里的内修政理，总揽英雄，乃至成语众志成城等描述的则是人和的力量。所有这些借来的力量加诸到一个人的身上后，就形成了一种力量，表征着一个人的实力。单只是曹操、孙权一个人再厉害又能厉害到那里去。</p>
<p>借势之所以有价值，其根本原因在于人的能力更大程度上体现为均一性。抽象来看，不同的人能力差异一定是有，但远达不到孙悟空和人类这种地步。这样的话，一个人借到东西的多少，往往对一个人表现出来的力量有根本性影响。</p>
<p>孙悟空看到小妖时，可以一棒子打死，碰到猪悟能也可以几个回合搞定，但碰到金翅大鹏，单靠自己就搞不定了，借不借得到其他力量就成为能不能过关的关键。</p>
<p>能借势无论对管理方向的程序员和技术方向上的程序员都是非常关键的一种表达力，但不同方向上借势的对象不一样。</p>
<ul>
<li>对于技术方向上的程序员，借势体现为<strong>善用各种框架和工具</strong>；</li>
<li>对于管理方向上的程序员，借势则体现为<strong>团队建设和团队协同作战的能力</strong>。</li>
</ul>
<p><strong>借势的一个小技巧</strong></p>
<blockquote>
<p>由于古装剧的兴盛，我们经常会看到皇帝顶着满是珠子的帽子出现在电视里，心里俏皮的人估计会想，带那么个东西能舒服么，看人还看不清楚。</p>
<p>这还真就猜对了，给帽子上装个帘子的目的就是提醒皇帝看人不要看太清楚。人天生就是有问题的，你总看人毛病，周围哪还有可用之人。偶尔糊涂一点，叫“明有所不见，聪有所不闻”，是一种政治智慧。</p>
<p>这对现实的启示意义是，你要想借势，那就要在很多时候糊涂一点，包容一点，总是心思太细，眼睛太亮，那就很容易与所有人疏离。</p>
<p>但这反过来什么事情都糊里糊涂也还是不行。郑板桥写难得糊涂，那是风雅，因为他一辈子聪明。一般人写难得糊涂那就是真糊涂，因为大多数本来就糊涂，一点也不难得。</p>
</blockquote>
<h3 id="借势的具体方法"><a href="#借势的具体方法" class="headerlink" title="借势的具体方法"></a>借势的具体方法</h3><p>落到具体的个人成长上面，谋求加入处在高速发展期的公司是择时，比如：创业初期加入公司和稳定发展期加入公司，后面的成长一定会不同。</p>
<p>考察工作地点对个人发展的影响则是导入地利，比如：二级城市和北上广的可能发展路径明显不同。</p>
<p>上述两点将在第七章进行展开，这里关注的主要是在人和以及技术层面如何借势。管理方向的程序员主要要考察前者，技术方向的则两者都要考虑。</p>
<h4 id="人和层面的借势"><a href="#人和层面的借势" class="headerlink" title="人和层面的借势"></a>人和层面的借势</h4><p>人和层面的借势可以分为两类：一类是处理与自己直接接触的人的关系；另一类是处理不直接接触，但通过社交网络可以接触到的人的关系。</p>
<p><strong>（1）直接接触人群中的借势</strong></p>
<p>程序员这个群体并不复杂，人们更愿意按照朴素的规则进行做事，比如：你很牛，我就很尊重你，我也就更愿意和你一起做事。所以对同级和平级的人员而言，借势的基本前提是要让自己有一定高度。但这里有个小陷阱，需要引起注意。程序员大多性格比较简单直接，也不厚黑，但软件本身不确定项很多，也估不太准，因此大多时候讨论很多，争议很多，这个时候不能表现的像个刺猬，一旦有不同意见，容易激动或者争吵。这很容易把四周的人推开，即使你能力很强，一旦如此就成了孤家寡人，什么也借不到了。</p>
<p>对上级而言，要形成的印象也很简单，最基础的是这个人靠谱。优秀与否往往只能靠事实说话，而是不是靠谱，这完全是可以掌控的。比如：言而无信要远比坦承搞不定负面影响大。</p>
<p>一旦正式拥有自己的团队了，那就要时刻提醒自己：有借有还，再借不难。<strong>产品和项目可以是第一目标，但除此之外就要尽一切可能为团队成员谋求利益。</strong>其中最关键的则是为他人谋求发展和进步的机会。这点上也许有的时候能做的有限，但你有没有用心去做，其实还是很容易看出来的。判断标准很简单，如果同等条件下或者收入略有增幅很多人愿意和你一起换个公司，那么在这点上就非常成功了。</p>
<p>最后说一点有点玄的东西。在特定的生态中，人的行为往往具有必然性，除非特别异常的个体。想象一下，假如说一个公司以 Bug 率为考核指标，那么要么开发与 QA 人员十之八九会激烈对抗。而一旦官僚，那么必然对客户反映迟缓。因此一个人如果能掌握这种规律，那在借势中将会更加顺风顺水。</p>
<p>为了达成这一点，需要看一点组织行为学的书，但只有组织行为学也是不够的，还需要冷静的做些分析才行。</p>
<p><strong>（2）社交媒体中的借势</strong></p>
<p>在曹操生活的年代里，有一项非常有人气的活动：找品评家给自己下批语。著名的 “治世之能臣，乱世之奸雄。” 之评就是这么来的。当年曹操找到了当时的著名品评家许劭，希望许劭给他下评语。</p>
<p>许劭最初鄙视他比较奸诈，并不愿意评价他，可是曹操找到可乘之机对许劭进行威胁，最终无奈之下，许劭才给出了：君清平之奸贼，乱世之英雄。 据说曹操听完这个之后是大悦而去。而这一评价不知道怎么就变成了 “治世之能臣，乱世之奸雄。”。</p>
<p>这个风气至少持续到了唐朝，李白为求赏识，还曾经做了一篇流传千古的《与韩荆州书》，说：生不愿封万户侯，但愿一识韩荆州。</p>
<p>上述几件事情虽然跨越千年，但折射的东西却本质相同，都是风评对一个人的影响。在现实之中这种力量同样非常巨大，但因其引而不发，往往会被忽视。</p>
<p>庞果网 CEO 李炯明在接受 CSDN 专访时谈到了这样一种现象：</p>
<blockquote>
<p>中国知名的 IT 企业，例如腾讯、百度、阿里巴巴、盛大等，每年社会招聘中有30%~45%来自 “内部员工推荐”；而根据我们对2000名专业人士的调查，46%的被调查对象说他们“最近这份工作”是通过朋友或者相关人士引荐获得的。</p>
</blockquote>
<p>李炯明先生说的这个数据与下面这样的一般调查的结果并不吻合，图上招聘网站是54%，朋友介绍是18%左右，我私下猜测可能待获取职位所需经验与能力越高，引荐起的作用越大。但不管从那个数据看，引荐自身已经成为一种比较关键的换工作途径是一种没什么争议的事实。</p>
<p><a href="http://www.csdn.net/article/2013-04-16/2814909">http://www.csdn.net/article/2013-04-16/2814909</a></p>
<p>这应该可以从侧面说明风评对一个人表达自己能力的巨大影响：同样能力的人，一个在社交网络中获得了较大的认可，一个处于封闭的环境中，那么无疑的前者会有更好的成长空间。</p>
<p>这也是一种借势并表达自己的方法。特别是当一个人年纪逐渐变大的时候，如果没有办法从社交网络中借势，那么被埋没的可能性就非常的大，除非你牛到了所有人都需要仰视的地步。<strong>而为了从社交网络中借势，博客、写书、参加各种线上线下的活动、参加定期活动的协会都是比较有效的手段。</strong></p>
<p>当然这事上不适合急功近利，而适合逐步去做，否则就容易成为为求成名不择手段的怪人。<strong>种种行动的根本目的还是为了比较顺畅的把自己的实力展示出来让更多人知道，而非是营造原本就不存在的东西，所以最终能否取得关注和自身实力还是有本质关联的。</strong></p>
<h4 id="技术上的借势"><a href="#技术上的借势" class="headerlink" title="技术上的借势"></a>技术上的借势</h4><p>2012年的时候 Facebook 花10亿美元买下了照片共享应用服务商 Instagram 公司。这事在当时引起了非常大的轰动。这事之所以引起极大关注，其关键点在于后者只有10几个员工。10几个员工支撑起10亿美元的价值，这绝对是让人震惊的事情。</p>
<p>做个简单的比较就可以知道这个差距有多大。</p>
<p>假设一个公司是做外包的，非常厉害，人月单价有4万 RMB。同时这个公司包括支持人员在内有500人，公司里每个人月都可以换成收入，那么这个公司一年的收入大概是 4000 万美元，而 Instagram 用10几个人达成10亿美元价值只用了差不多2年。两家公司中，单人一年创造价值的比率是500万倍。</p>
<p>关于 Instagram 如何成功想必有很多细节，但从公开报道来看，技术上的完美借势是很关键的一个原因。这从其开发团队所遵循的原则就可以看出来： </p>
<ul>
<li>Keep it very simple（极简主义）；</li>
<li>Don’t re-invent the wheel （不重复发明轮子）；</li>
<li>With proven and solid technologies when you can （能用就用靠谱的技术）； </li>
</ul>
<p>两个技术水平差不多的人，一个信奉什么都从头造，一个信奉尽可能用现有靠得住的技术，那么无疑的从“表现力”的角度看，后者占优。</p>
<p>在各种平台和框架不断涌现出来的今天，善在技术上借势，那么确实可以用很少的人开创出比较大的事业。想象一下，架设网站可以用云平台而不用自己购入机器，分析大数据可以用 Hadoop 这样成熟框架而不用从头来写，只要专注在商业模式，就可以开创自己的事业，这相比以前什么都要自己做的年代确实是不知进步了多少。当然这样也有坏处，就是技术壁垒不可能太高，你能做他也能做，这反过来要求盈利模式、专利等上面要能架起壁垒来保护自己。</p>
<h2 id="程序员生存定律——打造属于自己的稀缺性"><a href="#程序员生存定律——打造属于自己的稀缺性" class="headerlink" title="程序员生存定律——打造属于自己的稀缺性"></a>程序员生存定律——打造属于自己的稀缺性</h2><p>假设说你想在江湖里谋求一定的地位，那么你可以练习独孤九剑成为超一流高手，也可以练习医术，成为绝世神医。这两者在江湖里都是有地位的，也都是稀缺的，一者是因为杀伤力，二者是因为人都有山高水长。</p>
<p>程序员也一样，增值也好，改善表达力也好，最终都要在某种环境下达成一定的稀缺性，这样一个人才有价值。稀缺性同时受两个维度上的力量影响：一个是自身的努力，比如前文所提到的增值和表达力；一个是大环境的变化以及对这种变化的适应。在这一章里主要关注的是后者。</p>
<h3 id="稀缺性可带给你什么"><a href="#稀缺性可带给你什么" class="headerlink" title="稀缺性可带给你什么"></a>稀缺性可带给你什么</h3><p>既然稀缺性对个人有如此大的影响，那稀缺性到底可以带给一个人什么样的影响，我们来看一个简单的例子：</p>
<blockquote>
<p>在日本曾经有这样一个故事。一个人在某电信公司负责一个大型系统的维护，收入虽然不菲，但时间一长，这个人就对薪资发展不太满意，因此最终选择了离开。结果他一离开，这大型系统立时跑的磕磕绊绊，无奈之下，这家电信公司只得以高职厚薪把这个人请了回来。可以想见为了达到这一目的，这家电信公司，无论在收入还是职位上必然都开出了让这个人无法拒绝的条件。</p>
</blockquote>
<p>这是稀缺性起作用的一个典型例子。大型系统因为关联到庞大的用户群体而必须要用，同时这一系统的维护没有这个人又不行，这就使这个人的稀缺性变得非常突出。 </p>
<p>这事其实很有意思，因为在这里事实上是不好的软件成就了一个人的价值和稀缺性。这虽然不是很好，但其实这类情形并不罕见。从市场的角度来看，它并不关注一个程序的内部逻辑是否清晰，是否有足够的注释，它只关注这东西能不能运作好。所以使用中的垃圾代码一样有巨大的价值，也就是说商业上的考量对稀缺性的影响更大。</p>
<p>为防止上述文字被曲解，这里补充一点说明。上述道路并非是一条非常值得模仿的道路。因为对上述那个人而言，事实上他的价值绑定于特定的一套系统，这会导致可流动性几乎没有，这就会限制住一个人的成就，并使未来存在很大风险。</p>
<h3 id="改善稀缺性的途径"><a href="#改善稀缺性的途径" class="headerlink" title="改善稀缺性的途径"></a>改善稀缺性的途径</h3><p>为了改善自己的稀缺性，通常需要同时做两个方面的工作：一是提升自己；一是顺应时势。提升自己可以让自己稀缺这点很好理解，但如果没有顺应时势相配合，就很容易让这种稀缺性无法很好的实现。在2013年精通 DOS 编程的人无疑是稀缺的，可这不一定能产生价值。下面我们将从上述两个方面对稀缺性做一点说明。</p>
<h4 id="奔向程序世界里的价值高地"><a href="#奔向程序世界里的价值高地" class="headerlink" title="奔向程序世界里的价值高地"></a>奔向程序世界里的价值高地</h4><p>投资大师巴菲特先生说过一句流传很广的话：有的企业有高耸的护城河，河里头还有凶猛的鳄鱼、海盗与鲨鱼守护着，这才是你应该投资的企业。这句话非常传神的描述了价值高地的外在形象。</p>
<p>对于企业而言，护城河可以是很多东西：高难的技术（波音飞机）、难以攻破的用户粘度（QQ）、独占的资源（中石油）、独特的企业文化（苹果）等等。</p>
<p>护城河使企业拥有一种无可取代的价值，从供给上看这就是营造企业自身价值的稀缺性：缺了它不行，你又没有更多选择。这就是价值高地，当企业在这上面时，他相对安全。也正因此，大公司最终都会试图主导一种秩序与生态系统，只有如此大公司才能掌控稀缺性。</p>
<p>这道理同样适用于个人。稀缺本身可以有很多来源，可以来源于时机，也可以来源于高度。来源于时机的稀缺性更像一种偶然，很容易被打破，往往并不具备长久的价值，相对于人的一生而言，这并非是一种有力支撑。比如：Erlang 可能比较稀少，但单纯的语言壁垒并没有想的那么高，如果真的有巨大需求，这个世界上可以在一个月间多出几百万 Erlang 程序员。</p>
<p>当一个人经营自己的稀缺性时，确实要找到一个有鳄鱼、海盗和鲨鱼守护的地方，这才是价值高地。当然鳄鱼之类很难是你放的，这与企业不同。在这点上管理方向上和技术方向上的程序员所面临的选择和所需要采取的措施不同。</p>
<p>对于技术方向上的程序员而言，走向上述这类价值高地本身可以有两种方法：</p>
<ul>
<li>一是达到一定高度横向展开。比如：编程语言，（金融）业务逻辑，外语，网络知识等组合在一起就可以成为一个高地，这里面编程语言上一个人可能不如天才程序员，业务逻辑上可能不如银行员工，外语可能不如专职翻译，但每多一重过滤，就会导致高地的海拔拔高一分，最终转换为稀缺性。</li>
<li>一是彻底的专家型道路。有的岗位可能不需要把面扩的很宽，比如做 TTS，OCR 的算法，有些人甚至编程语言都可能不是了解的很熟，但确实可以是某一方面的专家。这同样是一种价值高地。在这个方向上，一旦真的达到一定高度，那就不是单纯的累积数量可以超越的。比如：认为100个或多少个平庸的科学家等价于一个爱因斯坦无疑的是愚蠢的。</li>
</ul>
<p>不管是那种方向，最终都要达成这样一种效果：你可以完整的搞定一件很有商业价值的事情，而这件事情大多数人搞不定。比如说：</p>
<ul>
<li>我可以主导开发一款手机，因为我即懂软件又懂硬件，也还知道如果开发一款良好的产品。现在来看，如果真牛，可以去搞定锤子的问题。</li>
<li>我可以把 OCR 的识别率提高1%。</li>
<li>我可以主导架起百万级并发的网站。</li>
<li>我可以带领队伍搞定这个银行的整个系统。</li>
<li>……</li>
</ul>
<p>这个时候最好不要用单纯的技术观点来衡量自己，比如我擅长 Java，我会用 PHP，我知道 TCP/IP 协议等等。不是说这没有价值，而是说这种视角有点低端。只有能完整搞定一件事情才会与商业利益直接挂钩，才可能有真正的稀缺性。</p>
<p>对于管理方向上的程序员，走向上述这类价值高地似乎只有一种途径：</p>
<p>要努力做出让人记得住的成绩，这个成绩可以是一个产品，也可以是某种业绩。今时今日，提到微信相信大家都会想到张小龙。这是因为微信本身在不到两年的时间里吸引了2亿用户，并且口碑很好，实在是个奇迹。</p>
<p>关于价值高地，有一个典型的陷阱：不含复杂度的，特属于某个公司的经验，往往让人误以为是价值高地，但其实不是，因为只要环境相对的公开，这类东西往往可以在短时间内被攻破。比如：一个公司可能定义了自己的流程，其中很多东西较为模糊，新人一做就处处碰壁。这很容易让然误解为掌握流程本身有较高的价值，但其实这是由于流程不完善所造成的，是特定场景下的一种偶然。这确实导致稀缺性，但基本不具备可流动性，大多时候未必是好的选择。</p>
<p><strong>需求开发算价值高地么？</strong></p>
<blockquote>
<p>在偏敏捷的组织里程序员往往离需求很近，但在比较传统的开发方法中，做需求的和程序员往往是有段距离的。做需求开发的可能不太会写程序，写程序的不太会写需求。</p>
<p>那需求开发算价值高地么？</p>
<p>很多纯粹的程序员可能觉得单纯的文档工作没什么技术含量，似乎谁都能写，因此可能认为这算不上什么价值高地。但从商业价值来看，当一个人摸透某个行业的业务（懂技术更好），那么这还真是价值高地。</p>
<p>这可以来做个类比，天猫只做平台，各个商家卖东西，那么天猫有价值么？当然有价值，天猫11/11的销售额100多亿比美国的黑色星期五还高，怎么可能没有价值。</p>
<p>那为什么天猫有价值？因为终端客户的眼里是先有天猫，再有各个商家，天猫垄断了入口，所以天猫更有价值。</p>
<p>需求与开发的关系与此类似。当一个人做某个产品的需求时，在外人的眼里，这个人做的需求才表征着这个产品，透过产品才能看到程序员的贡献。外部人员思考的思路是先需求开发人员再程序员。</p>
<p>其中比较极端的一种实践是需求开发人员主导整个项目，所有其他人员在需求开发人员的领导下工作。</p>
<p>这个时候钻牛角尖是没意义的，比如：有的人可能认为没程序员哪有产品，这就和争论没店家那来天猫一样，毫无意义。在现实中当然两者都有存在价值，这里讨论的只是说这是否算是一块价值高地。</p>
</blockquote>
<h4 id="走在技术大潮的前面或里面"><a href="#走在技术大潮的前面或里面" class="headerlink" title="走在技术大潮的前面或里面"></a>走在技术大潮的前面或里面</h4><p>IT 世界里，城头变幻大王旗来的特别的快，而每一次变幻时事实上都将导致某种技术的兴起或者某种技术的衰落。</p>
<p>当年 WPS97 的开发时间非常长，对此百度百科上对此的描述是：Windows 有很多新东西，我们还没有熟悉过来，微软又升级了。很多技术资料，也很难找到。微软掌握着 Windows，而我们什么都要靠自己从头做起，这导致了 WPS97 难产。如果 WPS97 能在1995年推出，直接和 Word6.0 竞争，Word6.0 肯定没戏。</p>
<p>这很生动的记述了一门新技术兴起时所造成的稀缺性，从侧面也可看出来，在95年的时候企业对高端 Windows 开发人员是何等的渴望。这种稀缺性是行业周期背后的技术更迭所造成的。而在今天，借助搜索引擎，初入行的程序员也可以解决大部分 Windows 编程的问题。</p>
<p>面对这种技术潮流，比较合适的办法是基于现实勇敢拥抱新技术。</p>
<p>基于现实是指考虑技能的可流动性，考虑实践和学习的不可以分离特质，选择自己认为前景好的新技术，并投入时间。但这里面有个陷阱，一提到新技术很多人可能会联想到新编程语言，但编程语言太基础了，壁垒太低，并不是一个足够大的考量区域。视角如果限在这个尺度上，看到的东西就会太多，而不容易聚焦，这时候需要把自己考量的单位适当放大一点，英文中常用 Tech Stack 这个词来描述这一组技术。</p>
<p>比如说：LAMP（Linux + Apache + MySQL + Perl/PHP/Python）可以是一种考量单位，Windows 编程 + ASP.NET 也可以是一种考量单位，大数据处理相关种种也可以是一种考量单位。</p>
<p>如果回望十年，我们就会发现，先有 PC 客户端程序的鼎盛，接下来是互联网的兴起，再接下来则是移动客户端的兴旺。以当下而论，无疑的移动客户端和互联网要比传统的 PC 客户端来的更有吸引力。而在云的时代里，壁垒比较分明的两套 Tech Stack 则是基于闭源的一系列技术（主要是由微软提供）和基于开源的一系列技术。在这里面如果那个 Tech Stack 的技术逐渐取得优势，那么无疑的在相应的 Tech Stack 中有积累的人会有比较好的稀缺性。</p>
<p>虽然眼下看来，两者似乎没有明显差别，但在这点上，我个人认为未来开源 Tech Stack 会逐渐取得优势。在Quora（quora.com）和 High Scalability（highscalability.com）上，我们可以查找到国外大部分新兴的、市值超过10亿美元 Web2.0 网站的技术架构，如：Flickr，Pinterest，Instagram 等。如果用心来读这些技术架构，就会发现他们一个根本的共同点：<strong>他们都是基于开源技术构建的</strong>。</p>
<p>这种不约而同的选择背后有一定的必然性。当希望一定的定制性并且不愿意支付高额成本时开源 Tech Stack 几乎是一种唯一的选择，尤其是当开源的技术有越来越多成功实例的时候，这种优势就越来越明显。</p>
<p>如果非要在客户端（iOS，Android，WinRT）和互联网中选择，我个人认为互联网比客户端更有优势。</p>
<p><strong>技术落潮所伴随的风险</strong></p>
<blockquote>
<p>很多人会讲微软在2002到2012这10年里几乎无所作为，也会谈论从股票上来看如果10年前买入的是微软股票那么现在只能赚30~40%，而如果是买的苹果股票那就要赚3倍多。我个人偶尔思维发散，想到的却不只是这个，而是如果微软再失去10年，那挂掉的不只是微软，还有同微软绑在一起的各种公司和个人，包括很多资深的 Windows 程序员。</p>
<p>在 PC 的世界里微软是无疑的霸主，但如果 PC 的时代过去了，那么这个霸主如果无法转型成功，那么无疑也要随之殉葬。而那个时候无数在微软平台上花了半生心血的人却还都在，他们又该何去何从？</p>
<p>技术大潮的兴起会使潮头的很多人称为耀眼的明星，而某波潮水的退去，同样会带走与之相伴的一些人的光环。所不同的是前者轰轰烈烈，而后者寂寂无声。</p>
<p>在这种情境下，还真就只能与时俱进。</p>
</blockquote>
<h3 id="检查自己的稀缺性"><a href="#检查自己的稀缺性" class="headerlink" title="检查自己的稀缺性"></a>检查自己的稀缺性</h3><p>从社会需要的角度检查自己的稀缺性非常困难，因为相关的各种数据总是非常缺乏。但有个简单的方法可以很快的让一个人认清自己的稀缺性：假设一个毕业生很努力的学，那么多久他可以取代你的工作？比如一个毕业生只要努力，那么可以在一两年取代你，而你的年纪已经接近30岁，那么稀缺性必然非常不好。</p>
<p>而与这个相反，如果一个毕业生即使很努力，也要五年才有你的技术水平，同时如果没有特定的机缘，怎么也无法取代你，那么即使你已经30岁，你的稀缺性也会非常好。这里的机缘可以是指某些特别的实践机会。</p>
<p>如果想比较系统的评估自己的稀缺性，那么需要依次考虑如下问题：</p>
<p><strong>自己所掌握的技术是即将过时的技术么？</strong></p>
<blockquote>
<p>技术大潮总是会定时的淘汰各种技术，不同的时间点淘汰的对象也不太相同。有的虽然不是完全淘汰，但至少他们不再像当年那么辉煌了，如果以2013为界限而回看10年，那这样的技术有：Flash，MFC，Delphi等。</p>
<p>为保持对技术动向的敏感度，定期阅读别人的架构非常关键。</p>
<p>当然可能过时的技术不单指通用的技术，还指老旧的可能会为新解决方案所替代的系统。比如说：曾经很多公司使用 Lotus Notes 来做知识管理的，但很少人使用这样的系统了。</p>
</blockquote>
<p><strong>自己所掌握的技能究竟有多少人会？</strong></p>
<blockquote>
<p>考察这点时要像前文所描述的，更多的从公司的视角去考虑，而不是个人的视角。单纯的会使用某个语言或者框架这种程度，稀缺性一定没有。比如：单纯的会用 ASP.net 开发网页几乎没有较高的技术壁垒，但对数据库的设计有相当程度的掌握、能够较好的通过负载均衡、缓存等手段保证系统的性能就可以使自己的稀缺性上个台阶。</p>
</blockquote>
<h2 id="程序员生存定律——选公司前要干的事：分类"><a href="#程序员生存定律——选公司前要干的事：分类" class="headerlink" title="程序员生存定律——选公司前要干的事：分类"></a>程序员生存定律——选公司前要干的事：分类</h2><p>前讲到了自身价值、自身价值上的表达力和稀缺性，这三项更多地讲的是个人，在职场中无疑的与个人直接关联的是公司。这一章将具体说明与公司相关的、影响个人发展的要素。</p>
<p>在武侠的世界里，帮派本身借助了个人的力量而成其威名，但反过来个人却又因为帮派的力量而被烘托的更高。如果我们把公司类比为帮派，把程序员类比为一众江湖人士，那么帮派和成员间这种异化、同化的过程就几乎在每一个程序员的身上都可以看到。</p>
<p>牛顿说过一句广为流传的话：如果说我比别人看得更远些，那是因为我站在了巨人的肩上。选择在什么样的公司里工作，几乎等价于选择站在什么人的肩膀上。再形象点讲就是选错了公司等价于输在起跑线上。</p>
<p><strong>公司提供的岗位决定了你所接触的技术、人物，进一步决定了你的眼界、能力和人脉，也一定程度上决定了你履历的价值。这些都是对一个人至关重要的东西。</strong></p>
<p>假设说一个人在大学里非常的优秀，以较高的薪资加入了一家做生僻技术的公司，5年后，这家公司倒闭了，这时候这个人可能会陷入困境，甚至变得不如很多大学里成绩比他差很多的人。这类事情往往并不是因为个人不努力，往往是因为选择不慎而把自己给憋到死角里了。</p>
<p>每个人要想争得选择权往往并不容易，大学四年的努力挣来的选择权却可能在一时不慎下毁于一旦。这种选择往往很难很精确，但有几个基本项目还是可以考察的。这些项目将在下面各节里逐步展开。</p>
<h3 id="给公司分类"><a href="#给公司分类" class="headerlink" title="给公司分类"></a>给公司分类</h3><p>公司是一个含混的词，要想弄清楚公司对人生的影响，那么先要给公司分类。一说到分类大多数人可能首先会想到好公司或者坏公司，但其实这是分类的结果，在好和坏背后往往都有着一打的因素来支撑一个公司是好还是坏。不了解这些背后的因素，单纯根据一个笼统的好或坏实际上是很难判定一个公司是不是适合自己的。</p>
<p><strong>分类的方法</strong></p>
<p>一个人要想做对选择，一要有选择权，二则要了解待选项。在这里待选项就是公司的类别。可以有非常多的视角对公司进行分类，这里主要列举和职业发展紧密相关的几个。</p>
<ul>
<li><p><strong>分工所处位置的视角</strong></p>
<p>帮派间是有食物链的，比如东方不败的魔教就凌驾在黄河帮之上。还不用东方不败或任我行这种大头目出来，只是盈盈就可以让这些帮派鞍前马后了。 </p>
<p>类似的关系也存在于公司与公司之间，但这时这种关系则是有产业分工时公司所处的位置所决定的。即使我们不用心去做非常详细的调查，也可以看到 iPhone 生产背后的三层结构：苹果 + 富士康 + 元器件供应商。</p>
<p>这种链条的一个根本特征是上游的企业人少但分享的利润更高，当然其承担的创新风险也更大。</p>
<p>在这里无意对这种分工模式是否合理进行更多的探讨，想强调的则是，这是影响个人工作和发展的一个很重要的维度，不考察是对自己不负责任的。</p>
<p>商业社会中的公司所处的位置可以做简单理解：筹码多的，控制权、发言权大的在上端。比如：付钱的在上端，靠别人给钱的在下端。垄断的或接近于垄断的在上端，被垄断的在下端。比如说：公司 A 把业务分包了给公司 B，那么公司 A 在食物链的上端，公司 B 则在下端。比如说：公司 G 直接面向客户，占有了市场份额 60%，其他公司分享其他的 40%，那么 G 在上端，其他公司在下端。在这个视角下可以把公司分为发包的公司，接包的公司。从分工的角度看，一个公司所处的位置越靠后，其利润空间可能也就越微薄。</p>
<p>与这类分工相关的场景还有很多，比如：母公司与子公司、发包的和接包的、做操作系统的和必配指定操作系统的硬件厂商、做电商平台的和各个产品制造商等等。</p>
<p>从选择公司的角度，应该尽可能考虑上游的公司，因为这种分工上的位置对成长空间和收入会有比较大的影响。</p>
</li>
<li><p><strong>行业的视角</strong></p>
<p>在这个视角下，公司往往被分为电信、金融、互联网、ERP、游戏、嵌入式等。很难讲那个行业相对另一个行业具有绝对优势，但有两点需要额外注意：</p>
<p>一是软件是不是公司的主营业务对发展空间往往会形成一定限制。制造业的工厂里也做软件，但不太可能选几个做软件的去做厂长，金融公司里程序员也很难发展成为总裁。</p>
<p>另一点是有的子行业处在成熟期，发展相对平缓，而有的子行业则处在高速发展期，发展很迅速。后者机会更多，年轻人尤其是容易在全新的领域出头。这是因为在全新的领域中没有既定的利益格局，所有人都在同一起跑线上。</p>
<p>从选择公司的角度看，无疑的要尽可能选选主营是软件并在高速发展子行业的公司。而之所以选择行业非常重要，根本原因是一旦选择了那个行业，那很可能一辈子就会干这个了。做金融的很难去做互联网，做互联网的也很难去做嵌入式。</p>
</li>
<li><p><strong>时间轴的视角</strong></p>
<p>从生命周期来看，公司可以分为发展期的公司、成熟期的公司和衰落期的公司。</p>
<p>从选择公司的角度看，极力要避免的是衰落期的公司。识别衰落期的公司简单的办法是财务数据和市场地位。已经赤字的或市场地位已经排位靠后的都是相对比较危险的公司。</p>
<p>而选择发展期的公司还是选择成熟期的公司上，要依赖于个人选择。通常来讲选择成熟度较高，市场地位较高的大公司会比较好，便于做技术积累。</p>
</li>
<li><p><strong>核心竞争力的视角</strong></p>
<p>有的公司是核心竞争力偏向于销售渠道，有的则是技术，有的则是两者并重。</p>
<p>比如对于信息管理系统销售渠道就比较重要。从这个视角看，有核心竞争力的公司总是比没有的更好。而在有核心竞争力的公司里，技术导向的公司无疑更适合程序员。前面曾经提到过，非技术导向的公司里，技术路径通常会短。比如说：只做信息管理系统的公司技术路径通常不会长。</p>
</li>
<li><p><strong>地域的视角</strong></p>
<p>从这个视角可以把公司分为一线城市的公司，二线城市的公司。地域主要影响可流动范围。</p>
<p>在2012年曾经发生了一起很有点影响的事情：摩托罗拉移动因为经营的原因，关闭南京摩托罗拉移动，裁掉了整个团队，这个时候南摩员工联合起来，一起拒绝在离职协议上签字。员工和公司前后经历多轮谈判，员工方坚持不让步，其中的一个关键理由就是：500多人一起在南京找工作非常困难。与此相对应的则是，同样是裁员，但北京方面所有员工皆较快签字走人。</p>
<p>这一事请本身的是非很难去评论，但南京和北京员工的不同反应却可以一定程度上折射出城市（或者说地域）所带来的影响。</p>
<p>南京已经是非常发达的城市，但500人的队伍已经会担心很难被吸收掉，在北京恐怕这500人就掀不起什么波澜。这很好理解，一升水倒在矿泉水瓶子里，会溢出来，但如果倒在小河里，就几乎等价于不存在。但这种城市对人员的容量对可流动性、对发展空间却会形成一种刚性的制约。</p>
<p>当一个人选择了某个公司的城市，也就选择了其背后隐含的一切，对于大多数人而言与城市的关联度将会随着时间的流逝而越来越高（这体现在学校、房子等方面），所以适当对此进行考察是有必要的。</p>
<p>总的来看越是期望快速发展，越是希望开创一番事业，对自己越是有信心，越适合到一线城市发展；而相应的越是希望安稳，越是侧重生活和工作的平衡，二线城市就更适合一点。</p>
</li>
<li><p><strong>公司文化的视角</strong></p>
<p>如果去翻阅管理相关的书籍比如《基业长青》，《赢》等，你就会发现公司的文化被放在一个非常高的位置上。极度优秀并可存续的组织无疑是需要一种共同的价值取向来镇压气运的，但这和现实其实有点远。现实中的很多公司更可能是规则和个人双重驱动，而没有什么明显的文化特征。所以这种分类视角被放在了最后。</p>
<p>很难讲那种企业文化一定会成功，但如果从负面来解读文化的话，有一种文化却几乎一定会使公司挂掉。这种文化可以叫做蠹虫文化。典型特征是：一盘散沙，所有人都一起糊弄工作，工作上的事情能推就推。这类公司几乎一定会比较快的走向毁灭，除非是有某些垄断性的因素可以确保其生存。</p>
</li>
</ul>
<h3 id="具体类别的点评：外包行业"><a href="#具体类别的点评：外包行业" class="headerlink" title="具体类别的点评：外包行业"></a>具体类别的点评：外包行业</h3><p>很难笼统的讲外包行业好或不好，有前途没有前途，因为外包也有很多层次。</p>
<p>假设说一家公司把一款手机从设计到制造的所有环节都外包给一家公司，只是最后自己进行贴牌，那么对于承接这种外包业务的公司而言，单纯从技术角度看与自己进行产品开发并无差别。</p>
<p>假设说一家银行把需求之外所有的业务都外包给一家公司，那么对于承接这种业务的外包公司而言，就更像是银行的 IT 部门。</p>
<p>上面这类外包与特定企业的核心业务相关联层次是比较高的。与此相对应，外包业务的层次可以逐级降低，比如：同样是银行业务，在外包过程中也可以把基础设计都完成之后，把量较大，但没有技术难度的编码工作外包给其他公司。这类工作往往是由成本控制而触发，所以在分工链条上所处的位置越低，工作越容易辛苦，且收入较低。</p>
<p>这点上可以看一点数据，当前国内最大的外包公司是文思海辉，根据公开数据，文思海辉在2012年总计有员工23270名，总收入是3.59亿美元，大致是22.7亿人民币，平均每人年创造不到10万元的收入。与之相对应，腾讯2012年总计有员工24160名，总收入438.9亿人民币，平均每人年大约创造181.6万元。这种数据大致可以说明从分工链条的角度看，国内的外包公司仍然有很大的提升空间。</p>
<p>那究竟加入外包公司是怎么样的一种选择？</p>
<p>这不能说是很差的选择，但如果让我来排个顺序则首先是知名的独立软件开发商（ISV），其次是前景比较好的独立软件供应商，接下来才是做高端外包业务的公司，做低端外包业务的公司大多时候不是什么好的选择，因为对个人成长不利。</p>
<h3 id="具体类别的点评：互联网行业"><a href="#具体类别的点评：互联网行业" class="headerlink" title="具体类别的点评：互联网行业"></a>具体类别的点评：互联网行业</h3><p>如果说 IT 行业是朝阳行业，那互联网绝对是朝阳中的朝阳。在这个领域中我们看到了门户网站，看到了搜索引擎，看到了社交网络，看到了各种云平台和大数据，但故事应该远未终结。未来究竟出现什么样的产品很难预测，但未来的产品会和互联网紧密相关这点错的可能性很低。</p>
<p>所以在行业选择上加入一家以互联网业务为核心的公司是不错的选择，从发展的角度看很同等条件下要比加入通信、金融这样的行业更有优势一点。</p>
<p>假如一个人想创业，那这就更是一种必然选择，互联网是智力密集型的工作，需要一定资本，但对资本的要求并不高，几个人拉到风险投资后，架设网站开始创业怎么也比研发路由器开始创业更适应于一般人一点。</p>
<p>这里面在分类上有一个微妙的地方需要注意，搜索引擎、大数据、社交网络可以认为是互联网，但挪到互联网上的 ERP 也还是 ERP，不能算是互联网行业，这个差别很大，考察公司的时候要注意。</p>
<h3 id="具体类别的点评：外企"><a href="#具体类别的点评：外企" class="headerlink" title="具体类别的点评：外企"></a>具体类别的点评：外企</h3><p>按国别来区分企业，误杀的几率很大。但毕竟同一国家的企业还是有些共通的特征，因此这里择取两个视角做一个简单的分析。一个视角是透明天花板的高低；一个则是规范程度。</p>
<p>什么叫透明天花板？职业路径被封死在某个高度以下，但这种封锁在可见制度层面又不存在，这就是透明天花板，往往是做到一定高度的人对此感受的更为清晰。平心而论，透明天花板在那里都有，本身倒不一定就具有贬义。但不同企业中其高度确实不同。如果要排个次序，那就是是国内企业高于欧美企业，欧美企业高于日韩企业。</p>
<p>理论上讲一个人在国内企业里的发展是不受高度限制的，可以想见联想，阿里巴巴未来的接班人还是个中国人，空降个黑人或白人 CEO 的可能性不大。而欧美企业相对开放，至少在大中华区，高层人士里还主要是华人，但想再往上走则很艰难。这可以从李开复老师的自传里读出些端倪，李老师无疑非常优秀，但从自传里绝对看不到成为微软或者 Google CEO 的可能性。高晓松老师在优酷上做了个很有意思的节目叫《晓说》，里面更是很直接的谈到这一点：在好莱坞就是犹太人升迁快，华人虽然收入高，但就是有天花板，要很辛苦工作来维持自己的收入。</p>
<p>在日韩企业这点上就收的比较紧一点，各个子公司的负责人基本上会选本国人。</p>
<p>所以假如说你认为自己非常优秀，并且期望无限的发展空间，那么优选本土公司（也许注册地不是中国）是对的，虽然它们的 CEO 没准也是美国华裔，虽然它们可能会有一些负面的报道，虽然不管怎样成为 CEO 都是一种可能性非常低期望，但至少存在着这种可能性。</p>
<p>顺道说一句，从这个角度上看，我们真有理由希望这个国家和对应的企业强大，只有如此，大多数和本土的优秀人才会有更加光明的未来。</p>
<p>从规范程度来讲，越是本土企业，反而可能会越差一点，这也符合知己知彼百战不殆原则，虽然有点黑色幽默。而跨国企业往往是些大公司，在规范性这点上都会非常的注意。我个人倒是感觉，只要没滑落到无赖公司的地步，稍微有点不规范也是可以接受的，犯不上刀兵相见。所以说单纯地希望成为优秀的工程师，那么优秀的外企仍然是个不错的选择。</p>
<h3 id="具体类别的点评：受非市场因素影响大的公司"><a href="#具体类别的点评：受非市场因素影响大的公司" class="headerlink" title="具体类别的点评：受非市场因素影响大的公司"></a>具体类别的点评：受非市场因素影响大的公司</h3><p>非市场因素影响大的公司是个诡异的类别，完全是我杜撰出来的，这个类别的公司特征是可以因为特别的机会（某个大单或某项特别资助）在短时间蓬勃发展，但接下来又很可能会在短时间轰然倒下。在 IT 业中最典型的例子托普，有点年纪的 IT 人应该还记得这家公司。</p>
<p>我个人倾向于认为应该规避这类公司，因为这类公司通常并不会把精力放在产品的开发上，而会放在非市场因素的经营上，这对个人成长并不是很有利，尤其是走技术方向的人。一旦公司出现危机，那么个人反倒可能会因此陷入困境。</p>
<p>上面的文字有点含糊，为了把事情说的更清楚一点，我们来看一个历史上的故事。</p>
<blockquote>
<p>中国人里面不知道胡雪岩的恐怕不多。胡雪岩出身不高，几近于白手起家，先后得王有龄、左宗棠之助迅速成为显赫一时的红顶商人。百度百科上对这段往事的记载是：</p>
<p>他从扫地、倒尿壶等杂役干起，三年师满后，就因勤劳、踏实成了钱庄正式的伙计。正是在这一时期，胡雪岩靠患难知交王有龄的帮助，一跃而成为杭州一富。</p>
<p>王有龄，字英九，号雪轩，福建侯官人。在道光年间，王有龄就己捐了浙江盐运使，但无钱进京。后胡雪岩慧眼识珠，认定其前途不凡，便资助了王五百两银子，叫王有龄速速进京混个官职。后王有龄在天津遇到故交侍郎何桂清，经其推荐到浙江巡抚门下，当了粮台总办。王有龄发迹后并未忘记当年胡雪岩知遇之恩，于是资助胡雪岩自开钱庄，号为阜康。之后，随着王有龄的不断高升，胡雪岩的生意也越做越大，除钱庄外，还开起了许多的店铺。</p>
<p>庚申之变成为胡雪岩大发展的起点。在庚申之变中，胡雪岩处变不惊，暗中与军界搭上了钩，大量的募兵经费存于胡的钱庄中，后又被王有龄委以办粮械、综理槽运等重任，几乎掌握了浙江一半以上的战时财经，为今后的发展奠定了良好的基础。</p>
<p>胡雪岩之所以可以迅速倔起，除了得益于王有龄之外，另一个人也起到了重要的作用，这个人就是左宗棠。1862年，王有龄因丧失城池而自缢身亡。经曾国藩保荐，左宗棠继任浙江巡抚一职。左宗棠所部在安徽时晌项已欠近五个月，饿死及战死者众多。此番进兵浙江，粮饱短缺等问题依然困扰着左宗棠，令他苦恼无比。急于寻找到新靠山的胡雪岩又紧紧地抓住了这次机会：他雪中送炭，在战争环境下，出色地完成了在三天之内筹齐十万石粮食的几乎不可能完成的任务，在左宗棠面前一展自己的才能，得到了左的赏识并被委以重任。在深得左宗棠信任后，胡雪岩常以亦官亦商的身份往来于宁波、上海等洋人聚集的通商口岸间。他在经办粮台转运、接济军需物资之余，还紧紧抓住与外国人交往的机会，勾结外国军官，为左宗棠训练了约千余人、全部用洋枪洋炮装备的常捷军。这支军队曾经与清军联合进攻过宁波、奉代、绍兴等地。 胡雪岩是一位商人，商人自然把利益放在第一位。在左宗棠任职期间，胡雪岩管理赈抚局事务。他设立粥厂、善堂、义垫，修复名寺古刹，收硷了数十万具暴骸；恢复了因战乱而一度终止的牛车，方便了百姓；向官绅大户劝捐，以解决战后财政危机等事务。胡雪岩因此名声大振，信誉度也大大提高。这样，财源滚滚来也就不在话下了。自清军攻取浙江后，大小将官将所掠之物不论大小，全数存在胡雪岩的钱庄中。胡以此为资本，从事贸易活动，在各市镇设立商号，利润颇丰，短短几年，家产己超过千万。</p>
</blockquote>
<p>没仔细考证过，也许上面的描述与历史有所偏差，但其崛起与左宗棠有紧密关联这一点，大致不错。胡雪岩成功的快，败落的也很快。败落的原因很多其中关键的一条就是在李鸿章与左宗棠的内斗。从发迹到败落前后大概20年。但在现代这种变化节奏因为某些原因变快了，往往不要20年，托普走完这条路用了10年左右，未来就可能会更短。从这个角度看，这类公司是不适合纯粹的工程师的。</p>
<h2 id="程序员生存定律——公司选择上的方法论"><a href="#程序员生存定律——公司选择上的方法论" class="headerlink" title="程序员生存定律——公司选择上的方法论"></a>程序员生存定律——公司选择上的方法论</h2><p>开篇前再补一句，这没考虑创业的情形，只是说最一般的情况。</p>
<p>在弄清楚公司的分类方法，以及某些类别公司的长处和短处后，就可以开始考虑如何去选择公司。</p>
<p>经常会看到这样一些问题，比如：是去大公司好呢，还是去小公司好呢？是去用 ASP.net 做 ERP 的公司好呢，还是去做 Mobile 应用的公司好呢？这些问题的当事人大多是希望别人给个具体答案的，但实际上上非当事人是很难给具体答案的，而只能提供原则。因为最终的判断同时依赖于公司和个人的偏好。</p>
<p>做这类选择的基本过程是这样：</p>
<ul>
<li><p>先给公司分类，并弄清楚特定类别公司的利弊得失。</p>
<p>这正是上一节中已经提到东西。</p>
</li>
<li><p>考虑自身的状况进行选择。</p>
<p>这时候主要需考虑两个事情：一个是工作要和自己的根基契合，要扬长避短，使工作成为发挥自己长处的场所，而非相反；一个是在发展、赚钱、安稳和兴趣之间取找到平衡点。前者是很理智的一种判断，后者则是主观的一种选择。下面对这两点做一点详细说明。 </p>
</li>
</ul>
<h3 id="使工作和自己的根基契合"><a href="#使工作和自己的根基契合" class="headerlink" title="使工作和自己的根基契合"></a>使工作和自己的根基契合</h3><p>什么叫根基和工作不契合？</p>
<p>我们来想象一下，一个人算法、数据结构、数学的基础很好，特别喜欢计算性工作，但跑去做纯粹的应用开发，这就是根基和工作的不契合。</p>
<p>不是说应用开发就简单，而是说应用开发的难度往往不来源于算法、数据结构这类东西。如果真的很擅长这方面，那更适合去开发基础库、乃至编译器这类东西。</p>
<p>软件是无限宽广的一个概念，恰如前面所说，里面流派众多，不同流派都有自己的难度，但这种难度的来源往往不同。</p>
<p>假设说一个人完全是自学成才，那他能不能成为软件开发高手？当然可以。但这种情况更适合去挑战内核设备驱动这类有难度的工作，而不适合去挑战编译器这类有难度的工作。当然后者也不是完全没可能，只是说挑战后者更为艰难。设备内核驱动的难处来源于对设备、对操作系统、对协议的理解，成为这方面高手可以逐渐累积。但编译器这类工作需要事先累积很多东西，接下来一下子爆发出来，这对自学成才者往往就很难——当然到现在为止我也不知道国内那家公司是自己开发编译器的。</p>
<p>不契合首先造成一种浪费，其次会对自己的职业路径形成障碍。这种选择错位，大致可以有两种表现。</p>
<p>把自己升级使用，这种情形下公司大多时候不干，所以情况不多，但把自己置身在前行无路的状况下却很可能。比如：本科这样的程度即使很精通各种编程技术，也很难去做纯粹的研发工作，在纯粹的研发工作中（图像算法等），只能扮演一种助手性的角色。这也就意味着，如果学历不够却选了一种偏研发的道路，那么就容易卡死在某个位置上。</p>
<p>与上述例子相比，把自己降级使用因为种种原因反倒更常见，所以个人主要力争避免的是别把自己降级使用。比如：很优秀的人每天主要使用拷贝粘贴而不用动脑子就可以搞定手里的工作，这样做个几年这个人也就不优秀了。</p>
<p>从具体方法上来讲，在对公司进行分类后，先看一下公司的核心竞争力和技术路径。不管目标是做技术还是做管理，一旦其技术路径并不是自己能走下去的，那就不太适合自己。比如说：算法、数学基础不好的人就不太适合加入做 TTS 的公司。</p>
<h3 id="当前可得到什么、将来可得到什么"><a href="#当前可得到什么、将来可得到什么" class="headerlink" title="当前可得到什么、将来可得到什么"></a>当前可得到什么、将来可得到什么</h3><p>抛开价值观与自己契合与否的考量，选公司最关键的事情是弄清楚在公司里当前可以得到什么，未来可以得到什么？当前可以得到的一般是收入和成长机会，未来可以得到的是一种能力与履历。其中能力贡献于自己的价值，而履历则贡献于自己的表达力，显然的 Google 工作过的人与飞鸟公司（杜撰的公司名）工作过的人在一般衡量标准中其价值有巨大差异，即使这两个人技能水平相近。</p>
<p>对短期目标和长期目标的平衡可以从四个维度上进行考察：收入、发展、安稳和兴趣。</p>
<p>收入、发展、安稳和兴趣这四个维度所导致的可能选择往往是矛盾的。但如果非要给这四个因素按权重排个优先级的话，更合理的结果是：<strong>兴趣 &gt; 发展 &gt; 赚钱和安稳</strong>。后两者纯属是个人选择，很难清晰区分。但其它几个因素的权重却大致是确定的。</p>
<p>在进行其他说明前，需要补充的一点是这里说的兴趣不是那种很快会来很快会走的兴趣，而是说能够伴随自己一生的偏好。</p>
<p>兴趣之所以大于发展是因为人生要想有高度，必须持续的投入，而要想在一生中持续的投入，没有一个关键支撑，那是不可能的。而没有一种持续的投入，最终可达到的高度就会被限定在一定尺度以下。比如说：一个人非常喜欢写程序，有钻研精神。这时候从行业分类上看，就不太适合介入金融、ERP 这类行业，因为这类行业中的软件往往是一种业务流，同现实世界关联很紧，并不是一种纯粹的程序。与之相对应，在互联网公司开发浏览器或者开发软硬件结合的产品就更像一种纯粹的技术。这个人一旦加入了前一种类型的公司，可能做做就会失去兴趣，会失去前进的动力，后者则会与这个类型的人的兴趣点契合的好一点。而这里面很可怕的一个陷阱是一旦你选择了某个领域比如金融，再想跨越到其他的领域比如说游戏，那成功几率极低。因此兴趣是大于发展、安稳与赚钱的权重。</p>
<p>但这里有个极容易被误解的东西，那就是虽然兴趣非常关键，但实际上大多数人其实并没有真的兴趣，而会把一时的喜好误认为兴趣，这种兴趣因为会在时间轴上频繁变化而毫无价值，过多考虑这种兴趣会让自己走入误区，为自己造成损伤。这时候要对自己有个清醒的认识，如果自己不是一个对兴趣非常执着，而是做什么都还可以接受的人，那么就可以把兴趣的优先级放在较低的位置上。</p>
<p>发展之所以大于安稳和赚钱，道理也很简单。<strong>年纪越小，未来越重要，没有个人价值的提高，未来既不会赚到钱，也不会安稳。</strong> </p>
<p>平衡这四点之后，就可以找到一些大多时候都适用的选择方法：</p>
<ul>
<li><p><strong>知名软件公司在大多时候在这四个方面可以达成很好的均衡，是首先考虑的对象。</strong></p>
<p>显然的国外的 Google、微软等，国内的阿里等既可以提供与兴趣相吻合的工作，又可以提供合适的发展机会以及安稳的，不错的收入。所以如果有机会加入这类公司是不太需要考虑太多的。</p>
<p>有一种情形需要稍微注意。比如某家公司设立的某个子公司主要目的是节约成本，并只做限定范围内的业务的，这种可能会造成流动性上的问题。</p>
</li>
<li><p><strong>软件不是主营的公司在一个或多个方面都有负面影响应该尽力回避。</strong></p>
<p>在某些公司里，软件是给其他业务配套的，也就是说是非核心业务。这种工作岗位通常同时对兴趣、发展有负面影响。大多时候应该回避。除非你真的非常认可这类工作岗位的安稳，并且也能接受相应的收入水平。</p>
<p>假设说你真的在软件不是主营的公司里做软件，那么你大概会碰见下面这些事情：</p>
<p>首先是永远要用最简单最直接的技术做基本能用的软件。比如用 Visual Studio 开发一个界面和数据库进行连接，直到他能用。注意，能用往往是这类软件的终点。太好的代码是不需要的。接下来就可以开始做下一个软件了。而你一旦这么干了，你的技术水平就得不到提高，可替换性也就始终很强。</p>
<p>其次是你可能不会被重视，会和周围的人格格不入。你的领导可能只会给你非常泛泛的指示，但你必须一丝不苟的按照这些安排去做。</p>
<p>很多事情在中国和美国都会不一样，但这事儿上实在是相似极了。在《软件随想录》里 Joel 说的更直接：千万不要去干什么内部软件，那会把你榨干。</p>
</li>
<li><p><strong>衰落期的公司、分工上处在下游的公司、无核心竞争力的公司并非优选。</strong></p>
<p>这些公司可能能满足兴趣需要，但公司自身在满足发展需要、赚钱和安稳上会相对较差。没选择的情形下这些公司也是一种选择，但不是优选。这里没法具体去列举那个公司处在衰落期，那个公司在分工上处在下游，那个公司没有核心竞争力，只能列几条判断的原则。</p>
<p>判断是否处在衰落期，最直接的办法是财务数据，对于上市公司而言获取这种数据并不困难。销售额和利润在处连续2年以上下降的公司，大概是有问题。</p>
<p>对于小公司财务数据大致是不公开的，这时候则只能判定领域。一些存在时间比较长且没形成自己品牌、规模或者技术优势的公司，更可能是生存艰难的。比如：做 MIS 系统的公司。</p>
<p>在新兴领域中小公司有可能以小博大，高速发展，成为大公司，这种领域往往是蓝海，这点可以回头考虑下2000年的阿里，百度，腾讯。而在成熟的领域中，势力地图已经划分完毕，留给后来人的的工作要么是利润空间比较低，要么需要大额资本进行驱动。淘宝天猫可以逐步发展，苏宁想启动类似的业务，那就必须先投入足够的钱，再有小公司想模仿淘宝天猫，已经变得很艰难，并且成功几率极低。</p>
</li>
<li><p><strong>越有梦想，越想快速成长，就越适合在一线城市工作。</strong></p>
<p>越想安稳的平缓进步就越适合在二线城市。但在二线城市的选择上要尽可能选择那种有软件园，政府提供相应配套设施，软件园中集中了很多软件公司的二线城市。选择这种城市要比选择软件非主体，只有很少几家软件公司的城市在可流动性上有优势。</p>
</li>
</ul>
<p><strong>感受大公司中主营业务的威力？</strong></p>
<blockquote>
<p>李开复先生的《世界因你不同》里面提到了 .NET 开发在微软内部扭曲变形的过程：</p>
<p>在2000年的时候，微软决定启动 .NET 计划，那时候规划中的 .NET 和我们现在看到的 .NET 并不相同，那时的目标是基于浏览器可以运行所有的应用软件，和今天的云计算概念非常相似（注意这是2000年），电子邮件、即时通讯、登录、Office、高质量的打印、机器翻译、人工翻译等都会被整合到网络之中。</p>
<p>但一旦开始行动时，李开复先生遭遇了 “人的问题”（即是政治问题），待整合的团队有三个：IE、MSN Explore、NetDocs，其中 MSN Explore 和 IE 是死对头，MSN Explore 和 NetDocs 因为使用不同技术有过节，与此同时，庞然大物 Office 团队则因为 NetDocs 意图取代 Office 而恨之入骨。</p>
<p>这种复杂的关系导致从各个团队抽调人员非常困难，最终只有 MSN Explore 被整合到了李开复先生这边，但这个团队只有100多人，根本无法开始 .NET 的宏伟计划。</p>
<p>正在这时微软的一个一个强势人物：吉姆•阿尔钦回到了公司。吉姆•阿尔钦是 Windows 团队的负责人，1995年开始一直负责 Windows98 和 XP 的开发，他是 Windows 的狂热拥护者，一回来就把 .NET 计划批评的一无是处。他说：你们知不知道是谁在付你们薪水？是 Windows！我的血液里流的是视窗的四色血液。你们呢！难道是冷血的？“他又到盖茨的面前威胁如果公司执意而行，他就辞职。在强势威胁后，阿尔钦通过 Windows 的远景说服了比尔盖茨。</p>
<p>最终结局是取消原来的 .NET 计划，重点还是 Windows，接下来就启动了著名的 Vista 的开发。</p>
<p>——上面的案例参照《世界因你不同》缩略而成。</p>
</blockquote>
<p>上述这样的一个案例落在不同的人眼里，看到的东西应该不同，可能是政治的力量，也可能是其他。这里我想强调的则是强势部门的力量。</p>
<p>吉姆•阿尔钦这个人为什么有这么大的影响力？原因可能有很多，但其中一定绕不开的一条是他所负责的 Windows 是微软的根基所在，是主营业务。</p>
<p>在公司之中往往可以有很多产品线，但这些产品线往往并非均摊权重，而是要有君臣佐使。这种差异往往会成为内部资源分配、职位晋升的影响因素。在这种情形下，无疑的主营业务相关人等会被重点关注。</p>
<h2 id="程序员生存定律——六个程序员的故事"><a href="#程序员生存定律——六个程序员的故事" class="headerlink" title="程序员生存定律——六个程序员的故事"></a>程序员生存定律——六个程序员的故事</h2><p>此前的章节基本上是在分析并试图建立一种成长的模型，为免这种分析和模型离开现实，下面将考查一些具体的，程序员的故事，看的话最好把这六个故事都看完，否则容易片面。</p>
<p>很多人更喜欢看名人的故事，比如李开复老师的故事。这必然是有帮助的，但可参照意义往往并没有想象的那么高。因为大部分人往往既走不进哥伦比亚大学，也走不进卡内基梅隆，这就导致了名人和一般人的起点非常不同。此外美国处在整个 IT 产业链的高端，各种游戏规则也与国内不同，这就导致了李老师的人生路径很难被一般人所复制。</p>
<p>在国内这个情形也同样存在，排名前五的大学往往会在起点上就与大多数不同。很多公司的招聘，大致是按照某种学校的排名来设定招聘范围的。</p>
<p>我曾经很客观的评估了下自己，结论是即使再给我一次机会，进很好的高中，自己也努力学习，我也考不进清华，但即使如此我也要做 IT，我也要谋求发展。相信大部分人的经历更类似于我，而非是李开复老师，因此下面收集了几个普通程序员的成长故事来给大家做些参考。有的留下了名字，有的则隐去了真实姓名，但不管怎样，这里的故事很草根，它其实就在你我身边，相信参照意义也会更强一些。</p>
<h3 id="一个40岁程序员的无奈"><a href="#一个40岁程序员的无奈" class="headerlink" title="一个40岁程序员的无奈"></a>一个40岁程序员的无奈</h3><h4 id="佚名老程序员的故事"><a href="#佚名老程序员的故事" class="headerlink" title="佚名老程序员的故事"></a>佚名老程序员的故事</h4><p>老A有点莫名其妙的就混进了程序员的队伍，稀里糊涂做了几年之后，猛一抬头发现自己快40岁了。老A出身名门，是中国顶级学校的毕业生，毕业后跑到英国留学七年，得了两个硕士学位，按理讲奋斗个英国绿卡应该并不是很难，不过老A还是选择了回国。</p>
<p>老A自身智商是不缺的，否则也考不进顶级学校，但却不太考虑自己的事情，反倒对如何解决台湾问题，如何解决和印度的关系思考颇多，让大家印象非常深刻的一个观点是：国家应该使劲鼓励往澳大利亚这类地方移民，改变它的选民构成，这样他自然就变成亲中的。</p>
<p>这类小事糊涂体现在，他归国后并没太多的考虑自己的发展，而是随便找了一个苏州的做打印机驱动的公司。</p>
<p>公司当时刚刚开始起步，需要同不同文化背景的人做大量沟通，并处理与设备相关的极多的各种细节。</p>
<p>老A的背景和性格都不太适合做这类工作，沟通的时候太以自我为中心，但实际上食物链下端的公司是处在弱势地位上的，更要扮演倾听者的角色；再加上人又有点疏阔，细节问题不大处理的来，因此虽然一开始被给予厚望，但成绩却一直平平。老A在这家公司坚持三年之后在看不到任何前景的情况下选择了离开。</p>
<p>离开后老A加入了一家纯粹做外包的公司，并被派去日本。这时候，工作范围一下扩的很开，什么野村证券的金融系统，某个网站的前端开发等等都一一做过。每当换一家公司，都要从头学点东西。</p>
<p>这些工作本质上和上一家公司差别并不太大，但总是很繁琐，和以前一样老A完成的比较一般。这样再加上日本的经济实在不景气，很快老A派不出去了，无奈之下，老A又回到了国内。可是时间不等人，一来二去老A已经差不多40岁了。</p>
<p>从日本回国之后，由于前面几年积累不多，老A只好回到离家乡比较近的一个城市，继续在对日外包行业里摸爬滚打。</p>
<h4 id="感悟程序人生"><a href="#感悟程序人生" class="headerlink" title="感悟程序人生"></a>感悟程序人生</h4><p>老A的路其实走错了。考入等级学校并能出国留学可以讲是给自己挣得了不错的选择权。但就像再多的遗产也经不起子女挥霍一样，基础再好也经不起错误的选择。几次相对比较不好的选择之后，选择权就消失殆尽，而时间不等人，价值没提升年龄却提升的同时，人生也就开始有点困顿。</p>
<p>我们可以用这本书里提到的各个维度来观察一下老A的人生。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">价值 x 实现程度（表达力，稀缺性，公司平台）&#x3D; 职场成就</span><br></pre></td></tr></table></figure>

<p>老A在几乎所有项目上做错了选择。</p>
<p>从增值的角度看，首先是大方向上过于糊涂。以老A的履历，如果走纯技术路线，那就要到一家技术含量高的公司，否则就要迅速向管理职转型。老A却选择在一家技术路径不长的公司里做技术。</p>
<p>即使单纯是从做技术的角度看，老A也还是做错了。我们在前面曾经提到，要持续增值，不要失去焦点，你不能学的是嵌入式底层开发，回头做前端开发。老A又恰巧选择了一个自己完全陌生的领域——打印机驱动程序。这类工作对他以及对其他毕业生是同样的陌生，难度又不高，在这类工作面前，他的学历背景等等完全没有优势，等于主动的为自己做了重置，也等于人生的增值失去了焦点。 </p>
<p>既然做错了选择，本来就应该赶紧在 “表达力” 这项上调整自己，迅速适应当前情境，这样依赖于在公司起步阶段进入公司这一优势，也可以谋求一定发展。但老A又错了，他看到了许多自己不适应，但不涉及是非的地方，但并没有积极改变自己，最终导致了自己的出走。 </p>
<p>当老A第一次从公司出走的时候，他的价值、表达力、稀缺性并没有因为近三年的工作经历有任何提升，仍然吃的是老本（名校，留学经历）。 </p>
<p>接下来，在公司的选择上老A再一次错了，第一次的选择本来就不太正确，但第二次选择就几乎把自己逼到了死胡同里面，转到纯粹的外包领域这又是一次重置，让之前三年的经验归零。</p>
<p>去日本一事更是让事情雪上加霜，短期来看也许可以多赚点钱，可几乎一直处在食物链的末端，没有任何技术积累，这直接决定了回国后的选择空间。回国后再一次进入外包公司，以老A的年纪和性格，未来已经很那看到亮色。 </p>
<p>老A的内心想必是痛苦的。老A的情形并非个案，如果我们用心观察就会发现很多很多类似的故事。</p>
<p>有的可能是已经失业，再就业艰难；有的可能是只能维持现状，并等待人生下滑。也许是巧合，这点在40岁左右的程序员身上发生的特别惨烈。</p>
<p>这种情形有一个根本的特点，就是自身价值没有质的突破，这样不管你曾经多么风光，多么好运，在10年时光面前，往往会被打回本色。</p>
<p>陷入这种困境之后，要想挣脱已经很难，而如何避免陷入这种困境，也许可以从下面李云的故事中获得启示。李云的故事与这里的老A可以形成非常鲜明的对比，老A是通过高中的努力达到人生高点，但浪费了自己的选择权，使选择权逐步收窄，而李云则是起点很差，但始终坚持增值，最终累积出了高度，逐渐使选择权越来越大。</p>
<h3 id="一个普通码农的退场过程"><a href="#一个普通码农的退场过程" class="headerlink" title="一个普通码农的退场过程"></a>一个普通码农的退场过程</h3><h4 id="码农退场的的故事"><a href="#码农退场的的故事" class="headerlink" title="码农退场的的故事"></a>码农退场的的故事</h4><blockquote>
<p>声明：下面这篇文字，非本人所作，而是CSDN上流传比较广的一个2007年的老帖，原作者已经联系不到，但这个故事真的很有代表性，因此把它录在这里，与广大程序员再次分享。为了保持原滋原味，基本未对原文做任何修改，而只是调整某些敏感词汇和小的笔误。感谢原作者。</p>
</blockquote>
<p>再过几天，我就正式告别程序员生涯了，这也是我最后一次以职业程序员身份在CSDN发表文章。小弟谈谈入行几年来的感受，做一个人生阶段的自我总结，同时希望能给后来者带来点参考意见，能在这段路上走的更好。</p>
<p>本人2002年下半年正式入行，至今2007年4月一直从事软件开发工作。</p>
<p>上大学选择这个专业是阴差阳错，但接触之后对计算机产生了强烈的兴趣，对写软件有一种强烈的冲动。</p>
<p>软件成型后，那种成就感和自豪感能给我难以名状的满足。</p>
<p>那时，喜欢看侯捷的书，对核心技术和核心技术人员由衷的崇拜，对技术的追求和水平的提高有一种莫名的狂热，当时我想只要能从事软件开发的工作，起初的薪金待遇可以不计，等我技术方面成熟后，自己就有更高更好的选择了，程序员 → 系统分析员 → 项目经理 → 自己的软件公司，这是当时我一个朦胧的程序人生规划。</p>
<p>现在想来，不禁一番唏嘘。</p>
<p>我记得我在培训的时候，一个培训的老师当时是本地一家有名的高科技企业的 CTO，确实是专业人才，就是不太会讲课。我问他做程序员的感受，他说经常写程序经常写到凌晨2点钟，很累不过很有意思，因为他喜欢这份职业（当然喜欢啊，他月薪7000-8000，2001年，济南），但也干不长啊，他已经做好了转行的准备，去做和计算机相关的行业。那年他28岁，我22岁。其实他那番话让我和我的同学已经很羡慕，我们羡慕他的技术深度和现在的岗位层次。金领啊，他就是我们眼里的金领啊。</p>
<p>而另一个技术水平很高的老师（在外企写单片机的，30岁，月薪8000-1万），告诉我的是：迟早要转行，就像他现在来当培训教师一样，原因只有一个：太累。</p>
<p>我没在乎他们的感慨，因为我年轻啊，加班到夜里2点很轻松啊，何况写写自己喜欢的软件，很高兴啊。那时对我来说30岁只是一个遥远的数字。工作后，感觉完全不一样了。首先很惭愧自己的机遇和能力都不是太好，一直从事基于数据库的信息管理系统的开发（我认为是软件开发里最简单和最基础的方面），换了三家公司，从基础程序员作到了系统分析的层次，现在开始往对外和管理方面发展。可以说粗略的沿着我以前设计的程序人生轨迹走了走。</p>
<p>其间也有过失业的落魄，吃不上饭的紧张，我记的最难的时候到CSDN上来发表文章，得到了很多兄弟姐妹的祝福和支持，给了我很大的鼓励，真的谢谢。</p>
<p>（此处省略64字，因为可能会产生不必要的争议。）</p>
<p>我今年28岁，未婚，彻底烦了。为什么？累，没有希望。先说说我的一点感悟：</p>
<p>软件行业分析：</p>
<ol>
<li>开发出售行业适用的单机版软件。</li>
<li>开发行业适用的网络版（B/S）软件，一般是大单，几十万到几百万。</li>
<li>和行业的政府主管部门合作，推行一些行业方面的应用软件。</li>
</ol>
<p>补充：做软件一定要做行业软件，才有前途。</p>
<p>这是本人几年来对这个行业的一点分析。</p>
<p>其实第一种情况是软件公司最通常的盈利模式，这种模式软件价格不高，但只要质量站得住脚，可以细水长流，保证公司的成本没问题，做的好还可以盈利不少，但想做大公司很难。</p>
<p>第二种情况，是真正挣钱的情况，接一个大单，什么钱都挣出来了。可以锻炼开发队伍，建立完整的大的开发框架，而且在这个行业里可以造成很大影响，在一个地方实施成功后可以低成本的再推广，占领一片市场。总之一句话可以让一个小公司真正的成长起来。</p>
<p>第三种情况纯粹就是敛财了，和主管部门合作，强行推广软件，绝对的只赚不赔，我想各个地区都有这样的案例，如税务方面的。缺点是这样的公司都受地域性限制，老板钱拿的太舒服，没什么上进心，公司很难做大，不过也成了地方的行业一霸了，也不错。</p>
<p>累，大家都知道就不说了。为什么没有希望呢？因为我发现一个公司真正勤勤恳垦的实干是挣不到大钱的。</p>
<p>真正能挣到大钱的公司完全都是靠老板的个人关系到什么程度，要想在某个行业里成为软件老大，要看你和这个行业里的政府主管部门的关系如何。我看到了太多软件和他们公司的产品，总结起来就是一个字“烂”。可那赚钱的速度… …。</p>
<p>其实赚多少钱，都是老板的，我们打工的不就是拿个死工资吗，我们更多的人不是连个受剥削的机会都找不到吗?每次面试刚从大学出来的计算机的本科生，我真想对他说：你何必要选择这一行？每次面试那些工作经历比我长，年龄比我大程序员，看着他唯唯诺诺的目光，我就想：曾几何时我也像他这样，被人横眉冷对的面试多少次，以后我是不是还会像他这样，再去看人家的脸色啊？心寒啊！</p>
<p>看着同期毕业的同学，都转了行，在自己的行业里都混的不错，大部分都比自己挣钱多，有干头；就是挣钱少的，他也干的轻松啊，最简单的例子就是和自己项目接洽的企业或政府的信息部主管或网管，懂的不多，轻轻松松，钱比我们的多，有问题老找我们，面对他犯的低级错误，我们还得笑呵呵。我心里确实不平衡啊。</p>
<p>一句话，不当程序员后悔，当了程序员更后悔。</p>
<p>出路在哪？我在找…</p>
<ol>
<li>从程序员，到系统分析，到项目经理。条件：必须是大公司，工资高，福利好,有完整的发展曲线；个人对软件开发有持续的热情。</li>
<li>转行到大型企业，事业单位，政府做信息化方面的工作（可以说是网管）。生活有保障，不必太辛苦。条件：一定的能力，一定的人际关系。</li>
<li>考研，考博再深造，出国或留校搞教学，培养一代不如一代的本科生，闲时打着大学的名义做做项目，赚个房钱。条件：高学历，一定的经济基础和家庭背景。</li>
<li>创业：这个谈起来大发了。这里只说条件：很好的项目，创业精神，一定的经济基础。</li>
<li>共享软件：很多程序员的梦想，自己写个软件全世界的卖，光注册费够一家人生活的了。成功少数，但只要有的都发达了。如 ACDsee，优化大师，超级兔子，千千静听。但我告诉你，这方面基本是没法干了，写个小东西挣钱玩玩可以，要靠他吃饭，饿死吧。条件：过硬的专门的软件技术，富有创意的头脑。</li>
<li>网站：基本情况和共享软件差不太多，只是比共享软件更好干点。但奇迹照样有，可看看 hao123 的神话和现在很牛的80后的富翁。关键你有没有这个本事和这个命了。</li>
<li>行业信息化咨询顾问：随着各个行业信息化的普及，企业对这方面人才需求很大。真正实现信息化的企业都需要这样一个既懂软件，又懂行业知识的人员，他和网管还是有区别的，他的要求更高些，更像一个自由职业者，专家类型的，这样的人放在企业里小的是个主管，大的是个副总。条件：很深的行业内部的技术或管理经验，较强的软件开发或实施经验；通常35岁以上才是成熟人才，因为经验是要经过历练的。</li>
<li>转行，彻底的转行。干不下去，精力不够了，脑子不灵了，钱太少。只要你够理由，你就走。重新开始另一段新的生活，有什么了不起的，哪里也饿不死我这个干软件的。</li>
</ol>
<p>我是哪种人，我说我是第8种人，看看能不能兼第5，6种人。</p>
<p>我大学由于种种原因没毕业，最高学历是高中。就学历而讲，能干到我目前这个水平我觉的可以了，是时候激流勇退了。</p>
<p>就职业规划和财富而言，我这几年走的路并不成功，最起码无奈的转行本身就是一种失败。就我的人生而言，我觉得很成功。我了却了自己的一个人生梦想，在短时间内品尝了一个 “高科技” 行业的酸甜苦辣，技术出身也使我比别人多了一份淡定和从容。现在我可以放下这段旅程，再来一个新的开始。</p>
<p>程序员兄弟们别自卑，说到优势我们有很多：</p>
<ol>
<li><strong>聪明的头脑，较高的智商。</strong>有人说程序员呆，不会为人处事，只会和机器打交道，没前途没希望。我告诉你，程序员愿意和机器打交道是因为他专注于技术，是职业特点，如果我们程序员的头脑用到一般行业，企业，政府单位里去耍耍阴谋诡计，骗骗人，卖卖产品或套套别人的话，我敢说，他们十个人也玩不过我们一个人。俗一点：就他们那点智商，也就骗骗鬼啊。</li>
<li><strong>创新精神，学习能力和频繁的知识更新速度。</strong>做软件的都知道，干一行的软件，就得学一行的知识，这一行的知识掌握的越丰富，软件才可能写的越好。我们都具备很好的学习能力，学习新知识，新技术的能力。不敢说每个做过的行业我们多么了解，最起码我们总是站在风头浪尖上，高屋建瓴，问题看得远，想的长（要不你怎么去设计数据库啊）。我们能以非专业人士的角度，系统的分析出一个行业某方面的流程，那当我们就做这个行业时，我们对我们的能力还没有信心吗？</li>
<li><strong>扎实的工作态度，未雨绸缪的危机意识。</strong>扎实的工作态度是每个合格的程序员都应该具备的，因为我们要对代码负责；谈到危机意识，我想大多数程序员都和我一样吃着碗里的，看着锅里的吧，也是被社会逼的没办法。其实这都成了我们的优点了，以后从事哪个行业，都需要这两点精神。</li>
</ol>
<p>我要走了，去干个和软件根本不搭边的行业，我去干是因为我是老板之一，而且钱绝对比现在好赚。过年的时候，我有个外甥刚大学毕业，非要做软件，我给他了以下建议，算是为后来者留一点东西：</p>
<ol>
<li>能进大公司就别去小公司，在大公司里你能接受真正正统软件开发教育，比到小公司当个什么啥都干，啥都不精的主管强。</li>
<li>不断的学习，注意技术积累和更新，那是你唯一的资本。</li>
<li>做软硬件结合方面的开发，单片机的开发，嵌入式系统的开发，比较有前途而且门槛高。但凡基于数据库的开发，不管是 .NET 平台的，J2EE 平台的，VC、DELPHI、PB、VB 都是扯淡，其核心价值是开发人员的经验而不是技术本身。因为真正的核心技术都在国外，中国没有，我发现不管那种语言，最好用的类库或组件都是老外写的。</li>
<li>要有个好点的学历，别像我一样。毕竟是个高学历的行业，学历低人家都瞧不起你，你的发展也很有限 。30岁之前，可考虑弄个高程、CCNA、数据库管理员之类比较有含金量的证书打扮打扮自己，过了35岁其实意义就不大了。</li>
</ol>
<p>何去何从，我们都有自己的路要走。我转行了，我就不再是程序员了吗，不！我只是不再作为替别人打工的职业程序员了，我要做自己的终身程序员。闲来时我会为自己写程序，写我愿意写的。当写程序不再是一种职业而是一种兴趣和热情时，他才会陪伴我一辈子。我还会再来 CSDN，做为一个非专业人士，一个轻松的真正的程序员而来。未来的一天，当我老的时候，不管那时我有什么成就，或不名一文，如果别人问起我以前是干什么的，我希望仍能自豪的回答：“我曾经是一名软件工程师”。</p>
<h4 id="感悟程序人生-1"><a href="#感悟程序人生-1" class="headerlink" title="感悟程序人生"></a>感悟程序人生</h4><p>上面这段文字里，有比较大的一部分是个人的心路历程，而非是一种经历，但正是从这些心路历程里，我们可以很真切的感受到一个要退场的程序员真实的内心世界。</p>
<p>很多人也许看的很感动，感动之后且让我们回到理性的世界。</p>
<p>我们还是用这本书里提到的各个维度来观察一下上述这段人生。 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">价值 x 实现程度（表达力，稀缺性，公司平台）&#x3D; 职场成就</span><br></pre></td></tr></table></figure>

<p>决定这段故事主旋律的其实是故事主人公所选择公司（以及行业）在整个社会分工链中的位置。这点直接决定了主人公内涵价值增加不易，最终看不到出路。</p>
<p>当一个人选择沙漠的时候，就必然缺水；当一个人选择做信息管理系统，那就必然会面对激烈的竞争以及纯技术路径短的现实。</p>
<p>在一个特定的领域里，如果几个公司做不好，那可能是公司经营的问题；但如果所有公司都做不好，那就更可能是大环境问题。一旦大环境有问题，那就不管你怎么选择公司，都不太会有起色，这等价于前面谈到的关于公司的各个因素中，只有一个分工位置因素有影响。这种情形下你基本没机会去使用你的表达力，好比说大政治家如果去种地，那多高的政治手腕也影响不了亩产，这是一个道理。</p>
<p>在这种情境下任何一个人大致只能有三个选择：</p>
<ul>
<li><strong>一是均衡发展，成为公司里最最关键的人。</strong>均衡发展意味着，有业务、有技术、有管理、有人脉。因为技术路径较短，所以一定不能只是停留在技术层面。这样在有一定的稀缺性后，可以选择一个利润来源比较稳定，较有潜力的公司。故事的主人公也认识到了这点，列举了几种类型的软件，颇得其中精髓。现实点讲就是，很可能做个三到四年后要把精力转到业务、管理和人脉的构筑上，当然构筑成不成功因人而异。这是通过横向展开，扩展自己的价值，并选择留在这个领域里的办法。</li>
<li><strong>一是短时间累积技术基础，在分工链上升级。</strong>信息管理系统所面对的问题和网络应用的开发是共通的，其差异往往是用户规模、数据规模所导致的。极端的讲，12306、淘宝也是一种信息管理系统，但明显其开发需要较高的技能。所以说如果一个人真的很喜欢技术，那不妨去看看关联公司的招聘广告，归纳一下必备的技能。深化算法基础、参加特定的开源项目等都应该都对技术水平提高有所帮助，接下来可以考虑换到故事主人公所说的一些大公司或者需要较高个人技能的公司去，这样就可以站到一个新的起点上。当然这个过程不能太长，否则一旦七老八十，那工作就换不成了。这是利用技能的可流动性，在分工链上爬格子的办法。</li>
<li><strong>最后就只能是转行了</strong>，如果有合适的机会，这也许是一个不错的选择，但这样一来，确实会浪费一些之前的积累。</li>
</ul>
<p>同上一个故事的A相比，这段故事的主人公起点要低了一点，因为某种原因，大学没有读完，所以当初并非有特多的选择权，从信息管理系统切入也许有着自己的无奈。从此可以得出一个废话一样的结论：大学的时候给自己一个方向，开始积累，那么接下来的路会宽很多。</p>
<h3 id="一个关于项目经理的故事"><a href="#一个关于项目经理的故事" class="headerlink" title="一个关于项目经理的故事"></a>一个关于项目经理的故事</h3><h4 id="项目经理的养成日记"><a href="#项目经理的养成日记" class="headerlink" title="项目经理的养成日记"></a>项目经理的养成日记</h4><p>L在2001年毕业之后加入到了福建实达公司。</p>
<p>在今天这个公司几乎是很少有人听说了，但在当年实达还是在IT这片江湖里有些地位的。当年实达的产品线非常全，有网络、有电脑还有外设。外设里面就包含了终端、打印机和 POS 机。当然也还做过 VCD，不过即使在2001年 VCD 这一笔也是作为失败案例来提的。</p>
<p>当年L选择了到外部设备公司去做激光打印机驱动程序。那时候实达外设试图开发一款自己的中端激光打印机，因此需要全线配备软硬件人员，正是借助这个机会，L加入了激光打印机这个团队。</p>
<p>现在想来这个决定有点狂妄，不管是自己还是实达。</p>
<p>随着 iPad 这类平板的兴起，人们的打印需求越来越少，所以激光打印机这类东西越来越不受关注，似乎要被被强塞到旧纸堆里了。但不管它火不火，单纯从技术难度上看，这东西绝对比手机难做，虽然世界上所有做打印机的厂商加起来市值也不一定有苹果高。</p>
<p>激光打印机包括现在的多功能一体机属于是精密机械，机械、光学仪器、硬件、软件、甚至图形字体都搅在一起十分难搞，没有绝大的投资，绝对啃不下来。激光打印机等利润最丰厚的部分是面向企业的各种机型，眼下这块市场始终在富士施乐、佳能、理光等少数几家厂商手中，国内并没有厂商介入这一领域很可能是和介入壁垒过高有关。在2012年，很多日本有名的大公司都巨亏，但做激光打印机的还能支持，我想这也和这一领域壁垒过高，竞争对手不多有一定关系。</p>
<p>当时做这个项目的时候，团队里的人员都很痛苦，L这个做驱动的尤其痛苦。微软为打印机提供了标准的驱动程序叫Unidrv，如果基于这个来做，虽然也麻烦，但基本不用编程，主要工作是调整配置文件。之后这个驱动负责帮你生成打印机能认识的用专门语言描述的页面数据，那时最主流的页面描述语言有 HP 的 PCL 和著名的 PostScript。</p>
<p>但用 Unidrv 坏处是这样一来你能定制的东西就非常少，很简单的六合一功能都没有。所以如果真的自己开发产品，那驱动程序最好要自己从头写。但L当时没认识到自己写其实是不太可能的。</p>
<p>L当时的水平大概是这么个状况：C++ 基本会用，但达不到很高的水准，熟读《Windows 核心编程》，但大部分书中讲的内容没有用过，反倒是 MFC 用的比较熟练，但很可惜的是做驱动的时候 MFC 用不上。通过了高级程序员考试，所以各种通用算法和数据结构没什么太大问题。</p>
<p>而从头做驱动需要什么呢，你要了解 Windows 提供的 DDI 接口，要了解图形图像、字体、页面描述语言、色彩的知识。打印机驱动中最好做的是 UI，基本上用 Win32 就行了，最难的是做页面渲染，也就是把 GDI 描述的页面转换成相应页面描述语言（PCL）描述的页面。这一过程非常繁杂，根本不是初级程序员能搞定的。其中不说别的难点，一个图像二值化就能憋死很多初级程序员。彩色页面打到黑白打印机上，要把彩色图转为用黑白两色表示的灰度图，这东西那那么好弄的。</p>
<p>简单来讲是，L当时是两眼一抹黑，差距太大。</p>
<p>可以举个最简单的例子来形象说明这种差距大到什么程度：L当时基本的调试也不会，只能用 OutputDebugString() 输出用 DbgView 抓 Log，来看程序那里有问题。有人可能很奇怪说2001年时，VC6 的调试器不很好用么。秘密在于，Win98 的打印机驱动是16位的，VC6 完全不好使。直到后来找到 SoftICE 才解决了这个问题。</p>
<p>一边做驱动的开发，L一边把 Unidrv 搞定了，这样基本上不耽误其他硬件开发工作。同时L疯狂补各种知识，单只为了把 C++ 搞通就啃了数本书，其中最难啃的反倒是《C++程序设计语言》，这书即厚又不好懂，那时候哪明白什么叫不充分的抽象。但回头想来，读这些书其实对工作帮助不大，打根基的东西总是见效慢。这就和高烧40度要赶紧挂水一样，吃中药慢慢熬，就是没有立竿见影的效果。当你需要搞定矢量图形如何转换时，设计原则、面向对象这些东西对你能不能做出来一点帮助也没有，只有当你能做出来了，这些东西可以帮你把事情做好倒是真的。</p>
<p>做了一年多后，大家都发现这活实在不是一个人能干的，团队中就又加了2个人，所以L勉强算是个小头目了。但即使如此，整体进展仍然不太好，这和公司的策略有关，这家公司的核心产品，其实是针式打印机，并不是针式打印机，实达有着自主研发的整套针式打印机技术。而激光打印机实际上处在摸石头过河的状况，但偏偏这是个资本密集，技术密集的领域，这样一来，进展不顺也就在情理之中了。现在想来最好的解决方法其实是买套代码，在上面定制。等到 Win2000 成为操作系统的主流，借助 DDK 的例子，这个问题一定程度上得到了解决。</p>
<p>说到这里要抛开技术，说下大环境，要不然无法说明L的幸运。当时实达集团有三家子公司：实达网络专攻网络设备，如 Modem、路由器等，实达设备专攻外设，如终端、打印机和 Pos，实达电脑则主攻 PC。</p>
<p>当时这三家公司是冰火三重天的状况：实达网络日子很好过，发展也很快；实达外设则稳步发展；实达电脑则活的很不容易。整体来看实达实际上是处在下滑期，顶着 ST 的帽子让公司很难受，新的利润增长点又没找到，尤其是电脑部分，利润是必然是越来越薄。</p>
<p>在实达的三年里L的工资竟然没有一点调整，不过L当时没太注意这些，还是在研究驱动。借 Win2000 DDK 的启发，发现在打印处理器那个环节可以做很多事情，这样针对页面的各种操作就都可以自己来做了。</p>
<p>正当L把这个工作作出点进展的时候，家里出了点事情，于是跳槽，到了苏州一家也是做打印机驱动的公司。这纯粹是种幸运而不是种安排，如果不是家里有事，L未必会换工作，而在开始衰落的公司里做非主营项目真未必是什么好事情。</p>
<p>在此前整整三年里，L理清了打印机驱动的体系结构，打下了语言、平台的各种基础，确定了基本开发方法，找到了适合的二值化算法，但真没做出什么太大的贡献。</p>
<p>换到苏州这家公司后，借助过去的经验，职位有所提升，是以 Leader 的 Title 入职的，实际上是项目经理。不过一进公司，L很吃惊，当年从头开发驱动不过也就三个人，这里维护现有驱动搞了快20号人，主要做的事情就是修改现有的驱动程序，每次代码变更量不大。绝对的八旗子弟。</p>
<p>不过麻烦事也出现了，以前哪有那么多报告，现在需求的确认，日程的确认，合同的确认，记录的跟踪，问题的总结全都要做。一天到晚大事没有小事不断，会议数目直线上升。再加上外语这一层障碍，还经常出现说半天对方还没明白的状况。</p>
<p>L信奉适者生存，开始积极转型，把 PPT 写好，把 Excel 写好，文档里不能有小错误，读项目管理书籍，读估算书籍，把口语练好。过往的技术经验和基础还是很有帮助的，这让L可以比较快的把握各种需求的规模、难度等。</p>
<p>直到有一天，原来的老大离职了，L被提升成了部门经理，开始带自己的队伍。</p>
<p>公司由于处在成长期，团队的规模也就在不断扩大，而L的责任范围也就随之逐渐扩张。这时候L的工作又发生了变化，以前是关注一个项目，现在要关注多个项目，也要关心兄弟们的士气。</p>
<p>L这时候技术基础还行，也试图坚持写代码，可发现挺难的只能负责那种时限不是很严的，独立性比较强的模块，因为你不知道接下来会发生什么，出差、来客人、兄弟们吵架、流程出问题、临时分配的其它工作等等。</p>
<p>在经历了最初的几次失败之后，L的队伍逐渐成熟，项目成功的几率逐步提高。现在L比较自信，认为自己是一个比较合格的经理了。虽然不能讲任何一个项目到手里之后，都能保证它绝对成功，但至少可以尽可能保证它成功的几率较高。</p>
<p>可惜的是，L发现自己累积的技术基础一点点荒废，基本程序虽然看的懂，但写起程序来变的很慢，每一行代码调用每一个方法都要去仔细查找帮助文档。</p>
<h4 id="感悟程序人生-2"><a href="#感悟程序人生-2" class="headerlink" title="感悟程序人生"></a>感悟程序人生</h4><p>我们还是回到之前一直提到的几个维度：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">价值 x 实现程度（表达力，稀缺性，公司平台）&#x3D; 职场成就</span><br></pre></td></tr></table></figure>

<p>从L的经历可以看出来，技术是根本，即使你想做管理，即使你学了可能用不上那么那怕是当敲门砖用，你也要在恰当的领域里有一定的技术基础，这是价值的根本。要不然你可能没有做管理的机会。</p>
<p>任何一个企业招一个人都希望这个人能尽快为公司创造价值，这点和大学绝对不一样，企业不负责再培养你四年。因此，一个人很难对企业说：我什么都不会，我就会做项目管理，你招我吧。一般人很难遇到这么疯狂的企业。</p>
<p>第二点是你加入处在那个阶段的公司非常关键，如果L一直坚守在第一家公司，L是不可能有所提升的。原因很多，但其中最关键的一点是在整个产品线中，驱动程序是在一个配套的地位上，而在第二家公司驱动程序则是公司最核心的业务，这点影响非常大。</p>
<p>第三点是做可流动区域小的工作时，要特别当心。短期来看L运气还好，大致解决了自己的生存发展问题，但其实如果以20年为尺度来看，问题仍然存在，对打印机驱动从业人员的需求永远不可能像对网站开发人员那么强烈，其划定的区域也就非常有限。实际上这点在L的同事身上有了一定体现：你做的事情相对比较生僻，而你在这一领域上又沉淀了很久，一旦走出这个领域，又只有年纪大的劣势，而没有优势，这会导致一个人非常艰难。但以L而言，确实又因此而受益，正因为此领域有经验的人员稀少，L才有机会获得较快的提升。</p>
<p>第四点是一定要避免加入处于衰落期的公司。假设说，领域想对比较生僻，但公司能够为此支付一定的溢价，那也是有得有失。只要没有欺骗，当事人因为合适的薪资而选择了一个流动性不好的工作，这合情合理，风险理应由自己承担。但关键是L的第一家公司处在衰落期，三年不调整工资基本等价于降薪。如果L不是碰巧离开了，那么纯经济的角度看损失还是要大，一旦正好赶到房价暴涨后买房，那对人生的影响就不是一点半点。</p>
<p>第五点则是关于管理技能的可流动性。虽然说管理技能的大部分是共通的，但由于L的技术背景是驱动开发，L将很难成为电商类项目的经理人。</p>
<p>L的经历里还潜藏着一个冷幽默，当L不会做驱动的时候，他被分配去做驱动；当L不会做项目经理的时候，他被分配去做项目经理；当L不会做部门经理时，他被分配去做部门经理。大致上是在做自己能力不足以匹配的事情，L的人生仍然再继续，不知道此后的人生是否仍然会符合这条规律。</p>
<h3 id="一个技术牛人的成长经历"><a href="#一个技术牛人的成长经历" class="headerlink" title="一个技术牛人的成长经历"></a>一个技术牛人的成长经历</h3><h4 id="杭州李云的技术牛人之路"><a href="#杭州李云的技术牛人之路" class="headerlink" title="杭州李云的技术牛人之路"></a>杭州李云的技术牛人之路</h4><p>李云是《专业嵌入式软件开发》一书的作者，后来去了阿里，阿里并购了 UC 后，老李应该在主要负责 UC 浏览器的开发，大家可以去微博上找他。为了为后来人提供参考，把自己的经历非常详细的写了下来，在我看来，李云的经历非常的有价值，因此在这里与大家做一点分享。因篇幅太长，引入的时候去掉了部分内容，下面是李云的故事。原文参见：<a href="http://blog.csdn.net/hzliyun/article/details/8144320">http://blog.csdn.net/hzliyun/article/details/8144320</a> </p>
<p>故事的开始得从大学以前开始。从小受 “学好数理化，走遍天下都不怕” 观念的影响，我认为只要学好数理化就行了，所以偏科很严重，高二时英语还考过29分。那时也不爱读书，高三时，别的同学在复习，我却在看《晶体管技术》这类电子技术书。这种状态，直接的结果就是第一次高考落榜了。</p>
<p>落榜的那个暑假，父母为我的出路没少操心。在一天早晨刷牙时，当我妈对我说希望我去复读时，我当时脑海里想 “能象表哥那样考上大学那该多好啊！”，在这个念头驱使下，我答应了去复读。从那天开始，我顿悟了，真正知道自己要什么了。在复读的一年里，我学到的一种重要能力是自学，这为以后大学乃至职场学习打下了很好的基础。正因如此，我想给出我的职场第一感悟：自学能力是竞争力之本。</p>
<p>经过复读，高考总成绩提高了100多分，但也只够专科线。最终，我被南昌水利水电高等专科学校录取，专业是 “供用电技术”。这个专业相信很多人不知其所以然，其实就是电力自动化的变种专业，其专业内容主要是电站、发电厂高电压的继电保护技术。</p>
<p>大学读书期间，我开始有与人在成绩上一争高下的念头了，加上复读一年所获得的自学能力，以及自己的努力，学习相当轻松，尤其是只要与电子技术沾边的课程，都能轻松地胜出。三年共六个学期的学习，我拿了五个一等奖学金，一个二等奖学金。毕业时，我是系里唯一的一名优秀毕业生。期间通过了大学英语四级考试和计算机二级考试，获得了江西省电子技能比赛一等奖。需要提及的是，在大学期间所学的与计算机相关的课程只有：《电子技术基础》、《计算机组成原理》、《计算机软件基础》、《单片机技术》和《Basic 编程语言》。</p>
<p>在大学期间，我完成了人生很重要的一件事——找好了现在的妻子。由于她是浙江人，所以毕业时工作地点毫不犹豫地选择了杭州。那时很多同学的工作还是包分配的，而我来到了杭州的人才市场进行双向选择，那时找一份工作还是相对轻松的（注：我们大学录取那年的招生人数是90多万），投出一份简历就找好了工作。第一个工作单位是一家不到100人、地处杭州花港观鱼对面（三台山）的电力设备制造民企。</p>
<p>尽管选择去这家民企后立马到公司去做了实地调查，但由于没有社会经验，加上被问的人没如实反应，所以进入这家民企后所了解的情况让人大跌眼镜。另外也了解到单位会通过一些不入流的做法控制我们的户口，不让我们跳槽（那会儿的户口还是相当重要的，结婚要户口证明，有同事就因为户口被控制而登记不了）。而我们在进入这家单位时签订了六年的劳动合同。在这样的小企业干上六年意味着什么？！当时与家人打电话告知这一状况时，我都哭出来了（就在现在杨公堤与虎跑路交叉的、现早已不存在的一个电话亭里，记忆犹新呀！）。</p>
<p>尽管前途是那样的渺茫，但带有 “优秀毕业生光环” 的我仍坚信自己能做得比别人更好，因为有我的职场第二感悟：<strong>自信能让你与众不同</strong>，尽管有时的自信有点莫名其妙。在这个企业一开始的工作职责是电站设备的电气设计工程师，需要用 AutoCAD（到单位后学的）设计电气图纸，并指导工人最终完成电气设备装配及调试。期间，企业经营范围扩大，需要从事电子设备的生产，因此我开始有机会接触电子技术方面的设计工作。在兄弟单位一同事的帮助下，在一个星期内我掌握了如何用 Tango（后来更名为 Protel，现在的名称是 Altium Designer）进行原理图和 PCB 线路板设计。而且，这一个星期的设计结果最终成为了电气产品的一个部件。对于一个毕业不到一年的我来说，这是不小的进步。那时知道了什么是网络表、过孔、焊盘等，掌握了很多电子原件的工作原理（有的还自己用面包板做实验），明白了做电路板的大致业务流程，还能动手焊接电路板，熟练运用示波器和万用表进行调试。那段时间，我对电子技术的兴趣帮上了大忙，学习起来远比别人快。当我精通电路原理，能自如运用示波器和万用表调试电子产品时，别人却还不明白我的调试动机。我的职场第三感悟：<strong>兴趣是学习效率的催化剂，培养自己的职业兴趣</strong>。</p>
<p>第一次真正对编程感兴趣是从知道 PLC（Programming Logic Controller）开始的。当时的电站设备采用了三菱的 PLC，为了配合这一电气产品的需要，企业社招了一名懂 PLC 编程的工程师。由于老板担心我们相互学技术而 “翅膀变硬”，所以明确提出工程师所掌握的技能不能互通有无。当时看到这位兄弟能通过 “梯形图” 改变PLC的行为，真是觉得他太神奇了，仰慕不已。后来通过这位兄弟的私下帮助，我晚上偷偷地在厂房里面学习 PLC 编程。为了获得良好的学习效果，我设定了对电气产品的 PLC 程序进行重写的目标，且最终达成了这一目标（当然，由于这个目标不能让老板知道，所以我的 PLC 程序不能用于商用）。我的职场第四感悟：<strong>学习应给自己设置虚拟的项目目标</strong>，以做项目的形式提升学习效果，只有这样学到的内容才会深入而实用，切忌无目标地学到哪算哪。</p>
<p>一年多的功夫，我成为了某电气产品的技术负责人，对整个产品的所有技术细节都了如指掌，我带领了其他几个工程师实现了该产品的 “自主研发”。有趣的一件事是，老板当时并不知道我已经 “翅膀硬了”，想抵赖答应过的8000元项目奖金，年轻气盛的我在与之拍完桌子之后对其他工程师下令：“没有我的允许，谁也不能将电气图纸和电路原理图用于生产”。对抗的结果以老板兑现承诺而告终。这时我隐约地有了我的职场第五感悟：话语权首先来自能力，而不是职位权力。</p>
<p>我那时还学会了 CRC 算法并将之运用于 PLC 的串口通讯中，由于对计算机如何通过串口与 PLC 通讯获得采集数据存在很大的好奇心，所以想到了学习编程语言，并计划做一个能在计算机上实时显示 PLC 所采集数据的软件。在向负责 PLC 编程的兄弟表达了这一想法后，他给我的建议是：学习 C 语言比较难，Basic 语言则更容易。于是，我毫不犹豫地选择了自学 C 语言，因为我深信我的职场第六感悟：难学的技能一旦掌握更具竞争优势。</p>
<p>也正是从那时开始，我真正开始了成为软件工程师的自学之路。那时比较幸运的是，单位专为我配备了工作电脑，所以具备了自学的硬件条件。由于那时 Internet 还不普及，学习书籍都来自浙江大学的科海书店（后来眼见着它的店面越来越小，这也是进入电子商务时代的一个缩影），那时隔三叉五地到科海去找书，生活最大的花费就在于购书（那时这方面的书不少是质次价高）。当然，学习的过程或多或少还得瞒着老板。那段时间，别人午休我就编程，除了看书和做书后的习题，还一直朝实现自己的计算机监控软件这个目标迈进（参见我的职场第四感悟）。终于有一天，我用 Turbo C 在 DOS 环境下实现了具有串口通讯功能的、基于图形界面的监控软件（如果你用现在的眼光看那个软件，一定会说“很土”）。当我乐此不疲地向他人演示时，你可以想象我那时有多高兴和自豪！这种小小的成功助长了我的信心，也让我得到了我的职场第七感悟：用阶段性成果不断增强自己的自信，但最终支持自信的是能力，而不是自大。尝到了成功甜头的我随后拓展了自己软件开发方面的学习内容。那时的我已经下定决心要向软件开发方向发展，这种选择是因为我的职场第八感悟：<strong>做自己喜欢的事，如果那是自己的兴趣最好。</strong> </p>
<p>1999年的某月，在企业拖欠了一个月工资的情形下，“蓄谋”逃离企业束缚的我们（共19个工程师）经过几个月的劳动仲裁后，与企业解除了劳动合同。在离开这家民企的第二天，1999年11月的某天，我在浙江大立机电技术开发公司（即现在的大立科技。后面都简称为大立公司）找到了第一份专职的软件开发工作。我逃离束缚后能很快地找到新的支点，完全得感谢我的职场第九感悟：<strong>不论身处多么困难的环境，即使觉得前途渺茫，也不要放弃学习</strong>，否则就是“自断筋脉”。</p>
<p>在大立公司所参与的第一个软件项目，是使用 Visual C++ 从事 Windows 某变电站图像监控桌面软件的开发。尽管我之前自学过 C++ 语言，但那时并未完全掌握面向对象编程，尤其是其中的多态。我在该桌面软件中借鉴微软的示例软件 DrawCli，独立地实现了电子地图功能。正是通过掌握这个示例软件的设计与实现，我真正领悟到了面向对象设计的好处。也通过该图像监控桌面软件的开发经历，掌握了 Windows VxD 驱动开发、socket通讯、多线程编程、图像处理（锐化、伪彩处理、图像字符识别和图像对比等）、ODBC 数据库编程（用的是 SQL Server）等。</p>
<p>在妻子进入大立公司不久，由我担纲了新版图像监控软件的重新开发，这是我第一次担任软件项目负责人。在这个项目上，我可以尽情发挥，将我在老版本软件上所看到的设计不足完全克服。也正是通过这个软件项目，我的面向对象编程能力有了很大的提高，而且完整地做过了一个软件产品。用我现在的眼光来看：那时的开发工作除了引入了版本控制软件外，是不折不扣的作坊式软件开发；至于管理技能的提高，也可以说是微乎其微。</p>
<p>2000年底，大立公司因为业务拓展的需要，需开发嵌入式图像监控系统（系统中的前端产品是后来数字硬盘录象机的前身）。为此，公司社招了一位比我年长十岁的资深硬件开发工程师，他在进公司时已经有基于 AMD 的 Elan SC520 x86 嵌入式微控制器的硬件开发经验。他在进公司之初与章总交谈时指出：“做这类嵌入式产品，需要软件功底非常强的人”，章总的回答是：“你放心好了，我一定找一个最好的人与你搭档”（这是章总后来告诉我的）。是的，所找的那个人就是我！而其实那时我只有用 Visual C++ 从事 Windows 桌面软件的开发经验，可见公司领导对我能力之信任！我的职场第十一感悟：<strong>机遇很重要，但你得有能力才能抓住它</strong>。</p>
<p>我当时所面临的技术挑战，读者可以想象。要知道，在2000年时基于x86微控制器的嵌入式系统的开发人员国内还很少。我的自学能力、电子爱好的兴趣在这种挑战面前又帮了大忙。其实，做嵌入式系统开发最主要的是参考各种资料以便掌握各类技术细节，这得通过大量地阅读芯片手册、用户手册，以及研究 AMD 在其官网上所提供的示例程序。在这个过程中，就技术困惑坚持探究和养成各种好的工作习惯（思考习惯、笔记习惯、总结习惯、阅读习惯）非常重要。我的职场第十二感悟：<strong>职场首先比拼的不是智商，而是坚持与好习惯</strong>。</p>
<p>我独自完成了该嵌入式前端产品上的软件开发工作。其中包含的大致技术内容有：从编程的角度精通 x86 处理器架构； PCI、IDE 硬盘、网卡、串口、闪存等总线或外设的驱动；实时操作系统内核的移植工作；MINUX 操作系统的文件系统的移植； UNIX 操作系统的 TCP/IP 协议栈的移植工作。移植工作往往会碰到各种技术细节问题，等移植工作完成，对被移植模块的实现和背后的原理也已了如指掌。正应如此，这一时期的工作让我对操作系统的实现原理有了很深的理解。</p>
<p>除了软件方面的进步，我在大立公司时硬件知识也得到了很强扩充。不仅能轻松地阅读数字电路原理图，还自学了 VHDL 语言，使得拿到逻辑器件 CPLD 的 VHDL 程序就能调试软件（通过 VHDL 程序，可以了解编程所需的译码端口、相关信号的操作时序等）。还学会了如何使用逻辑分析仪辅助软件调试工作。前面提到的这位兄长式硬件工程师调侃我说：“你让我看到了中国软件的希望！”，而我将这话当成了对自己的鼓励。另外，这期间还考入了浙江大学专升本的通讯工程专业，给自己充电（2001年入学，2004年毕业，获多学期 “优秀学生” 和 “优秀毕业设计”）。</p>
<p>由于大立公司是浙江省测试技术研究所的子公司，它或多或少带有事业单位的气息。加上公司的技术舞台有限，以及妻子也在同一家公司工作，我于2003年4月份左右离开了大立公司。在我离开之前，浙江省科委已批复了公司的申请，分配给我一套福利房。在我离开之时，房子仍在建，不少同事对于我的离职很是不解，也劝我拿到房再走。但我有我的职场第十三感悟：<strong>当短期利益与长远利益无法得兼时，选择长远利益</strong>。</p>
<p>在大立公司工作期间，很希望自己能入职 UTStarcom 这样的通讯企业（那时的 UTStarcom 是多么地辉煌！）。计划离开大立公司之际，我向 UTStarcom 提交了求职简历。这次求职开始好像很顺利，但我真正入职 UTStarcom 的过程却很是曲折。</p>
<p>一开始当我收到 UTStartcom 的面试通知时，可能太希望能进入这个公司了，在没有很深入了解这个岗位的前提下，就去面试了，且马上拿到了 Offer。但后来才了解到，我拿到的是生产部测试开发岗位，与实际研发部门是有区别的。 当时很纠结——这是我想进的公司，但却不是我想要的岗位。如果拒绝生产部的 Offer，我很有可能与 UTStarcom 无缘。考虑再三，我还是选择了拒绝（参见我的职场第十三感悟），并重新向研发部门投了简历。</p>
<p>经过度日如年的一个多月等待（那会儿刚好发生了 SARS 疫情），在觉得入职 UTStarcom 研发部门无望的情况下，我入职了另外一家小公司。令人意外的是，在入职那家公司的第二天，我收到了 UTStarcom 研发部门的面试通知。在 HR 面试的那一轮中，HR 对我说：“你是我所面试的人中最有工作激情的”。那时的技术面试官中，其中一位是我日后入职后的上司——夏青（现在是恒生电子通讯事业部的总经理），他是我的伯乐。由于我的学历问题，在技术面试通过后，别人只要一位 VP 面试通过就行，我却需要两位。我的职场第十四感悟：<strong>学历是很重要的敲门砖，即便你的能力很强；学历尽管很重要，但能力才是最终的通行证。</strong></p>
<p>2003年6月份左右，我正式入职 UTStarcom 研发部，从事小灵通基站控制器（后面简称为基站控制器）的软件开发工作，也从此踏入通讯行业。在入职之初，由于自认为对于操作系统的原理很精通，又完整地做过软件项目，有点飘飘然，觉得自己是个 “小牛牛”。然而，入职后一接触工作就发现，内容没有想象的那么简单！</p>
<p>首先，基站控制器的软件规模比我以前主导开发的项目要大很多，而且需要熟悉通讯行业的相关信令。其次，尽管我那时精通 x86 处理器，基站控制器用的却是 PowerPC 8250，这意味着我得重新掌握它。再次，实时操作系统用的是前美国军方的、开源的 RTEMS，那是我第一次接触这个系统。最后，UTStarcom 的工作语言是英语，写文档和邮件都得用英语。尽管我那时能无障碍地阅读 MSDN 和各类芯片手册，但要着手写，却是一大挑战（口语不作要求，因为不需直接接触老外）。</p>
<p>一入职所分配的工作是网元网管部分告警抑制软件模块的开发。尽管 PowerPC 处理器和 RTEMS 操作系统技术细节的掌握与否并不影响日常开发工作，但我仍将掌握它们作为自己的努力目标，这是我的职场第十五感悟：<strong>技术细节掌握得越深，解决问题时就越能游刃有余。</strong></p>
<p>那时工作时间应付日常开发工作，业余时间则先将精力集中放在熟读 PowerPC 8250 处理器相关的技术手册上（晚上还得上夜大）。加起来超过 2000 页的英文资料，我读了不少于3遍。随着时间的推移，当我对 PowerPC 8250 处理器很有感觉之后，我将工作重点转移到了熟悉 RTEMS 操作系统的实现细节上。先处理器后操作系统的学习安排，是基于我以往在x86处理器上的工作经验而得出的，也是因为我的职场第十六感悟：技能的发展应采取深度先于广度且交替进行的方式，只有这样，面对大量的新知识才能更淡定。</p>
<p>RTEMS 是一个类 UNIX 的实时操作系统，也正因为接触这个操作系统我才意识到了自己在软件设计能力上存在很大的提升空间。尽管我对操作系统的实现原理胸有成竹，但却无力于构建一个象 RTEMS 那样的操作系统，也真切地体会到了 RTEMS 的设计之美。那时基站控制器上运行的 RTEMS 操作系统是由美国的新泽西研发中心移植好的，杭州研发中心只需在之上做应用开发。为了就 RTEMS 操作系统获得更好的学习效果，我又一次运用了我的职场第四感悟，设定了自己完成 RTEMS 新版本移植这一目标。</p>
<p>RTEMS 新版本的移植工作虽不在公司的日常工作范围内，但却得到了上司的支持。由于那时 RTEMS 还在开发新的功能，并不是很稳定，在移植过程中碰到各种奇怪的问题，有些问题还与 GNU 的 binutils 工具集有关（binutils 中包括 nm、ld、objdump 等工具。RTEMS 是用 GCC 编译的）。在无法确认是 GNU 工具集的问题之前，我甚至还向 Wind River 公司（其知名产品是 VxWorks 实时操作系统）寻求过帮助，因为那时用的是它的 JTAG 仿真器。移植工作虽曲折，但最终还是成功了（我所移植的版本并没有运用到产品中，后来的同事又做过了 RTEMS4.6.0pre4 的移植，且运用于产品中）。这一移植经历，让我对 GNU 的 binutils、RTEMS 操作系统的实现有了更为深入地掌握。</p>
<p>在 UTStarcom 工作的前期，我大多从事的是 RTEMS 操作系统相关的代码维护工作，工作内容除了 OS 内核，还包括 FTP、Telnet 等协议。直到中期转为做 E-Box 产品的互联网接入模块的开发工作。</p>
<p>E-Box 是一个企业级电话交换产品，其中还存在一块基于 ADSL 的互联网接入数据板（与现在的 ADSL 猫功能一样），用于实现企业网对互联网的数据接入功能，这一数据板使用的是 VxWorks5.5.0 实时操作系统（PNE 2.0），处理器是 Intel 的 XScale IXP425。那时 VxWorks 的 IP 协议栈还是基于 BSD 的，但 Wind River 对之做了一定增强。这段时期我的工作重点全在 IP 协议栈上（《TCP/IP 详解》这套书帮上了大忙）。这一时期的开发经历，让我对 PNE 的 Bridge、FastPath、MUX、PPPoE协议、Radix 路由算法和 VLAN 协议很熟悉，也学会了用 SmartBit 仪器和 Chariot 软件做网络性能测试。总之，让我在 IP（v4）协议栈方面的知识上和软件实现上有了长足的进步。</p>
<p>E-Box 产品数据板上的开发工作进行了半年后，管理层决定放弃，于是我被调到了 E-Box 产品的软件平台组。那时平台组刚好面临一个比较麻烦的问题——在命令行上运行 reboot 命令后，有时会出现整个系统挂起，而不是期望的重启。平台组的同事花了一个多星期的时间仍没有解决这一问题。</p>
<p>进入平台组之际，同样是在没有任何人安排的情况下，我自己主动承担解决 reboot 命令功能异常的工作。在我的职业生涯中，我一直热衷于去解决别人难以解决的技术问题，这是因为我的职场第十七感悟：<strong>越难的技术问题，其所蕴藏的知识越丰富，也越具学习价值</strong>。经过一天半的时间，问题被解决了。其根源在于，reboot 之前没有禁用 CPM 协处理器。我能那么快地解决这一问题，完全是因为之前熟读过 PowerPC8250 处理器的资料。</p>
<p>我在 UTStarcom 工作的后期，致力于 ACE 在 E-Box 产品中的一些应用，借助 ACE 的网络通信功能帮助实现在 Windows 平台上通过 Visual Studio 调试 E-Box 产品。我在《专业嵌入式软件开发》一书的《可开发性设计，一种高效且经济的开发模式》一章中所阐述的内容其实就是这一工作经历的总结与延伸。</p>
<p>另外，我还在 E-Box 产品上做过难度比较大的一个特性是，利用 PowerPC 8250 的 MMU 功能在 VxWorks 操作系统上实现了对任务栈的保护——当一个任务被调度而处于运行状态时，它的栈就处于可读写状态，而其他任务的栈全处于只读状态（VxWorks5.5.0 内核中，还没有 RealTime Process 的概念，这一概念是从 6.0 开始有的，所以那时我所做的这一特性很具实用性）。通过这一特性，可以有效地防止任务栈被意外篡改（比如野指针操作），即便出现篡改也能尽早发现根源。这个功能的实现过程需要调试 VxWorks 内核，那时 VxWorks 的源码虽对公司提供，但 Wind River 公司对所提供的 GNU 的 binutils 做了特殊处理，使得无法为内核代码生成调试所需的信息，结果是无法对内核进行源码级程序调试。由于我之前的 RTEMS 操作系统移植经历让我对 binutils 非常熟悉，通过使用一定的方法（说来话长了）绕过了 Wind River 公司所设置的障碍，成功地实现了对 VxWorks 的源码级程序调试。</p>
<p>在职场中，我不时能成功解决复杂问题和克服技术障碍。这与我的职场第十八感悟是分不开的：<strong>每次积累的点滴知识，一定会在将来不知不觉地发挥效能。</strong></p>
<p>2006年4月份左右，我离开了 UTStarcom。在 UTStarcom 所学到的，不只是前面所介绍的那些技术知识，更让我知道了软件开发的 “正规军” 是怎样的，与小公司相比，UTStarcom 的软件开发流程要正规得多；也经历了英文写作的 “挤牙膏” 时期过渡到轻松时期（好友周海东在我的英语学习中帮了不少忙）；看到了好友于善成如何通过大量阅读成为一个知识渊博的人（他的阅读量现在仍是我的学习榜样）；还有上司夏青的技术敏感度到现在仍让我为之称道，是我职场至今所见过的二位具有良好技术敏感度的技术管理者之一（另一位是我在 Motorola 工作期间认识的，后面会谈到他）；团队实力之强使得开发出的E-Box产品在我离开 UTStarcom 后不时能听到正面的评价。</p>
<p>说到这里有补充一点，我在大立公司工作时期，就很注重软件设计文档的编写，而且在我离开之时，不仅完善了所有文档，还为后继同事做了全面的培训。我始终坚守我的职场第十九感悟：<strong>通过文档化的方式传承知识给后继者是你的基本责任</strong>，因为你作为后继者时也希望如此，这也是对自己负责的一种表现。在 UTStarcom 工作期间，我进一步形成了将自己的技术想法写成文章与大家分享的习惯（那时同事贺旭东称我为 “作家”，而我则称他为 “点评家”），也因为自己在嵌入式软件开发技术上的长期点滴积累，开始有了写书的想法。</p>
<p>离开 UTStarcom 后，我入职了杭州华数集团旗下的雷科通技术（杭州）有限公司。公司当时的意向是安排我负责某宽带接入产品的软件开发工作。在这个公司，尽管只有两个月的时间但也做了些事。除了一个月内完成了宽带接入产品以太网交换芯片在 VxWorks 操作系统上的驱动开发，并使得产品支持 VLAN 功能外，还解决了好几个影响整个产品系统稳定性的严重遗留缺陷。这两个月的工作不光让我在技术团队中很快地树立了自己的威望，也使得公司高层管理者真切地看到了我的能力而在我提出离开时极力地挽留。这短暂两个月的工作经历带给我职场第二十感悟：<strong>别人对你价值的认可，其实不是简单地根据你的自身能力，而是根据你对他人和团队的贡献。</strong></p>
<p>入职2006年初在杭州成立的 Motorola 研发中心的故事得从面试开始。在入职雷科通不久，我收到了猎头的电话，虽然那时并没有换工作的想法，但也没有拒绝猎头投简历。随后我收到了 Motorola 的面试电话。那次面试过程记得很清楚，因为那是我所经历的第一次英语口语技术面试。虽然工作中从没有锻炼过英语口语，好在对于自己做过的技术知识很熟悉，也经常需要查阅英文资料，所以对于所做过的内容还能用英语勉强解释清楚。在面试的最后，我对印裔技术面试官说，“现在我的英语口语不好，但我相信只要有合适的环境，能很快地提高”。印裔技术面试官最后将我领到 HR 那，说了一声 “Yes” — 我的技术面试通过了！</p>
<p>面试结束的第二天，收到了 Motorola HR 的电话，告知 Offer 的相关信息（我的入职级别是E09，E09及以上的人在整个 Motorola 杭州研发中心占比大约为10%）。那时由于并没有换工作的想法，所以拒绝了 Offer。想法很简单，因为曾在 UTStarcom 这样的公司呆过了，所以对外企的工作并不是很向往，反而认为在雷科通这种小公司更能施展。在我拒绝了 Motorola 的 Offer 后，我将这件事告诉了身边的同事，他们的反馈几乎都是 “你应当去 Motorola”。</p>
<p>幸运的是，另一名 HR 再一次致电给我，试图说服我加入 Motorola。她当时说 “你一旦加入 Motorola，以后离开时所看到的就是 HP 或 IBM 这样的大公司”，也正是这句话打动了我。之后的经历证明，加入 Motorola 是很正确的一个选择！</p>
<p>2006年7月6日，我正式入职 Motorola 杭州研发中心。加入的初期是大量的内部培训，培训内容包括技术方面的、流程方面的和英语。Motorola 有着成熟的企业文化，通过培训可以让工程师很快地融入企业，使人行事像是 Motorolan（摩托罗拉人）。在经历了约半年的培训和学习后，2006年底，我开始参与 WiMAX 产品线上的 CLA 中间件软件项目。</p>
<p>尽管我在 CLA 项目上没有具体的工作（比如，没有缺陷修复工作会分配给我，也没有新的特性开发工作会挂在我的名下），但对整个团队所从事的技术工作都得负责。我的日常工作主要是设计方案评审、代码审查、帮助或带领团队解决技术难题等。</p>
<p>在 CLA 项目上工作了一个月左右，2007年春节之后，我被第一位派到 Motorola 的芝加哥研发中心做为期二个月的现场技术支持。之前尽管在公司有过英语培训，但要很好地听与说还是存在很大的障碍，加上芝加哥那边一起工作的是口音较重的印度人和巴基斯坦人，挑战可以想象。在芝加哥研发中心除了做现场技术支持，还得为后续人员的到来做铺垫。比如，租好房子、车子，准备好生活所需的一些家当（当时因为预算有限，我们住的是公寓，还得自己烧饭）。那段时间虽然因为语言的问题倍感压力，但在全英文的环境中，我的听说能力进步也明显。之后差不多每年一次的出国，见到以前认识的外国同事，总会有人对我说 “Your English is getting better”。对于自认为英语听说能力不行的同仁，请记住我的职场第二十一感悟：英语的听说能力只要有合适的环境，并勇于张嘴练习的情况下能快速地提高，不必担心。</p>
<p>CLA 软件在技术上属于运行于 Linux 操作系统上的一个中间件，它存在多个进程用于帮助通讯设备网元（包括 WiMAX 基站和接入网关）实现网管功能。由于软件架构的特点，使得 CLA 团队不时会碰到由于其他团队没有用好 CLA 而产生的技术问题，这类问题开始大多难以定位是属于 CLA 的、还是不属于 CLA 的，因而查错过程很低效。在 CLA 项目的后期，我希望通过引入新的软件设计方案帮助团队提高软件的查错能力，并改善软件质量。引入新设计需要增加很多代码，如何让管理层不担心由此而引入更多的缺陷是我着力这事时首先要考虑和解决的问题。</p>
<p>在这种背景下，我在 CLA 项目引入了单元测试，寄希望于通过单元测试提高新增代码的质量，以使管理层更具信心而获得他们强有力的支持。最终结果表明，在新增了近一万行代码的情况下，代码在最终发布后总共只发现了一个软件缺陷。这个项目上的工作经历让我第一次真正尝到了单元测试的甜头，在《专业嵌入式软件开发》一书中，单元测试方面的内容很多源于我在这一项目上的成功经验。我在 CLA 上新增设计中的 AED（Abnormal Exiting Detection）功能，在我离开 CLA 项目之后，还帮助团队发现了很隐蔽的多线程问题。当通过 AED 功能发现这一问题的同事高兴地跑过来对我说这个功能管用时，我的高兴劲写满了整张脸。这个项目的经历，也让我更加坚信我的职场第二十二感悟：<strong>在软件开发活动中，应设法通过有效的技术途径去解决工程困境。</strong></p>
<p>2009年初，Motorola 杭州研发中心迎来了一个重量级项目 —— WiMAX产品线的接入网关 ASN-GW，我被安排到该项目，角色是软件开发架构师。初期我的架构师一职只是杭州研发中心单方面的角色安排，而非全球性的（当时该产品由美国、印度和中国三个研发中心共同参与）。</p>
<p>在 ASN-GW 项目上与我一同共事的经理，是曾在 Motorola 美国研发中心呆了近十年、后来临时转到国内来工作的华人李亮（后面简称亮，习惯了）。他之前在美国工作时做过架构师、软件发布经理（Release Manager）等职，是一个对技术很有敏感度的管理者（我前面提到过的两位有技术敏感度的管理者之一）。我在此之后的成长，完全离不开他的支持与信任，以及他为我所创造的职场发展环境，能与他共事让我倍感荣幸和感激。</p>
<p>我从亮身上学到的第一个内容是如何与美国管理层打交道。总体说来，Motorola 在软件开发管理方面很是四平八稳，其管理存在两大特色，一是争夺项目的所有权（Ownership），另一个是质疑（Challenge）。前者使得各团队职责清晰，不容易出现突发问题或状况找不到负责人；后者使得团队在工作中有所作为，不至于让人浑水摸鱼。在面对美国团队的质疑时，我以前看到的大多管理者都很紧张，总想一味地达到美国方面的要求，但亮在这方面的表现却明显不同。他告诉我们（包括Team Leader）：“如果美国提的要求不合理，直接与他们‘掰’”。后来我认识到，美国方面做事其实很讲逻辑，只要我们对于他们所质疑的问题能给出合理的解释，很多异常事件根本就没什么大不了。我的职场第二十三感悟：<strong>不要用沉默的方式一味地迎合别人的要求，据理力争或许才是作为的表现。</strong></p>
<p>参与 ASN-GW 的呼叫处理子系统的开发工作后，整个团队经历了大约半年的成长痛苦。痛苦有几个根源，一是对 WiMAX 无线接入技术相关的国际标准不熟悉，另外则是对 ASN-GW 产品的现有实现不了解，而且产品的复杂度的确很大（其中一个技术指标是：必须达到99.999%的容错能力）。在半年的痛苦期中，我很重要的一个工作职责是帮助团队成长，作为亮这类管理层与基层工程师间的桥梁。比如，为团队起草《开发者指南》和《测试指南》这样的文档，且要求和引导工程师通过文档化的形式沉淀经验与教训，以便提高工作效率（虽然文档化方法的实施过程需要我不断地提醒，但这一方法被证明在这种时期很有效）；我也会在例会上毫不留情地指出工程师的哪些行为影响了工作效率。我的职场第二十四感悟：<strong>流程、文档的作用，不只是引导我们做完事，更能规范我们的行为和帮助培养工作习惯。</strong></p>
<p>亮在项目进展的过程中，一直向美国方面主张杭州团队必须设置架构师一职，也正是由于亮的一再争取，美国方面最终努力地帮助我向这个方向发展，不断为我分派属于架构师工作的任务（如更新产品架构模型、参与需求管理、参与系统设计文档的评审、完成新特性开发工作评估等）。亮那时告诉我，我应是杭州研发中心第一个真正从事架构师工作的人。</p>
<p>刚接触架构师方面的工作时，其实还是不大自信的，尽管我那时掌握了软件架构师所需的基础技术技能（比如，我的软件设计能力很强、UML 从1998年开始接触加上之后的持续学习所以功底也很好），但对于软件研发管理方面的内容，以及 WiMAX 无线接入技术知识的系统性认识还是相对单薄的。那时与美国同事接触下来的感觉是，他们的综合能力都很强，似乎随便一个人都知道如何做架构师，不少人有做 GSM、iDen 和 CDMA 产品的经验，而且长期工作于无线接入技术领域。随着更多地参与架构师方面的工作，不仅逐渐建立了自信，对 Motorola 的软件研发管理也有了更为深入地认识与理解。所看到的不仅仅是产品技术本身的复杂度，更有开发活动运作管理方面的复杂度。最终，我成为了整个 ASN-GW 产品的架构师。</p>
<p>在2009年，我考入了浙江大学的 MBA，同时还开始着手写自己的处女作《专业嵌入式软件开发》。在之后长达近两年的工作、学习和写作的三重压力下，我在时间管理上有很大的进步，抗压能力也得到了很好的锻炼，这时我的职场第十二感悟（指其中的坚持）又让我最终渡过了这段最为艰难的时期。（注：《专业嵌入式软件开发》一书其实不只专注于嵌入式，其中绝大部分内容是C/C++开发人员应当掌握的。当时书名中采用“嵌入式”三个字完全是因为给书定位的需要，害怕书名不具体而使人难以选书。当然，也正因为“嵌入式”三个字，使人觉得面太窄了。有利有弊吧！该书在各大网上书店都归类于“软件工程及软件方法学”，而非“嵌入式系统”）</p>
<p>2010年中期，NSN 宣布收购我所在的 Motorola 网络部门，收购活动直到2011年的4月份才结束。同时由于 WiMAX 市场的不景气，美国不少系统架构师转到了 FDD-LTE 产品线上，我也因为这一缘故担任了大约半年的系统架构师，主要负责 WiMAX 技术的移动性与网络安全方面的工作。</p>
<p>2012年7月份，因为 WiMAX 产品线裁员，我转到了 NSN 的 WCDMA 产品线。也从此开始离开了 Motorola 的研发管理环境，而真正步入了 NSN 的研发管理环境。</p>
<p>真感谢你花时间读到这！尽管我们常将“职业规划”挂在嘴边，<strong>实际上职场发展真的是一种“布朗运动”。你不知道下一站会是哪、也不知道后面将要从事什么工作、更不清楚后面会碰到怎样的老板。</strong>在众多不确定因素面前，或许参照我一路走来所总结出的职场感悟能让你不断地朝好的方向发展。</p>
<h4 id="感悟程序人生-3"><a href="#感悟程序人生-3" class="headerlink" title="感悟程序人生"></a>感悟程序人生</h4><p>上面的文字比较长，其中记录了李云成长过程中的各种细节。其中非常让人感动的是李云的这种永不放弃的精神，从文字中我们可以看到李云从来没有停止自己前进的脚步。这是非常可贵的，李云的成绩中几乎没有运气成分，完全的靠自己的双手把握自己的人生。</p>
<p>我们还是回到之前一直提到的几个维度：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">价值 x 实现程度（表达力，稀缺性，公司平台）&#x3D; 职场成就</span><br></pre></td></tr></table></figure>

<p>在这一公式下，你会发现李云道路的主旋律就是在一个技术路径长的领域里增值、增值再增值。不论是最初的 PLC 还是后来的 WiMax 都可以比较笼统的归到一个叫软硬结合的软件领域，这个领域技术路径比较长，和基于 ASP.net 做信息管理系统完全不是一个难度。从事这类工作其知识必须贯通软硬件，否则寸步难行。一个一直做纯软件的人，在这类领域中听都听不懂相关工程师在说什么。今天之所以很多程序员可以缺乏硬件知识也能做软件开发，关键在于 Windows，Java这类平台屏蔽了大量细节，而做上述这类工作时等价于需要撕掉这种屏蔽，重新面对软件最本来的面目。所以这天生是个技术路径长的领域。</p>
<p>在这样的领域中达到一定高度后，稀缺性会很自然的呈现出来。与此同时，公司平台的切换也使李云所站的位置越来越高，稀缺性越来越好。</p>
<p>李云的经历同样也说明了人生确实需要一种永动的势能，否则一旦他安于现状比如停留在大立公司，停止了自己在技术上的追求，那么也不会有现在的高度，而是会在某个环境下上过着相对比较稳定的生活。</p>
<p>在李云身上表达力起到了一定的作用，但作用暂时并不明显，技术的不断提高和积极的精神使李云并没有碰到这方面上的瓶颈。</p>
<p>如果与第一个故事里的主人公老A相对比就可以发现更多的事情。两者年纪相差不大，但却走出了截然相反的人生道路。同北大、清华、浙大这类顶级学校相比，李云的学校实在是差的一塌糊涂，如果在九几年两个人刚毕业的时候让企业进行选择，李云绝对是一点机会都没有，夸张点讲李云根本就不会有和老A并列在一起的机会。</p>
<p>但在2011年，经过十几年的奋斗之后，形式完全逆转，老A不再有和李云并列在一起的机会了。李云可以在各大公司间选择比较适合自己的工作，而老A只能被外包公司被动选择。形象点讲，老A出身名门，但人生一路下滑。李云毕业于专科学校，但靠自己的努力创造了命运。</p>
<p>也许有刁钻的人会说，李云这样有什么好，马云什么技术都不懂，阿里系一样千亿市值。这么想就危险了，所谓一念天堂，一念地狱即是如此。恰如人不能寄希望于中彩票一样，对于人生而言，理想可以远大，但手里要有看得见的适合自己的路径。崇拜马云先生可以，但马云先生自有其自身的艰辛和机缘，而大多时候这类成功完全不可复制。不具体了解这些，而单纯因为虚无缥缈的远大，而荒了现在，那就是好高骛远。</p>
<h3 id="一个创业者的十年"><a href="#一个创业者的十年" class="headerlink" title="一个创业者的十年"></a>一个创业者的十年</h3><p>我一直很犹豫要不要在这样一本书里去讲创业的故事，因为我一直相信创业是成功率极低的一项活动，只不过是成功者的光环太盛，才使这项活动吸引了过多的关注。</p>
<p>不是创业不好，而是说输不起的人不适合创业，而很不辛大部分人其实是输不起。</p>
<p>我们必须承认即使在物质基础非常薄弱的时候，人也可以有很高尚的理想，但大多时候理想往往植根于现实，也需要植根于现实。</p>
<p>好比说，一群人从悬崖上飞跃而下去体验飞翔的快感，这诚然没错，但有的人可以有很好的防护措施来保证不会摔死，但有的人却很可能会摔的脑浆崩裂。</p>
<p>后者过于惨烈了，我不想为之摇旗呐喊。</p>
<p>但最终还是决定放一个创业的故事在这里，但我会对其进行“负面”的解读，更多的去强调什么情形下不要去创业。</p>
<h4 id="戴志康和他的Discuz"><a href="#戴志康和他的Discuz" class="headerlink" title="戴志康和他的Discuz!"></a>戴志康和他的Discuz!</h4><p>很多人都知道戴志康的故事，下面的文字是根据公开报道整理而成，比如：CCTV 创业故事的专访，2006年戴志康做客新浪时的自述等。也正是由于公开报道很多，下面只是对这个故事的最关键点做一点陈述，并不会展开细节。</p>
<p>戴志康开发 Discuz! 的出发点并非是为了创业，而是找工作。</p>
<ul>
<li>2000年，戴志康考入哈尔滨工程大学，从2001年开始近2年多的时间，戴志康一直沉醉在 Discuz! 的开发之中，与此同时，戴志康的成绩变得极为糟糕，挂科14门。</li>
<li>2003年，戴志康准备开始销售 Discuz!，而不是再免费向用户提供。最开始的时候，销量非常惨淡。这其中有一个小插曲是，在毕业前1年，就有企业出30万年薪来招聘戴志康，从这个角度看，戴志康的原始目的达成了，但他放弃了这样的机会。</li>
<li>2004年，通过海外销售，戴志康赚到了30万。也是在这一年，戴志康创立北京康盛世纪科技有限公司（Comsenz），并被认定为高新技术企业。</li>
<li>2005年，Discuz! 开源免费，转向以服务赚钱。营业额达到500万元。</li>
<li>2006~2009年，公司获得红杉资本等公司的持续注资，用户量持续增加。</li>
<li>2010年，康盛创想（Comsenz）被腾讯收购。这个时候应该是商业模式上遭遇了一定困境。</li>
</ul>
<h4 id="感悟程序人生-4"><a href="#感悟程序人生-4" class="headerlink" title="感悟程序人生"></a>感悟程序人生</h4><p>创业的初期，技术、资金、人脉、主意等等，都可以看成是一个个筹码，创业者所主要要做的就是要把你的筹码转换为持续不断的现金流。随着现金流的不断放大，这个人的创业故事也就越来越成功。</p>
<p>从这个角度看，戴志康的最大筹码就是他的 Discuz!，已经很难看到沉浸了戴志康数年心血的最初的版本到底是什么样子，但恰如戴志康自己所陈述的这个产品一定是比较优势的（比如：速度、安全、负载能力等）否则不可能获得这么大的成功。</p>
<p>但恰恰也是在这一点上，导致事情很难被复制。在起点上戴志康和很多做共享软件的人很相似，唯一的差别只是用户的接受程度。而开发出一款广为接受的软件，不只是需要技术能力，也需要一定的时机和运气。你可能付出的比戴志康还多，但你开发的软件更可能是默默无闻，而不是被很多人接受。未必很多人做不出 WinZIP，但一旦时机不在，做出来也不会有那种辉煌。在创业故事中，技术只是一个较大的筹码，远不是全部。</p>
<p>从初衷和手段来看，戴志康的选择并不正确，单纯为了找工作，写一个软件出来远不是最有效的手段——很多大公司并不会因为你写过一个软件而招聘你，关注的还是某些基本功是否扎实。而一旦一个人因为某个软件而无法毕业，同时软件又默默无闻的话，那人生可能就会困顿。但从创业的角度看，有一款获得广泛认同的产品绝对是上佳起点，在那个时代里，太多的人重复了这个故事，求伯君的 WPS，王江民的 KV300，鲍岳桥的 UCDOS 等等。</p>
<p>创业的话题一直很火，戴志康这类的故事更是可以激励一大批年青的程序员，使他们有创业的梦想。很多人也在很多场合鼓励年轻人开创自己的事业，但对此我的观点则与主流相反，我认为大多程序员并不适合创业，而更适合走李云这类道路。道理很简单，赌博可以，但要输得起。在考虑创业前，在考虑巨大收益前，要考虑自己是不是付得起创业的基本代价。很大一部分人的经济基础其实是薄弱的，从家庭整体来看个可能是像在负债经营，在这样一种前提下走戴志康这类道路，冒的风险太大了。因为不管怎么说，创业成功始终是低概率的事情。</p>
<p>不是说创业没价值或不对，有基础的人在年轻的时候追逐自己的梦想不管怎样都是对的。关键是对于青春是唯一资本的人，如果把这个资本投资于高风险的事业，那么人生的风险就太大了。其实再别的场合也一样，风险与利益的比例值似乎总是个常数，风险高的事情，收益就大。买创业板的股票，升值空间大但也可能让你赔的一毛钱也不剩下；蓝筹股则与之相反。</p>
<p>我们总提到的公式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">价值 x 实现程度（表达力，稀缺性，公司平台）&#x3D; 职场成就</span><br></pre></td></tr></table></figure>

<p>更适合用于评定职场中人，而不适合评定制定规则的人。以戴志康为例，在开发 Discuz! 时他基本上处在持续增值的状态，一旦开始创业，则处在制定规则的状态，上述规则开始不适用，但在并入腾讯后，上述公式则又开始发挥作用。</p>
<h3 id="一个女程序员的编程之旅"><a href="#一个女程序员的编程之旅" class="headerlink" title="一个女程序员的编程之旅"></a>一个女程序员的编程之旅</h3><p>虽然上面的故事覆盖了程序员的主要出口，但如果缺一个女程序员的故事总感觉像人生没有婚礼一样，缺了点什么。女程序员之所以特别，实在是因为相对稀少。</p>
<p>好多女生似乎是真的不喜欢这个行业，但确实也有战斗力非常彪悍的女码农奋斗在编程第一线。单纯从气氛的角度看，女程序员真的是必要的，即使战斗力不是很彪悍。</p>
<h4 id="女程发贴引起的讨论"><a href="#女程发贴引起的讨论" class="headerlink" title="女程发贴引起的讨论"></a>女程发贴引起的讨论</h4><p>假如你在CSDN发了这样一个帖子，那会引起什么样的讨论？</p>
<p>三年前毕业于重点大学计算机专业，毕业的时候倒不是因为喜欢，而是当时IT环境较好，又是学这个专业的，毕业后就顺理成章的做了程序员。</p>
<p>毕业后，虽然工作的成绩还不错，薪水也还行，但我总觉得女的做这行特别不适合，忙起来披头散发，整天对着电脑、书本，整个一黄脸婆，特别没有女人味，就象没有水的花一样，枯燥、干渴。</p>
<p>没有尽头的工作，让我对未来的担忧也很大，真的不知道自己三，四十岁的时候是怎样的生活？</p>
<p>去年7月，我一狠心辞职了，想重新定位一下，找其它性质的工作，但因为没有干过其它的 工作，也不知道自己适合什么，加上没有工作经验，所以，半年后，弹尽粮绝，只有老本行能找到工作，没办法，只好又回到了原来的行业。</p>
<p>同行们的姐妹们，你们目前的状态如何？又有什么打算呢？</p>
<p>其实这是真的，这是2003年的一个老帖，各种回复也特别有意思，下面选几个有代表性的：</p>
<blockquote>
<p>回复： 趁早改行罢！</p>
<p>回复： 呵呵，我准备再干两年，攒点资本然后开个小店（能挣钱养活自己就行了），让自己闲下来做一些相做的事，比如说旅游，比如说养个BB。</p>
<p>回复： 常玩电脑的美眉要多吃维生素A，多喝水，不然皮肤很容易变怀啊。</p>
<p>回复： 我觉得各位女同胞应象软件配置管理、培训方面发展，个人意见。</p>
<p>回复：是啊，这是大家的心病。这世界上出名的人毕竟不多，要么干得很出色，要么就做一个平凡的女生，但我知道这世界上鱼和熊掌不可监得。事业和家庭难道永远是个矛盾，理想和现实亦是一对矛盾。男人全心全意扑在事业，老婆为家庭奉献这种模式倒可理解。如果倒过来，女孩子事业心太强，男人也不可无事业心，这个家庭如何能建设？  </p>
<p>回复：我工作快三年了，从入行就想着以后肯定得转行。具体出路在何方还是很渺茫，考研成功的概率不大，现在是漫长的等待。考不上就去考CPA希望转向财务方面。</p>
<p>回复：其实，我真的很想说“编程让女人走开！”尽管知道说出来肯定会被骂。好象CSDN里的阿婆阿妈阿姐阿妹都到了这里。</p>
<p>我可能入行时间比较短，感觉程序员这个职业好象是一次巨大的赌博，把你的所有身家、青春和精力都放到桌子上。</p>
<p>男人好赌，往往可以不顾一切，但女人有太多割舍不掉的。在赌掉了自己所有的青春后，可能换回来的却太少了。</p>
<p>其实程序员没有性别的分别，没有人会因为你是女的，而放过你的BUG。</p>
<p>其实，我很希望开发团队里有几个女程序员，女性承受压力的能力比男性要强，而且平时可以让男性们不至于太过邋遢。不过呢，我同意 MYAN 的话，女性最好不要当团队的领导，除了 MYAN 说的对下太苛刻外，还有一点，大局观不好。其实女性比较适合QA的工作。</p>
<p><a href="http://bbs.csdn.net/topics/20377173">http://bbs.csdn.net/topics/20377173</a></p>
</blockquote>
<h4 id="感悟程序人生-5"><a href="#感悟程序人生-5" class="headerlink" title="感悟程序人生"></a>感悟程序人生</h4><p>从讨论我们可以看出来，很少有人支持女生在程序员的岗位上好好学习，天天向上奋斗出自己的天空。</p>
<p>我个人从来不认为女生会在天分、才华上输给男生，包括写程序。</p>
<p>区别的产生似乎来源于上帝的安排，娃娃的孕育和抚养往往会牵扯女生太多的精力。娃娃一哭，当爸爸的还会没心没肺的不当回事，当妈妈的往往就会立刻放下手里的事情。人生里时间是有限资源，你这里用多了，那里就少了。而当平均智商相差不大的时候，时间是关键筹码。</p>
<p>职场里一定会有文化，但在成绩贡献面前是不能讲感情的，你错过两年，不管你是因为什么，始终还要和其他人站在一样的起跑线上。</p>
<p>这时候女生往往会输，至少在程序员这个群体里是这样，因为生活里可能更有价值的东西牵扯了她们太多的精力。</p>
<p>人生的价值其实是一种选择，能判定选择对错的往往也只有自己。</p>
<p>假如说一个女生真的选择过不同流俗的程序生涯，我深信她有和男生一样的机会，唯一的关键就是值不值得。</p>
<h3 id="观罢六段人生，体验是非成败"><a href="#观罢六段人生，体验是非成败" class="headerlink" title="观罢六段人生，体验是非成败"></a>观罢六段人生，体验是非成败</h3><p>《三国演义》开篇的那首《临江仙·滚滚长江东逝水》随着杨洪基先生的演唱是越来越有名了：</p>
<blockquote>
<p>滚滚长江东逝水， 浪花淘尽英雄。 是非成败转头空。 青山依旧在，几度夕阳红。 白发渔樵江渚上， 惯看秋月春风。 一壶浊酒喜相逢。 古今多少事，都付笑谈中。 </p>
</blockquote>
<p>大多数人的人生虽然远不如历史那般波澜壮阔，但对个人而言其间悲欢离合往往也是触目惊心的，是非成败转头空是一点不差。恰如前文一直强调的，在谋求安身立命的时候，我们可以不很成功，但关键是不能很失败。而在一个高频变化的IT世界中，对任何人而言，其人生基本趋势往往不进则退，中立状态是不太存在的。</p>
<p>外部不断变化增长的需求和自然规律所带来的精力衰退两者之间蕴含着非常大的矛盾，这就要求在速度放缓之前一个人必须走的足够高，足够远。</p>
<p>前面故事中，L、李云、戴志康的未来尚还可看，老A和退场者在IT这片世界里却是默默无闻了。</p>
<p>在年轻的时候，手里最大的筹码就是时间，时间用尽却没转换成价值，那么在高频变化下往往会被打回原形。而一旦如此，一个人在晚年怕也是没什么心情去吟唱“青山依旧在，几度夕阳红”的。</p>
<p>足够长的时间尺度下，往往偶然因素的作用会被压缩的很小，更多的体现的则是人生的必然性。而人生的必然性恰恰就在下面这个简单的公式里面：</p>
<p>价值 x 实现程度（表达力，稀缺性，公司平台）= 职场成就</p>
<p>程序员生存定律写到这里基本上写完了，下一章会做点总结，再接下来会做个合集的pdf出来，大致这样了。</p>
<h2 id="程序员生存定律——写在此书完结之时"><a href="#程序员生存定律——写在此书完结之时" class="headerlink" title="程序员生存定律——写在此书完结之时"></a>程序员生存定律——写在此书完结之时</h2><p>我个人其实有点宅，喜欢闷在屋子里看死了好几百年人写的书，看的多了就想自己写写。那时候一共构思了两本书，一本是想写给做了很多年软件的人看的，一本是写给要入行或者刚入行的人看的。写第一本的时候是比较狂妄的，那时候我觉得《人月神话》有些过时了，有的地方也挖掘的不够深，应该有本书来取代它的位置，所以使了很大力气来尝试把书写的很有价值，写到我认为能够超越《人月神话》的程度，但等书出来我才明白，能不能超越《人月神话》并不只是书的问题。</p>
<p>写完《完美软件开发：方法与逻辑》，我就着手开始写第二本书，也就是现在大家看到的《程序员生存定律》。写到现在这程度其实可以讲，这书基本写完了，但这书有个小问题，博文的侠少曾经和我提过这事，他说：大家有压力想成长时，那有耐心读你这类有点硬的书呢？我想了下，觉得他说的有道理，但却不太想做什么修改，主要原因是我认为这类书从质量上讲，有道理无疑比容易读更关键，毕竟这东西影响一个人的一生，而如果一个人都不愿意花点时间看看一些有道理的建议，那其实你也不太可能改变他，还提什么建议呢，毕竟我本意不是卖书，而是提有价值的建议。这就叫真的2B青年其实都是狂妄的，一旦认定自己有道理，特别容易瞎坚持。</p>
<p>《完美软件开发：方法与逻辑》出版后我就想，我也别总宅在家里应该出去和人接触下，于是就去了 InfoQ 的 QCon，南京那边的 TalenCamp 等活动，一圈走下来我发现世界处在巨变之中，做传统软件的如果不睁开眼睛看看这变化，很容易就被淘汰了。我觉得自己应该尝试做点什么，来实际体验下，结果就是V众投（公众号：vzhongtou），出发点也超级简单，我想买东西的时候一般会看看网上怎么说，可是百度哪怕知乎一旦牵涉到利益，它里面的信息就不太可信，无它，水军太厉害了。大家都学小米做社会化营销，这问题其实会愈演愈烈。于是就想尝试能不能做个大家愿意用，但产生靠谱信息的地方。这念头一出来，就特别有实现它的冲动，最后把事情简化成做一个只有验证用户才能回复投票，一人一号，一人一票的东西。从头做很麻烦，就选了WeCenter做基础，可即使这样也还是挺花时间的，《程序员生存定律》的完善出版也就耽搁了下来，后来再想想既然没空完善，那还不如就那么放出来让大家看看，用心读读的总该能体会到些东西，于是就一边做小修改，一边在博客上发这系列文章。从大家的反馈来看，我感觉有些同学还是学到一些东西的。</p>
<p>《程序员生存定律》这书一个比较特别的地方是如果你不思考其实他没啥用，我把影响人生成长的要素乃至他们的关系都列了出来，但这些东西只有在一个人愿意思考并结合自己实际情况的时候才会有用，有的书会写要先做 A，再做 B，再做 C，这本书不是的，他主要是讲决定 A，B，C 是啥的方法，当然有时候为了让这方法容易理解一点，也会写在一定条件下 A，B，C 具体可以是什么。</p>
<p>我比较真诚的希望要入行或者入行不久的人用点心思读读这书，绝对会赚回你读它的时间，我自己一边写也常一边感叹，这事要早点明白就好了。</p>
<p>对于程序员而言，过去这二十年其实是好几代人，求伯君他们是一代，任正非的华为等是一代，马云、马化腾、李彦宏的 BAT 是一代，移动互联网又是一代。之所以说他们是一代是因为他们都分别的经历了自己的高速成长期，对程序员而言赶上没赶上这个高速成长期，结果完全不同。而我碰到的人里面有华为前一百号员工，但早早离开的，有莫名其妙从比较牛的外企出来加入了一个叫百度的鸟公司，接下来百度上市，一下子拉开和辛苦奋斗的群众的距离的。这人生还真是很奇妙的，而要想增加抓住这类机会的几率，无疑的要解决好内功和选择的问题，谁能说这问题不重要呢？</p>
<p>再接下来会把这个书做个 pdf 版出来，方便大家阅读，请稍后。</p>
<p><img src="/images/coding/come-on.jpeg"></p>
]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>程序员</tag>
        <tag>职场</tag>
      </tags>
  </entry>
  <entry>
    <title>月光族的最佳财务规划</title>
    <url>/money/the-best-financial-plan-for-the-moonlight-clan.html</url>
    <content><![CDATA[<p>刚出校门的90后，挣得不多，如果没理财观念，便有可能存不下钱。90后年轻人攒不下钱的原因无非下面几种：</p>
<ol>
<li><p><strong>赚得不多，储蓄更少。</strong></p>
<p>刚出校门收入还不太多，这个时候随便吃吃喝喝，付个房租就感觉促襟见肘了，能攒下的钱非常有限，攒不下钱更说不上取得投资收益，就会出现月月光的循环。</p>
</li>
<li><p><strong>预期太好，享受太早。</strong></p>
<p>刚工作不久就养成了泡咖啡馆的习惯，工作两年想着贷款买车，衣服、化妆品讲究品牌了……诸如此类提高生活品质的做法，也是年轻时攒不下钱的原因。</p>
</li>
<li><p><strong>没有规划，花钱随兴。</strong></p>
<p>花钱没计划，小钱不算计，在收入有限的情况下往往是既没有得到奢侈的享受，也没有存下资本，钱莫名其妙就花完了。</p>
</li>
</ol>
<p>肯定会有人说，年轻的时候不吃好点、穿好点、漂亮点，多认识人，来一场说走就走的旅行，到老了有钱有闲，却身体不行，啥也干不成多亏。所以，消费就要趁年轻啊。</p>
<p>确实，省钱不能变成小气鬼，也不能因此束缚了自己的手脚，啥都不敢尝试，但我们要合理地花钱，心里有谱儿地花，花钱的同时还能存下发展的资本。</p>
<p>人一生要花的钱也是有规律的，这个规律告诉我们的就是：不能花到人还在，钱没了的境界。</p>
<p>因为一生的支出规律是基本可以模拟的，我们可以发现：第一个支出高峰期是30岁~35岁，这一阶段的主要指出是成家立室；第二个高峰期是50岁左右，上有老下有小，年幼的孩子长大外出求学、父母进入老年；第三个高峰是漫长的养老考验。</p>
<p>对于普通人来说，花钱有一些避不开的羁绊：年轻的时候没收入，求学和生活的钱由父母出，年纪大了也必然要把钱花在子女身上；60岁以后，收入来源减少，如果没存购三十年的养老金，就需要子女的支持，相反如果我们老了还能养活自己，那子女在中年时的压力就会小很多。</p>
<p>以你这一代人为参照标准，上下各一代人，共三代人的收支情况互为因果，决定了你能花多少钱。如果上一代的积累很多，30岁的人买房、买车的消费压力就会小；如果下一代的收入高，退休后30年的生命质量就会高。反之，上一代的压力也可能会传导到第三代。不是只考虑时间或者只考虑自己就可以放心花钱的。</p>
<p><img src="/images/money/money-intergenerational-transmission.png"></p>
<p>在各种排列组合中：</p>
<ul>
<li>蓝色的组合对你这一代最有利；而黄色的组合对你最不利。</li>
<li>最左侧组合：富人是这么造就的。</li>
<li>最右侧组合：苦逼的一生。</li>
</ul>
<p>这就是关于支出的全部真谛。看看自己处于哪个位置，又在超哪个方向运动？这样，你就知道该怎么花钱了。</p>
<p>送上给年轻人的花钱法则：</p>
<ol>
<li><p>像男人一样花钱。需要什么买什么，目不斜视法，不要走走逛逛、浪费时间又消磨金钱。</p>
</li>
<li><p>为健康和快乐花钱，回报比花在服饰和美容上的更高。</p>
</li>
<li><p>别太早为享受花钱，吃点儿苦、绕点儿道以后才能把钱花到刀刃上。</p>
</li>
<li><p><strong>花钱买资产，别买折旧</strong>，生命只有3个月的东西三个月后再做决定吧。</p>
</li>
<li><p>不要根据经济环境花钱。大环境好就敢花钱、敢负债，美国人民已经拿他们的人生证明了这经验不好用。</p>
</li>
</ol>
<p>最后，再奉上“月光族小白收支大作战”：</p>
<p>假设你的月收入只有3500元，而且又是一个标准的月光族。千万不要气馁，只要按照老班的收支规划，小日子照样可以过得很好。</p>
<p>首先把工资分成五份：第一份900元（大约月收入的25%），第二份500元（大约月收入的15%），第三份250元（大约月收入的7%），第四份300元（大约月收入的8%），第五份750元（大约月收入的22%），第六分800元（大约23%）。</p>
<ul>
<li><strong>第一份的900元用来当生活费：</strong>这么少的生活费每天只能分到30元，早餐一个鸡蛋、一个面包、一杯豆浆；中餐一份快餐，一个水果；晚餐自己开个小灶，煮点饭，加俩菜，睡前一杯牛奶。这样一个月的伙食大概是800-900元。如果你还年轻，身体暂时没有太多问题，这样的食谱够你数年内不会有健康问题。</li>
<li><strong>第二份的500元用来交朋友：</strong>电话费可以用掉100元，交通就坐公交车吧，每月用掉100元，每月请客两次，每次150元。但你不能随随便便请人吃饭，要记住，要请比你更有思想的人，比你更有钱的人，和你需要感激的人。每个月坚持请客，一年下来，你的朋友圈应该已经为你产生价值了。你的声望、影响力正在提升，形象好又大方。</li>
<li><strong>第三份的250元用来学习：</strong>每个月可以有50元用来买书，钱不多，买来的书一定要认真阅读。看完后还要把它变成自己的语言讲给别人听，与人分享可以提高信用度和亲和力。另外的200元存起来，每年参加一次培训，等收入高一些了，或者有额外的积蓄，就参加更高级的培训。参加好的培训既可以结交志同道合的朋友，又可以学习平时难以领悟的知识。</li>
<li><strong>第四份的300元用于旅游：</strong>一年至少奖励资金外出旅游一次，生命的成长来自不断历练，每年都出门，几年下来会收获很多美好的回忆，而这些经历也会成为好好工作的动力，能让你变得更加热情、更加有能量。</li>
<li><strong>第五份的750元用来投资：</strong>先买一份意外险(通常都比较便宜)，然后可以买基金，也可以去炒股，或者等攒够了一定资金去做银行理财。当然，投资是需要学习和坚持的，趁年轻理财在未来一定会获得更丰满的收益。</li>
<li><strong>第六份的800元用来租房：</strong>这些钱在一线城市可能只有租床位，在三四线小城就能租到不错的单间了。反正年轻，收入不多的情况就酌情选择吧。居大不易，改善居住条件就要靠自己一步步拼搏了。</li>
</ul>
<p>好了，学到这里再说自己没钱可就不行啦，赶紧攒起来吧。</p>
<p>尽管已经21世纪了，还是有不少小伙伴儿生活在没钱的水深火热中。有钱人高唱着：“我穷得就剩下钱啦！”其实是真没体会过穷的艰辛滋味。没钱，让人缺乏安全感终日生活在惴惴中；没钱，当家庭遭遇挫折就再也没有从容；没钱，还让人只能低身俯就选择眼前的目标。</p>
<p>这么多没钱带来的艰辛故事，我们该怎么奋力拼搏、一举摘掉穷帽子呢？本文就是关于“拯救没钱君”集锦。有穷困带给人的心酸往事，也有困境中成功逆袭的真实案例，最后是诚意奉上的“拯救月光族宝典”，告诉你花钱的实质和规划的方法。</p>
<p>老话讲：莫欺少年穷。年轻就有时间、有力气，年轻就有机会、有希望。毕竟新时代了，如果一直穷下去，那就是你自己的错！</p>
]]></content>
      <categories>
        <category>money</category>
      </categories>
      <tags>
        <tag>赚钱</tag>
      </tags>
  </entry>
  <entry>
    <title>论物联网浪潮下嵌入式工程师的转型</title>
    <url>/coding/the-transformation-of-embedded-engineers-under-iot.html</url>
    <content><![CDATA[<p>这个时代，大家都在谈转型，今天我们也来说说嵌入式工程师的转型！</p>
<p>虽然嵌入式系统已经有30多年的历史，但是原来一直是隐藏在背后的，自从物联网上升为国家战略后，嵌入式系统也从后台走到前台，成为备受瞩目的一部分。</p>
<p>虽然很多学者和业界人士都意识到，嵌入式系统将会迎来前所未有的发展机遇，但是嵌入式工程师必须认识到，随着时代变迁，我们自身的意识也要跟着进步。原来的嵌入式系统是孤立在一个个产品中的独立系统，而如今在物联网时代，这些独立的系统要连接成一个大网，安全性和可靠性都上升到一个新的高度。</p>
<p>不仅如此，嵌入式工程师的关注角度也不能再仅仅局限于技术、产品，而应该树立广义的服务意识，站在更高的角度上统筹嵌入式系统能够给物联网带来哪些服务！</p>
<p>那么，我们该如何看待嵌入式工程师的转型问题呢？</p>
<p>我想这里讨论的嵌入式工程师转型问题，并不是讨论嵌入式工程师应该如何进行职业规划，如何从初级工程师走到技术主管、产品经理、系统架构师等等。而是讨论在物联网的大环境下，嵌入式工程师应该如何迎接挑战、把握机遇。那么简单说一下我的看法，希望没有跑题吧。</p>
<p>我认为近年来嵌入式培训的火热，并不能说明社会对嵌入式工程师的需求激增，而是表明我们的生活已经离不开计算机技术，社会需要更多真正懂计算机技术的人。正如前文所述，随着时代的变迁，嵌入式走到了前台，传统的嵌入式概念也得到了延伸。了解时下最火的科技名词，如3D打印、无人机、VR、机器人、人工智能、工业4.0等，可以知道相比于传统嵌入式，如今的嵌入式开发需要更强的控制器、更大的RAM、更快更安全的网络性能，同时需要结合传感器和云计算技术。显然，对嵌入式工程师的要求更高了，类似于制造业产业升级，我们嵌入式工程师也要升级！</p>
<p>一个永恒的主题是学习，不管处于哪个层级都要不断学习才能紧跟时代步伐。由于篇幅有限，这里就不讨论技术本身了，但我想说一下开源。如今的世界是开放的，软件的开源运动所造成的影响不容忽视，嵌入式工程师在开发产品时不可能像以前一样封闭了，所以我们一定要积极融入开源社区，以开放的态度去学习。正所谓海纳百川，有容乃大。另外，由于知识的爆炸性增长，嵌入式工程师需要重视对知识的管理，所谓好记性不如烂笔头，多写技术博客有利于总结经验、提高开发速度。同时由于开发模式的转变，如今的嵌入式开发是模块化的开发，会更便捷、更注重成本和用户体验，所以嵌入式工程师应该提高服务意识，不能只考虑技术问题，要多从客户、用户角度思考问题。</p>
<p>我曾想，以后会不会出现以服务为核心竞争力的科技企业呢？</p>
<p>最后，机遇与挑战并存的今天，嵌入式工程师应该多实践、多思考、多交流，但也不能在浪潮中迷失自我，还是需要花点时间沉淀下来，用心做好对社会有价值的产品。</p>
]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>程序员</tag>
        <tag>职场</tag>
        <tag>物联网</tag>
      </tags>
  </entry>
  <entry>
    <title>知识管理的重要性</title>
    <url>/coding/the-importance-of-knowledge-management.html</url>
    <content><![CDATA[<h2 id="什么是知识管理"><a href="#什么是知识管理" class="headerlink" title="什么是知识管理"></a>什么是知识管理</h2><p>一般是指个人或组织利用软件系统或其他工具，对日常工作、生活中大量的有价值的想法、方案、成果、经验等知识进行分类存储和管理，积累知识资产避免流失，促进知识的学习、共享、培训、再利用和创新，有效降低个人或组织的运营成本，强化其核心竞争力的管理方法。</p>
<p>由于计算机行业发展日新月异，因此程序员更应该注重知识管理。</p>
<h2 id="为什么要管理知识"><a href="#为什么要管理知识" class="headerlink" title="为什么要管理知识"></a>为什么要管理知识</h2><p>计算机行业的一个特点是新技术更新特别快，意味着程序员需要不停地学习，才能跟上行业的发展。所以，知识管理对程序员非常重要。有意识，成体系地管理知识能够：</p>
<ol>
<li><p><strong>更有效地学习新的知识。</strong></p>
<p>如果我们已经建立好一个技术知识体系，新的技术也只是在其他技术上建立起来的，有了坚实基础，学习新技术就会更有效。</p>
</li>
<li><p><strong>更好地掌握知识。</strong></p>
<p>使用合适的工具，正确的方法，可以更好地掌握知识，让知识凝固在脑海，而不是流走。</p>
</li>
<li><p><strong>节约时间成本。</strong></p>
<p>程序员经常遇到同样的问题，例如说部署开发环境的时候，如果有把解决方案记录下来，就能省去重新解决问题的时间。</p>
</li>
</ol>
<h2 id="如何管理知识"><a href="#如何管理知识" class="headerlink" title="如何管理知识"></a>如何管理知识</h2><p>程序员的知识获取途径大部分来自于搜索引擎（谷歌可以提高搜索效率）和技术书籍，这与其他行业不同。主要原因是技术知识一个主要来源是互联网，例如说技术博客，技术文档等。因此，程序员的知识管理主要围绕互联网展开（并不意味着书籍就不重要）。</p>
<p>我们把程序员的知识管理分为三个过程：</p>
<h3 id="1、知识积累"><a href="#1、知识积累" class="headerlink" title="1、知识积累"></a>1、知识积累</h3><p>想想我们习以为常的知识积累方式有哪些？也许记笔记是我们最常用的一种。对于程序员来说，用笔记录笔记并不现实，我刚学 C++ 的时候就是把语法记在笔记上。实际上，这种做法是很低效的。更有效的方法是用笔记软件帮我们记录文章。例如说，印象笔记，有道笔记等。</p>
<p>一开始我看到好的技术文章时，都是加书签存起来。后面发现这样不能离线访问，而且链接可能会失效。后来用上了笔记软件，于是我可以把文章保存到笔记中，随时可以翻出来看。可以说，笔记软件给知识积累带来了极大方便，同时可以分类管理不同的知识。</p>
<p>知识积累难在养成积累的习惯。以前我解决某个问题，谷歌了很久找到一篇文章解决了问题。解决之后并没有记录下来，结果下一次遇到同样问题，我又浪费了很多时间搜索解决方法。重复多次之后，我意识到这是个严重的问题。所以逐渐养成了保存各种文章的习惯。这些网上积累下来的文章，成为了我知识体系的土壤。</p>
<p>现在开始，使用笔记软件分门别类地保存网上看到的文章，这里要着重强调一下<strong>分类的重要性</strong>，好的分类可以节省你以后重新检索文章的时间，不要把时间浪费在不必要的劳动上。笔记软件一般都会提供浏览器插件，保存起来是很方便的。</p>
<h3 id="2、碎片整理"><a href="#2、碎片整理" class="headerlink" title="2、碎片整理"></a>2、碎片整理</h3><p>最快的方法不是搜索引擎，也不是 man 手册，而是个人 wiki。</p>
<p>与大家平常所知的 wiki 不同，个人 wiki 主要是用来记录知识碎片的，例如说：某个常用命令的语法，特定的软件配置等等。如果还是不理解，可以看看我的 <a href="https://getiot.tech/">个人 Wiki</a>。这些知识碎片是我们初步消化的知识，只不过因为太过碎片，不能够组成完整的知识体系。很多人以为把看到的文章保存到自己的笔记里面，就有一种已经掌握它的错觉，结果保存了成千上百的文章，却一篇都没认真看完。别人的文章是他的知识沉淀，并不是自己的。随时把文章中的精华提取整理到 wiki，才能初步消化知识，为后面的思考加工做准备。</p>
<h3 id="3、思考加工"><a href="#3、思考加工" class="headerlink" title="3、思考加工"></a>3、思考加工</h3><p>写博客是最好的思考加工知识的方法。</p>
<p><strong>博客少写纯操作指南类的文章。</strong>网上大部分博客写的都是纯操作指南类的文章，例如，如何搭建 LAMP 之类，可能作者自己都不清楚为什么要这么做。不是说纯操作指南类的文章不好，相反我觉得这种文章很重要，只是它的位置不对。它应该放在 wiki 中，因为纯操作指南类的文章只是描述步骤，关注点是怎么做，而不是为什么。写博客的关注点应该在为什么，讲清楚为什么要这么做。另外不要钻牛角尖，我说的是纯操作指南，不要以为只要是搭建环境之类的文章都不能写，这里的“纯”代表只给步骤，不提背后的原理。其实写得好的操作指南应该力求让读者知其然，知其所以然。</p>
<p>定期写文章。万事开头难，动笔开始写作很难，一旦开始就停不下来了。养成定期写文章的习惯，至少确保一个月一篇的节奏。</p>
<p>自荐文章到各个技术头条。例如说：伯乐头条，开发者头条，极客头条等，有读者才有动力，同时也是保证自己写好文章的监督。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>知识积累：使用笔记软件保存好的文章，积累知识。</li>
<li>碎片整理：在个人 wiki 上记录初步消化的知识碎片。</li>
<li>思考加工：对存在笔记和 wiki 中知识进行思考加工后写在博客，甚至制作成视频。</li>
</ul>
<p>以上讲的是如何在互联网中学习积累，但是千万不要忽视了看书这一重要方法，书中的知识是成体系的，知识密度高，网上的文章良莠不齐，不成体系，比较碎片化。合理分配时间看书和上网学习是很重要的。</p>
]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>程序员</tag>
        <tag>职场</tag>
      </tags>
  </entry>
  <entry>
    <title>我的开源之旅</title>
    <url>/coding/my-open-source-journey.html</url>
    <content><![CDATA[<p>在上大学之前，我几乎没怎么用过计算机，所知道的计算机知识也仅限于如何在 Windows XP 上复制粘贴、下载音乐，以及玩金山打字上的游戏。所以大学选的自然不是计算机相关的专业，也从来没有想过自己会成为一名程序员，并且深受开源思想的影响。</p>
<p>而我开始研究计算机相关技术，是在大二的寒假，因为我的笔记本电脑需要装 Win7 系统，而我当时不懂如何装系统，所以就去找电脑店的工作人员帮忙，被告知需要收50元的服务费，然后一怒之下我就下定决心要自己安装操作系统了。然鹅，我当时的电脑水平仅限于使用那几个 office 工具，于是我从图书馆借了几本书，诸如《xxx电脑入门》、《xxx电脑组装》、《xxx电脑维修》、《xxx电脑系统安装》之类的书。因为当时穷，生怕弄坏电脑，所以花了一个星期时间看完这几本书后才敢动手，最后顺利安装上 Win7 系统，成就感满满。接着，顺便安装了一个 Ubuntu，从而打开了进入另一个美妙世界的大门。</p>
<p>于是我开始对比 Windows 和 Linux 的异同，买了一本《<a href="https://union-click.jd.com/jdc?e=&p=JF8BAMAJK1olXDYCV1tYCkIfAl9MRANLAjZbERscSkAJHTdNTwcKBlMdBgABFksUBmoKElMUQl9HCANtU0tDQxFVZCx2FlJ2JA42ezNsam53XVcZbQcyVF9cCk4XB2oKHWslXQEyAjBdCUoWAm4NH1wSbQcyVFlfC0kXBWsLHl8XWzYFVFdtVQ9FWSddSxhHFTYyZF1tOHsXM2w4WTUdDQVVXVcPDU4TADgNTFMXDgMDV1dbDEJDAm8BSFtADjYAVV9ZAXs">鸟哥的 Linux 私房菜</a>》跟着敲命令，可是这本书上用的是 CentOS，和 Ubuntu 使用上还是有点区别，于是我开始逛论坛寻求支援，例如 <a href="http://bbs.gdut.edu.cn/">南国飘香</a>、<a href="http://www.chinaunix.net/">ChinaUnix</a>、<a href="https://www.csdn.net/">CSDN</a> 等。接着发现了 git 这个工具，还有 <a href="https://github.com/">GitHub</a> 这个网站，在 GitHub 上可以找到很多很好的开源项目。然后发现了 Arduino，才知道原来硬件也可以开源。后来买了一本《<a href="https://s.click.taobao.com/t?e=m=2&s=RMkXBD2HM5kcQipKwQzePOeEDrYVVa64K7Vc7tFgwiHjf2vlNIV67kSUOaKZGzRRIfNVgZHErC6nFi3wFBXvYUtYIXyQ5+daGX93X4IFTwPx/VncyXNiWXW0BscCR/BjdZr7RBnLmJomXO35yxsace7A7WcFGqFRpb1VztrmYJMzPa4RA/izI37AvE0CWngaomfkDJRs+hU=&scm=null&pvid=null&app_pvid=59590_11.88.143.49_659_1632317761228&ptl=floorId:17741&originalFloorId:17741&app_pvid:59590_11.88.143.49_659_1632317761228&union_lens=lensId:PUB@1632317685@2104fcd3_0af9_17c0db740ae_1a9a@024goW9IpOdAYAadkHG17ngK">若为自由故——自由软件之父理查德·斯托曼传</a>》，发现原来书籍也可以遵循 GPL 协议，再然后发现了 gitbook。以至于后面想起伟大科学家——尼古拉·特斯拉曾经研究的无线电力传输技术，这种开放能源的思想不就是如今的开源思想吗？</p>
<p>大学毕业后，毅然决定找一份与 Linux 相关的工作，我觉得这是我做过最好的决定之一。因为它让我开拓了眼界，改变了我的思维方式，积极地融入到开源社区中让我感到快乐，并且能够很好地提升技术水平。如今我作为一名嵌入式工程师，得益于各种开源硬件和软件，让我的工作得以顺利开展，当然我也会将我的成果反馈回去。</p>
<p>我很喜欢《<a href="http://download.csdn.net/detail/luckydarcy/9667131">大教堂与集市</a>》中的一句话，“<strong>如果你有正确的态度，有趣的事情自然会找到你。</strong>” 如今，开源运动在已经在软件行业取得成功，我认为开源这种形式或思想同样适用于很多传统行业，例如教育行业。我想我将会投身于这场革命之中，积极传播开源文化。</p>
<p>开源不仅局限于软件领域，开源更意味着自由选择的权利和对知识开放的追求，我想这就是开源之美。</p>
<hr>
<p>这里贴几个链接 &gt;&gt;</p>
<ul>
<li><a href="https://linuxstory.org/free-chinese-programming-books/">编程类开放书籍荟萃</a></li>
<li><a href="https://github.com/justjavac/free-programming-books-zh_CN">免费的编程中文书籍索引</a></li>
<li><a href="https://github.com/phodal/github-roam">GitHub 漫游指南</a></li>
<li><a href="https://geek.csdn.net/news/detail/110921">CSDN 知识库图谱</a></li>
</ul>
]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>程序员</tag>
        <tag>职场</tag>
      </tags>
  </entry>
  <entry>
    <title>美国地图及各州简介</title>
    <url>/map/map-of-american-states.html</url>
    <content><![CDATA[<h2 id="美国地图"><a href="#美国地图" class="headerlink" title="美国地图"></a>美国地图</h2><p><img src="/images/map/map-of-american-states.png"></p>
<h2 id="美国概况"><a href="#美国概况" class="headerlink" title="美国概况"></a>美国概况</h2><p>1、关于南北方，北方人觉得南方人傻，南方人叫北方人 Yankee（北方佬的别称），其实这个词本来是英国人统称美国人的，后来又被南方人用来形容北方人。</p>
<p>2、相较而言，美国东北各州属于传统贵族，有钱而不失矜持；西部太平洋边的则属于新晋青年，时尚前卫有冲劲。</p>
<p>3、美国精华的地方是东北各州，纽约当然最精华，而曼哈顿的上东区则是精华中的精华，华尔街各大金融机构的富人就住在这。</p>
<p>4、新英格兰地区6州：缅因州、新罕布什尔州、佛蒙特州、罗得岛州、康涅狄格州和马萨诸塞州（没有纽约州、新泽西州）</p>
<p>5、美国大城市的市中心一般犯罪率都很高，还有些特别乱的区比如芝加哥南区、洛杉矶中南区、纽约布鲁克林区。底特律、新泽西也以高犯罪率闻名。</p>
<p>6、美国的人口多集中在东部，西部除了沿海地区人多就是人烟稀少的洛基山脉、沙漠和高地。有些州比如北达科他州和南达科他州极少会被提起。</p>
<ul>
<li>中部平原地区以农业为主，给人的感觉是落后，有玩笑说发达地区的人会问堪萨斯州的人“你们有铺好的路吗？有室内卫生设施吗？”中部地区人非常保守，是虔诚的基督教徒，经常会抗议学校教“毫无根据的进化论”而要求在自然课教上帝创造论，沦为笑柄。</li>
<li>美国南部密西西比河沿岸各州黑人和“乡巴佬”比例高，给人印象也是乱且不发达。佛罗里达州是度假和养老的地方，退休从纽约来的富人尤其多。</li>
</ul>
<p>7、五大湖地区（GreatLakes）：位于加拿大与美国交界处的几座大型淡水湖泊，按面积从大到小分别为：苏必利尔湖（LakeSuperior）、休伦湖（LakeHuron）、密歇根湖（LakeMichigan）、伊利湖（LakeErie）和安大略湖（LakeOntario）。除密歇根湖属于美国之外，其它四湖为加拿大和美国共有。美国有八个州聚集在湖群的南岸。</p>
<p>8、美国的深南州（Deep South）是指美国东南部，墨西哥沿岸的南部各州，包括路易斯安那，密西西比，阿拉巴马，佛罗里达等。这一带传统上属于美国最保守的地域。因为其地理环境比较偏僻闭塞，民风保守排外，所以在某种程度上使得外界对其认识较少，充满了各种负面印象。</p>
<p>9、《阿甘正传》中，在生活中失去方向和爱人的阿甘从遥远南方的阿拉巴马开始了他纵横美国大陆的长跑，终点就是纳瓦合碑谷（Navajo 犹他州）。纳瓦合印第安人保留地是美国境内最大的印第安人保留地。</p>
<p>10、美国以前，以密西西比河为界，东边是已得到开发的文明地带，以西属于荒蛮的新边疆。众多从东部骑着马，赶着大篷车，到西部寻找梦想的拓荒者们多是从圣路易斯（密苏里州）渡过密西西比河，一路西进的。所以圣路易斯在美国历史上有很重要的地位，一直被称作“通往西部的大门（the Gateway to West）”，而1965年建成的“大拱门”正是为了纪念圣路易斯在美国历史中所起到的重要作用。</p>
<p>11、Jazz 爵士乐和优雅的贵族们毫无任何关联，而是一百年前由那些绝望无助的黑奴们在新奥尔良这块地方创造出来的。这些远离家园，流离失所的黑奴们把他们记忆中故乡的音乐和西方乐器相结合，然后产生了爵士乐。</p>
<p>12、“红脖子（Redneck）”是美式英语中的一个俚语，泛指生活在美国那些保守落后又粗鲁的乡村地带，具有强烈种族主义和排外倾向的白人劳动阶层。在很多时候红脖子这个词就是专指美国南部，尤其是深南州的白人。</p>
<p>13、从弗吉尼亚一直到佛罗里达的东海岸诸州是美国南北战争时南方联盟的主要成员，当然也就是支持奴隶制和种族隔离的传统地域。</p>
<p>14、美国建都选址问题引起激烈争吵，南北方议员都想把首都设在本方境内。国会最后选定南北方的天然分界线波托马克河畔长宽各为16公里的地区作为首都地址。马里兰提供61平方英里土地，维吉尼亚提供39平方英里土地。（维吉尼亚部分于1846年收回。）华盛顿哥伦比亚特区的名字是为了纪念华盛顿和哥伦比亚。</p>
<h2 id="美国各州简介"><a href="#美国各州简介" class="headerlink" title="美国各州简介"></a>美国各州简介</h2><p>（按英文字母顺序排序）</p>
<h3 id="1、Alabama-阿拉巴马州"><a href="#1、Alabama-阿拉巴马州" class="headerlink" title="1、Alabama 阿拉巴马州"></a>1、Alabama 阿拉巴马州</h3><ul>
<li>被认为是美国最穷和最土的州之一，水电事业较发达。我同学曾说那里很多穷白佬（white trash. 记住如果美国人说你是chinaman，你可以用 white trash 骂回去）。</li>
</ul>
<h3 id="2、Alaska-阿拉斯加州"><a href="#2、Alaska-阿拉斯加州" class="headerlink" title="2、Alaska 阿拉斯加州"></a>2、Alaska 阿拉斯加州</h3><ul>
<li>美国面积最大同时人口最少的州。</li>
</ul>
<h3 id="3、Arizona-亚利桑那州"><a href="#3、Arizona-亚利桑那州" class="headerlink" title="3、Arizona 亚利桑那州"></a>3、Arizona 亚利桑那州</h3><ul>
<li>燥热的地方，不过那里的美女多，女孩基本上可以说在外面是光着身子的。</li>
<li>美国最大的沙漠，莫哈维沙漠 (Mojave Desert) ，经过四个州，从南加州、内华达、亚历桑那、犹它州。</li>
<li>NBA球队：菲尼克斯（凤凰城）太阳队</li>
</ul>
<h3 id="4、Arkansas-阿肯色州"><a href="#4、Arkansas-阿肯色州" class="headerlink" title="4、Arkansas 阿肯色州"></a>4、Arkansas 阿肯色州</h3><ul>
<li>名人：克林顿、麦克阿瑟将军</li>
<li>曾经种族主义盛行，经济长期落后。整体说来，阿州的人民平易近人，生活悠闲，小小的城市，简单健康的食物，这就是阿肯色州的特色！</li>
</ul>
<h3 id="5、California-加利福尼亚州"><a href="#5、California-加利福尼亚州" class="headerlink" title="5、California 加利福尼亚州"></a>5、California 加利福尼亚州</h3><ul>
<li>美国 GDP 最高的州。重要城市有：洛杉矶、旧金山、圣地亚哥（San Diego）。</li>
<li>NBA球队有：洛杉矶湖人、洛杉矶快艇、萨克拉门托国王、金州勇士（在旧金山的奥克兰市）</li>
<li>虽然滨临西太平洋，洛杉矶却是一个半贫瘠的沙漠化城市。洛杉矶攫取欧文斯谷地的水，从10万人的沙漠小城发展成800万人的世界大都市；而欧文斯谷地则从水草丰盛的农牧区变成了贫瘠的盐碱地。</li>
</ul>
<h3 id="6、Colorado-科罗拉多州"><a href="#6、Colorado-科罗拉多州" class="headerlink" title="6、Colorado 科罗拉多州"></a>6、Colorado 科罗拉多州</h3><ul>
<li>科罗拉多州最著名的是拥有洛矶山脉的最高峰，地形从东侧的平原陡然升高为西侧峻岭，地理景观十分壮丽。西班牙语意为“带点红色的”，估计这可能指的是该地区红色的砂岩地层或是科罗拉多河两岸的赭红色景观。</li>
<li>是滑雪胜地，挺多有钱人，尤其是犹太人。</li>
<li>重要城市：丹佛</li>
</ul>
<h3 id="7、Connecticut-康涅狄格州"><a href="#7、Connecticut-康涅狄格州" class="headerlink" title="7、Connecticut 康涅狄格州"></a>7、Connecticut 康涅狄格州</h3><ul>
<li>东北部新英格兰地区6个州之一，也是新英格兰区域中最偏南的一州。南北宽90公里，东西长145公里。</li>
<li>是美国人均收入最高的州，工业非常发达。GE 的总部所在地。</li>
<li>州府城市哈特福德市（Hartford）是美国保险公司总部集中的地区，有30多家保险公司总部设在此地。</li>
<li>耶鲁大学（yale）位于康乃狄格州纽黑文市的一所私立大学。</li>
</ul>
<h3 id="8、Delaware-德拉华州"><a href="#8、Delaware-德拉华州" class="headerlink" title="8、Delaware 德拉华州"></a>8、Delaware 德拉华州</h3><ul>
<li>最早在美国独立宪章上签字的州，所以称为第一州。</li>
<li>有“世界化工之都”、“世界信用卡之都”等称号。</li>
<li>威尔明顿市：杜邦公司的总部所在地。</li>
</ul>
<h3 id="9、Florida-佛罗里达州"><a href="#9、Florida-佛罗里达州" class="headerlink" title="9、Florida 佛罗里达州"></a>9、Florida 佛罗里达州</h3><ul>
<li>拉美移民多，极其 sexy 的地方，也是美国人比较喜欢养老的地方。</li>
<li>迈阿密和新奥尔良这样的城市，不懂英语没关系，不懂西班牙语可是寸步难行。</li>
<li>基韦斯特 （Key West, Florida），是美国佛罗里达群岛最南的一个岛屿和城市。位于迈阿密西南207公里，古巴哈瓦那东北170公里。基韦斯特是美国1号公路的南端，是美国本土最南的城市。</li>
<li>重要城市：迈阿密、奥兰多、基韦斯特（Key West)）</li>
<li>NBA球队：迈阿密热火 （Miami Heat） 、奥兰多魔术 （Orlando Magic）</li>
</ul>
<h3 id="10、Georgia-佐治亚州"><a href="#10、Georgia-佐治亚州" class="headerlink" title="10、Georgia 佐治亚州"></a>10、Georgia 佐治亚州</h3><ul>
<li>乔治亚、明尼苏达等地方来的会被认为是真正的乡巴佬。</li>
<li>重要城市：亚特兰大，《乱世佳人》的发源地。</li>
<li>NBA球队：亚特兰大老鹰 （Atlanta Hawks）</li>
</ul>
<h3 id="11、Hawaii-夏威夷州"><a href="#11、Hawaii-夏威夷州" class="headerlink" title="11、Hawaii 夏威夷州"></a>11、Hawaii 夏威夷州</h3><ul>
<li>夏威夷是美国唯一四面环海的州，也是完全由小岛形成的州。</li>
<li>旅游圣地，檀香山（火奴鲁鲁）</li>
</ul>
<h3 id="12、Idaho-爱达荷州"><a href="#12、Idaho-爱达荷州" class="headerlink" title="12、Idaho 爱达荷州"></a>12、Idaho 爱达荷州</h3><ul>
<li>北与加拿大接壤，传统农业州，土豆闻名全球，故也有“土豆州”之称。</li>
<li>爱达荷与周围的蒙大拿州和俄勒冈州相似，都是美国西北地区地广人稀的经济落后地带，唯一的优势是山高林密，环境优美。</li>
</ul>
<h3 id="13、Illinois-伊利诺伊州"><a href="#13、Illinois-伊利诺伊州" class="headerlink" title="13、Illinois 伊利诺伊州"></a>13、Illinois 伊利诺伊州</h3><ul>
<li>著名城市：芝加哥–著名大学：芝加哥大学、西北大学，这两个学校的地位类似与中国的武大和华中科技。</li>
<li>芝加哥南区是黑人聚集区，很乱，是黑手党的大本营。北区很不错，是高尚社区聚集地。</li>
</ul>
<h3 id="14、Indiana-印第安纳州"><a href="#14、Indiana-印第安纳州" class="headerlink" title="14、Indiana 印第安纳州"></a>14、Indiana 印第安纳州</h3><ul>
<li>NBA球队：印第安纳步行者 （Indiana Pacers）</li>
</ul>
<h3 id="15、Iowa-爱荷华州"><a href="#15、Iowa-爱荷华州" class="headerlink" title="15、Iowa 爱荷华州"></a>15、Iowa 爱荷华州</h3><ul>
<li>美国第二农业州，玉米产量全美第一。</li>
</ul>
<h3 id="16、Kansas-堪萨斯州"><a href="#16、Kansas-堪萨斯州" class="headerlink" title="16、Kansas 堪萨斯州"></a>16、Kansas 堪萨斯州</h3><ul>
<li>位于美国的正中，被称作美国心脏。是一个一望无际的大草原。</li>
<li>以前，从东北部来的自由主义者和从南方来的蓄奴主义者在这片刚被开发的土地上，为了各自的理念展开了旷日持久的残酷争斗，以至于有“血腥堪萨斯（Bleeding Kansas）”的恶名。堪萨斯是最保守的区域之一，直至今日，从反对堕胎、同性恋，到支持伊拉克战争，这里都是美国保守主义的据点。1999年的时候，堪萨斯州的教育委员会甚至将进化论观点从公立学校的教育内容中撤除。</li>
</ul>
<h3 id="17、Kentucky-肯塔基州"><a href="#17、Kentucky-肯塔基州" class="headerlink" title="17、Kentucky 肯塔基州"></a>17、Kentucky 肯塔基州</h3><ul>
<li>南北战争期间，肯塔基州成为南北方的边界州，有趣的是，北方的总统「亚伯拉罕·林肯」和南方的总统「杰佛逊·戴维斯」均是肯塔基人。</li>
<li>肯塔基州的名人：林肯、杰佛逊、阿里、乔治·克鲁尼、约翰尼·德普</li>
</ul>
<h3 id="18、Louisiana-路易斯安那州"><a href="#18、Louisiana-路易斯安那州" class="headerlink" title="18、Louisiana 路易斯安那州"></a>18、Louisiana 路易斯安那州</h3><ul>
<li>路易斯安那州，为纪念法王路易十四而得名。</li>
<li>是美国50州内海拔最低的州，北界阿肯色州，西邻德克萨斯州，东隔密西西比河与密西西比州相望。</li>
<li>爵士乐源自于二十世纪初期新奥尔良一带民间音乐。</li>
<li>重要城市：新奥尔良（New Orleans）</li>
<li>名人：“小甜甜” Britney Spears（布兰妮·斯皮尔斯）、大鲨鱼奥尼尔</li>
<li>NBA球队：新奥尔良鹈鹕队（New Orleans Pelicans，原为新奥尔良黄蜂队）</li>
</ul>
<h3 id="19、Maine-缅因州"><a href="#19、Maine-缅因州" class="headerlink" title="19、Maine 缅因州"></a>19、Maine 缅因州</h3><ul>
<li>位于美国的东北角，向北方深深地塞进加拿大魁北克与新伯伦瑞克两省之间，其龙虾非常有名。</li>
<li>缅因州，传说中美国鬼故事的高发地带</li>
<li>它是新英格兰六州之中最大的一州，在50州内列第39位。森林覆盖率为全美之首，由于山清水秀、风景如画，成为游乐胜地。</li>
<li>肖申克的救赎的故事就发生在这个州，缅因州的法国后裔比较多，因为安迪·杜弗雷（法国姓）的姓在这个州很普通。</li>
</ul>
<h3 id="20、Maryland-马里兰州"><a href="#20、Maryland-马里兰州" class="headerlink" title="20、Maryland 马里兰州"></a>20、Maryland 马里兰州</h3><ul>
<li>马里兰州有两个特征：第一，该州领接首都华盛顿（即哥伦比亚特区）。第二，有“小美国” America in miniature 之称。虽然面积不大，但地形复杂。</li>
<li>2007年统计数据：GDP 全美18，人均收入居第4。</li>
</ul>
<h3 id="21、Massachusetts-马萨诸塞州"><a href="#21、Massachusetts-马萨诸塞州" class="headerlink" title="21、Massachusetts 马萨诸塞州"></a>21、Massachusetts 马萨诸塞州</h3><ul>
<li>美国税最重的州之一，也是最富和最开放的州之一，同性恋婚姻在 Massachusetts 是合法的。</li>
<li>也称麻省，英国移民是在1620年搭着五月花号船抵达麻省普利茅斯（Plymouth）的。</li>
<li>经济总量全美第11位，人均全美第3。</li>
<li>重要城市：波士顿，波士顿地区拥有大量的大学。波士顿很适合居住，安静美丽，周围都是大学，知识气氛浓厚。波士顿是吹响美国独立号角的地方，历史上从来都以民主自由大本营为傲，是美国数一数二最具有自由主义倾向的城市。</li>
<li>NBA球队：波士顿凯尔特人队。</li>
<li>名校：哈佛大学、麻省理工大学</li>
</ul>
<h3 id="22、Michigan-密歇根州"><a href="#22、Michigan-密歇根州" class="headerlink" title="22、Michigan 密歇根州"></a>22、Michigan 密歇根州</h3><ul>
<li>与加拿大交界，处于五大湖地区。</li>
<li>重要城市：底特律</li>
<li>重要公司：福特汽车</li>
<li>NBA球队：底特律活塞队</li>
<li>名人：福特、麦当娜</li>
</ul>
<h3 id="23、Minnesota-明尼苏达州"><a href="#23、Minnesota-明尼苏达州" class="headerlink" title="23、Minnesota 明尼苏达州"></a>23、Minnesota 明尼苏达州</h3><ul>
<li>五大湖区的州之一，地方很冷。也是农业为主的州。</li>
<li>NBA球队：明尼苏达森林狼队 （Minnesota Timberwolves）</li>
</ul>
<h3 id="24、Mississippi-密西西比州"><a href="#24、Mississippi-密西西比州" class="headerlink" title="24、Mississippi 密西西比州"></a>24、Mississippi 密西西比州</h3><ul>
<li>进入了密西西比州，也就算进入美国真正的南方，而且是“深南州”。</li>
<li>密西西比州的特征：第一，为黑人占比例甚高有1/3。第二，为平均人收入最低之州。 </li>
</ul>
<h3 id="25、Missouri-密苏里州"><a href="#25、Missouri-密苏里州" class="headerlink" title="25、Missouri 密苏里州"></a>25、Missouri 密苏里州</h3><ul>
<li>大拱门（Gateway Arch）</li>
<li>圣路易斯市是美国人口流失最严重的城市之一。而与此同时圣路易斯这个只有三十五万居民城市的犯罪率却远超过纽约洛杉矶这样的千万人口级的大都市，高居美国各主要城市的榜首。</li>
<li>名人：马克吐温、布拉德皮特、卡耐基、杜鲁门总统</li>
</ul>
<h3 id="26、Montana-蒙大拿州"><a href="#26、Montana-蒙大拿州" class="headerlink" title="26、Montana 蒙大拿州"></a>26、Montana 蒙大拿州</h3><ul>
<li>虽然面积较大，但人口相当稀少，经济上以农牧业为主。</li>
</ul>
<h3 id="27、Nebraska-内布拉斯加州"><a href="#27、Nebraska-内布拉斯加州" class="headerlink" title="27、Nebraska 内布拉斯加州"></a>27、Nebraska 内布拉斯加州</h3><ul>
<li>农业为主的州。</li>
</ul>
<h3 id="28、Nevada-内华达州"><a href="#28、Nevada-内华达州" class="headerlink" title="28、Nevada 内华达州"></a>28、Nevada 内华达州</h3><ul>
<li>沙漠之州，拉斯维加斯（Las Vegas）。</li>
</ul>
<h3 id="29、New-Hampshire-新罕布什尔州"><a href="#29、New-Hampshire-新罕布什尔州" class="headerlink" title="29、New Hampshire 新罕布什尔州"></a>29、New Hampshire 新罕布什尔州</h3><ul>
<li>美国著名的滑雪之州，很多 New Yorker 在那里有别墅，度假用的。</li>
</ul>
<h3 id="30、New-Jersey-新泽西州"><a href="#30、New-Jersey-新泽西州" class="headerlink" title="30、New Jersey 新泽西州"></a>30、New Jersey 新泽西州</h3><ul>
<li>美国人口密度最高的州、犯罪率最高的州。</li>
<li>名人：惠特尼休斯顿、梅丽·史翠普</li>
</ul>
<h3 id="31、New-Mexico-新墨西哥州"><a href="#31、New-Mexico-新墨西哥州" class="headerlink" title="31、New Mexico 新墨西哥州"></a>31、New Mexico 新墨西哥州</h3><ul>
<li>沙漠所在地，气候为典型的沙漠气候，温暖而干燥。日夜温差颇大。年平均气温12℃，最高温43℃，最低温-2℃。</li>
<li>飞机制造挺有名。第一颗原子弹诞生地。</li>
</ul>
<h3 id="32、New-York-纽约州"><a href="#32、New-York-纽约州" class="headerlink" title="32、New York 纽约州"></a>32、New York 纽约州</h3><ul>
<li>美国最重要的州。纽约市及郊县为下州，其余地区为上州。别名帝国州。</li>
<li>面积全美第13位，人口全美第3（仅少于加州、德州）。</li>
<li>经济总量第2，仅于此加州。人均全美第5（前4为：康涅狄格、哥伦比亚特区、新泽西州、麻省）。</li>
<li>美国独立战争主要战场之一，约三分之一战役在纽约州的土地上。</li>
<li>全美500大公司其总部设在纽约州者有55家，其中总部设在纽约市者40家。</li>
<li>纽约市有曼哈顿区、皇后区、布鲁克林区、布朗克斯区、斯塔滕岛区等五个区。 联合国总部位于纽约市。</li>
<li>重要城市：纽约、罗彻斯特 （Rochester）、水牛城（Buffalo，对岸为加拿大伊利堡） 、奥尔巴尼 （Albany）</li>
<li>大学数量314所，全美第2，仅次于加州346所。</li>
<li>著名大学：康奈尔大学、哥伦比亚大学。</li>
<li>名胜：哈德逊山谷 （Hudson Valley位于纽约市的北边）、尼加拉大瀑布（Niagara Falls）</li>
<li>自由女神像：美法联盟送给美国的自由女神像（Statue of Liberty），是为了庆祝美国建国一百周年的纪念物。自由女神像位于纽约曼哈顿外海的自由岛（Liberty Island）上，法国将该塑像分解后装了214大箱，横越大西洋送抵曼哈顿，于1886年10月28日揭幕。自由女神像的基座上所写的著名的碑铭代表了美国及纽约州的精神：“Give me your tired, your poor，Your huddled masses yearning to breathe free，The wretched refuse of your teeming shore。Send these，the homeless, tempest-tossed to me。I lift my lamp beside the golden door！” 翻译：“给我你那劳累，贫穷，蜷曲渴望呼吸自由的身躯，可怜被遗弃在你们海岸的人群们，交给我吧，那些无家可归的、颠簸流离的人们。我在金色之门高举火炬”。</li>
</ul>
<h3 id="33、North-Carolina-北卡罗来纳州"><a href="#33、North-Carolina-北卡罗来纳州" class="headerlink" title="33、North Carolina 北卡罗来纳州"></a>33、North Carolina 北卡罗来纳州</h3><ul>
<li>东南部大西洋沿岸的一个州，最初的13州之一。</li>
<li>农村人口占50%以上，为美国农村人口最多的州之一。</li>
<li>资讯科技业、生物科技也非常发达。</li>
</ul>
<h3 id="34、North-Dakota-北达科他州"><a href="#34、North-Dakota-北达科他州" class="headerlink" title="34、North Dakota 北达科他州"></a>34、North Dakota 北达科他州</h3><ul>
<li>该州为农牧之州，工业不发达。这里的工厂都是小型的，工人都不超过50人，而且仅限于农具或与农牧有关的机械工业。</li>
</ul>
<h3 id="35、Ohio-俄亥俄州"><a href="#35、Ohio-俄亥俄州" class="headerlink" title="35、Ohio 俄亥俄州"></a>35、Ohio 俄亥俄州</h3><ul>
<li>耕地占全州面积2/3以上，位于俄亥俄河与伊利湖之间 ，因俄亥俄河得名 。</li>
<li>也是被称为乡下地方，这种地方的普通美国人勤劳、热情，但没见过什么世面。</li>
<li>重要城市：哥伦布市（Columbus）、克里夫兰（Cleveland）、辛辛那堤（Cincinnati）</li>
<li>NBA球队：克里夫兰骑士 (Cleveland Cavaliers) </li>
</ul>
<h3 id="36、Oklahoma-俄克拉何马州"><a href="#36、Oklahoma-俄克拉何马州" class="headerlink" title="36、Oklahoma 俄克拉何马州"></a>36、Oklahoma 俄克拉何马州</h3><ul>
<li>农业在该州经济中占有重要地位。</li>
<li>名人：布拉德·皮特（Brad Pitt）、沃尔玛创建人 山姆沃尔顿 （Sam Walton）。</li>
</ul>
<h3 id="37、Oregon-俄勒冈州"><a href="#37、Oregon-俄勒冈州" class="headerlink" title="37、Oregon 俄勒冈州"></a>37、Oregon 俄勒冈州</h3><ul>
<li>全州土地约有一半覆盖森林。在美国西北沿岸，挨着华盛顿州，人少树多，有强大的机械制造基础。</li>
<li>在美国也被看作乡下地方。这个州的白人多，民风也算不错吧，风景优美。</li>
<li>NBA球队：波特兰开拓者（Portland Trailblazers）</li>
</ul>
<h3 id="38、Pennsylvania-宾夕法尼亚州"><a href="#38、Pennsylvania-宾夕法尼亚州" class="headerlink" title="38、Pennsylvania 宾夕法尼亚州"></a>38、Pennsylvania 宾夕法尼亚州</h3><ul>
<li>宾州自从建立之初就以宗教自由和政治民主著称，美国历史上的许多重要事件都在宾州发生。宾州地处13州的正中（北部有6个州，南部有6个州）。1776年，13州代表聚集在费城，签署了《独立宣言》，宣告了美国的诞生。所以宾夕法尼亚州也被称为“美国的摇篮”。</li>
<li>宾州和特拉华州为美国独立战争时的先锋，特拉华州第一个，宾州第二个承认联邦宪法，加入合众国。这两个州也是历史上美国宗教信仰最自由的州。</li>
<li>宾西法尼拉州是两个大城市（费城，匹兹堡）中间夹杂着阿拉巴马。就是说：两个大城市比较开放，支持民主党。其余地区非常保守，支持共和党的意思。但是州内其它地区就是共和党的支持者。所以，如果没有这两大城市，宾州就会由蓝色州变成绝对的红色州了。</li>
<li>宾州生产总值占美国第六位，人均收入占美国第18位。煤产量仅次于西弗吉尼亚州，匹兹堡是全美最大的钢铁生产地区。</li>
<li>宾州南部有德裔聚居区，是一个独特的种族阿米什（Amish）人，他们抵制现代技术和设施，依然使用几个世纪前的炉子和马车。</li>
<li>名称：费城 （Philadelphia，美国独立战争时的首都）、匹兹堡 （Pittsburgh，钢铁城） </li>
<li>NBA球队：费城七六人（Philadelphia 76’ers）</li>
<li>名人：科比、金凯利</li>
</ul>
<h3 id="39、Rhode-Island-罗得岛州"><a href="#39、Rhode-Island-罗得岛州" class="headerlink" title="39、Rhode Island 罗得岛州"></a>39、Rhode Island 罗得岛州</h3><ul>
<li>在地理上它是美国最小的一州，也是美国州名最长的一州。罗德岛号称全世界的游艇之都。</li>
<li>名校：布朗大学（Brown University）</li>
</ul>
<h3 id="40、South-Carolina-南卡罗来纳州"><a href="#40、South-Carolina-南卡罗来纳州" class="headerlink" title="40、South Carolina 南卡罗来纳州"></a>40、South Carolina 南卡罗来纳州</h3><ul>
<li>位于美国东南部大西洋海岸。</li>
<li>原来农业为主，现转为拥有雄厚工业、科技实力和高效劳动力资源的州。</li>
</ul>
<h3 id="41、South-Dakota-南达科他州"><a href="#41、South-Dakota-南达科他州" class="headerlink" title="41、South Dakota 南达科他州"></a>41、South Dakota 南达科他州</h3><ul>
<li>人均收入在全美排第37位，该州13.2%的人口生活在贫困线以下。</li>
</ul>
<h3 id="42、Tennessee-田纳西州"><a href="#42、Tennessee-田纳西州" class="headerlink" title="42、Tennessee 田纳西州"></a>42、Tennessee 田纳西州</h3><ul>
<li>乡村音乐和蓝调的发源地和圣地（纳什维尔 Nashville）。</li>
<li>蓝调（Blues 布鲁斯）其特点是其特殊的和声，起源于过去美国黑人奴隶的灵魂乐、赞美歌、劳动歌曲。</li>
<li>田纳西州的口音很重。人很土，民风也确实算得上淳朴，大部分人热情友好。</li>
<li>人均收入全美排名36位。</li>
<li>马丁·路德·金在此被暗杀，猫王（Elvis Presley）的故乡。</li>
<li>著名公司总部：国际纸业、联邦快递、日产美国总部</li>
</ul>
<h3 id="43、Texas-德克萨斯州"><a href="#43、Texas-德克萨斯州" class="headerlink" title="43、Texas 德克萨斯州"></a>43、Texas 德克萨斯州</h3><ul>
<li>1836年脱离墨西哥，目前拉美移民很多。</li>
<li>南方最大的一州，也是全美第二大州（仅次于阿拉斯加州）、生产总值全美第二（仅次于加利福尼亚州）。</li>
<li>全州80%的土地是农场和牧场，是美国最大的农业之州，风能发电在美排名第一。</li>
<li>著名公司：壳牌</li>
<li>NBA球队：达拉斯小牛队（DallasMavericks)、休士顿火箭队（HoustonRockets）、圣安东尼奥马刺队（SanAntonioSpurs）</li>
</ul>
<h3 id="44、Utah-犹他州"><a href="#44、Utah-犹他州" class="headerlink" title="44、Utah 犹他州"></a>44、Utah 犹他州</h3><ul>
<li>主要由摩门教（耶稣基督后期圣徒教会）信众的后代和北欧移民的后裔组成。摩门教徒占70%以上。</li>
<li>犹他人给人的感觉不是土，而是怪。在尤他州，不信摩门教，别人会觉得很奇怪。</li>
<li>犹他州由于山多，气候干旱，可耕地不多。畜牧业收入占农牧业的70%左右。</li>
<li>主要城市：盐湖城</li>
<li>NBA球队：犹他爵士队（Utah Jazz）</li>
</ul>
<h3 id="45、Vermont-佛蒙特州"><a href="#45、Vermont-佛蒙特州" class="headerlink" title="45、Vermont 佛蒙特州"></a>45、Vermont 佛蒙特州</h3><ul>
<li>新英格兰6州之一。</li>
<li>佛蒙特以其美丽的景色、奶制品、枫糖浆和激进的政治而着称。</li>
</ul>
<h3 id="46、Virginia-弗吉尼亚州"><a href="#46、Virginia-弗吉尼亚州" class="headerlink" title="46、Virginia 弗吉尼亚州"></a>46、Virginia 弗吉尼亚州</h3><ul>
<li>属于南北之间过渡地带。北方人口稠密，类似与首都华盛顿大城市风貌，南部仍带有几个世纪以来农业生活形成的保守主义色调。</li>
<li>该州为美国历史最悠久的州之一。 是第10个加入联邦的州。</li>
<li>弗吉尼亚是全美各方面综合发展比较好的州。也是一个旅游业发达的州。</li>
<li>弗吉尼亚州拥有18家财富五百强企业，据全美第十位。</li>
<li>总统出生率最高州，共有8位总统出生在这里。</li>
</ul>
<h3 id="47、Washington-华盛顿州"><a href="#47、Washington-华盛顿州" class="headerlink" title="47、Washington 华盛顿州"></a>47、Washington 华盛顿州</h3><ul>
<li>美国最西北部的州。人均产值居全美第14位。</li>
<li>名人：比尔盖茨</li>
<li>名城：西雅图（微软、波音都在其周边）</li>
<li>著名公司：微软、波音、星巴克、亚马逊网上书店</li>
</ul>
<h3 id="48、West-Virginia-西弗吉尼亚州"><a href="#48、West-Virginia-西弗吉尼亚州" class="headerlink" title="48、West Virginia 西弗吉尼亚州"></a>48、West Virginia 西弗吉尼亚州</h3><ul>
<li>美国东北部的一个州，别称为“山脉之州”。全州都在阿帕拉契山系境内，无平原，75%的土地被森林覆盖。</li>
<li>平均家庭收入位居全美倒数第三，消费水平相对其他州较低。</li>
<li>西弗吉尼亚州以煤矿废墟闻名。矿藏资源丰富，最多的是烟煤，产量居美国首位。</li>
<li>开车不到一个小时就可经过全州，总体情况类似于宁夏。</li>
</ul>
<h3 id="49、Wisconsin-威斯康星州"><a href="#49、Wisconsin-威斯康星州" class="headerlink" title="49、Wisconsin 威斯康星州"></a>49、Wisconsin 威斯康星州</h3><ul>
<li>被称为乳牛之都。</li>
<li>NBA球队：密尔沃基雄鹿队 （Milwaukee Bucks）</li>
</ul>
<h3 id="50、Wyoming-怀俄明州"><a href="#50、Wyoming-怀俄明州" class="headerlink" title="50、Wyoming 怀俄明州"></a>50、Wyoming 怀俄明州</h3><ul>
<li>位于美国西部落基山区。全美人口最少的州（第50），不到50万人。面积全美第10。</li>
<li>怀俄明州地域辽阔而人烟烯少，仍保留着早期游牧民族遗留下来的特征和西部精神，故有边疆州和牛仔州的昵称。</li>
</ul>
<hr>
<p>更多内容请看：<a href="http://114.xixik.com/usa-stats/">http://114.xixik.com/usa-stats/</a></p>
]]></content>
      <categories>
        <category>map</category>
      </categories>
      <tags>
        <tag>地理</tag>
      </tags>
  </entry>
  <entry>
    <title>《唯有时间能证明伟大：极客之王特斯拉传》读后感</title>
    <url>/reading/nikola-tesla-the-patron-saint-of-geeks.html</url>
    <content><![CDATA[<p><img src="/images/book/nikola-tesla-the-patron-saint-of-geeks.jpg"></p>
<p>说来也巧，和特斯拉一样，我学的也是电气工程。自从多年前在 CCTV 看了《尼古拉·特斯拉》纪录片后，深深被其吸引了，以至于开始厌恶那个从小学开始就出现在我的作文里的伟大发明家——爱迪生。最近在看《<a href="https://union-click.jd.com/jdc?e=&p=JF8BALcJK1olXDYCV1hcCUkUAl9MRANLAjZbERscSkAJHTdNTwcKBlMdBgABFksUBW4JGVgUQl9HCANtYR9NWGtIfQt3JF5GPTkCQUNoewZQa1cZbQcyVF9cCk4XB2oKHWslXQEyHzBcOEonA2gKGFkWXwYGVFpUD3sQA2Y4Rh9HB05XBB0PQHsnM2w4K2sVbQUyFjBfWkISBW9YH1pHClYHUFkNAU4VUD8LSA4QCQELBwxfCnsVAm4MEms">唯有时间能证明伟大：极客之王特斯拉传</a>》，也许很多人和我以前一样认为尼古拉·特斯拉是神不是人，看了这本书之后才明白，其实特斯拉也仅仅是比普通人多一点天赋、勤奋与对科学的执着，他同样会面临窘境，但是他会用乐观和自信去对待。</p>
<p>我崇拜他，是因为从来没有人像他那样高尚，也从来没有人像他那样持续不断地刻苦努力，无私地为了整个人类的利益而工作。</p>
<p>特斯拉的一生都奉献给了科学事业，终身未娶。鸽子是他的挚爱。为了科学发明，他经常忘记吃饭、睡觉和周围的一切，经常每天只睡两个小时。他说：“电给我疲乏衰弱的身躯注入了最宝贵的东西——生命的活力和精神的活力”。</p>
<p>从特斯拉身上，我感受到最强烈的是他对科学的兴趣和专注。兴趣会使你的整个身体充满活力，使你在睡眠时间不到平时的一半、工作量增加两三倍的情况下，也不会觉得疲劳。特斯拉的工作态度是值得我们钦佩和学习的，工作对他来说，早已不仅是为了满足生存的需要，而是实现个人人生价值的需要。</p>
<p>我认为，特斯拉的世界观、价值观、人生观也是很值得我们研究和学习的，他那强烈的为全世界人民服务的意识，也是使他在科学工程界的成就远高于绝大部分人的一个因素。</p>
<hr>
<p>（未完待续…）</p>
]]></content>
      <categories>
        <category>reading</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>我的2016——我和嵌入式的那些事</title>
    <url>/journal/2016-year-end-summary.html</url>
    <content><![CDATA[<p>墙上的日历只剩下薄薄的一叠，过不了多久，又将迎来一个新的循环。我想用一篇文章记录我的2016，希望通过写这篇文章能够更客观地审视自己，同时给未来的自己以及有需要的朋友一些参考。正所谓：以铜为镜，可以正衣冠；以史为镜，可以知兴替；以人为镜，可以明得失。多交流、多反思、多总结才会有进步。</p>
<p>翻看自己在2016年初写下的目标与计划：</p>
<ul>
<li>换一个舒适的生活环境；</li>
<li>换一份价值观相近的工作；</li>
<li>寻找些志同道合、能一起创业的朋友；</li>
<li>提高嵌入式 Linux 技术水平和技术嗅觉；</li>
<li>坚持运动，提高身体控制力；</li>
<li>坚持写博客，尝试做视频教程；</li>
<li>买一台功能适中的烤箱和一些烘焙设备；</li>
<li>多看书，多了解环境保护相关知识，特别是垃圾分类回收处理，尽量参与相关志愿活动；</li>
<li>准备托业考试。</li>
</ul>
<p>实际上，以上并没有全部完成，但我觉得2016年过得还挺充实的。</p>
<p>在这一年里，完成了职业生涯中的第一次跳槽，离开了工作近两年的工业机器人研发岗位。2014年告别学生时代，刚开始上班的时候，每天都热情高涨。后来进入项目研发阶段，更是每天都迫切希望看到自己设计的产品能够进入量产阶段，并获得市场的认可。然而，理想与现实的差距不是一星半点，虽说是研发岗，但实际上要处理很多琐事的事情，加上处于制造业的寒冬，导致项目中断，才有了跳槽的想法。</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/2cc52af43479717dfe511c8e26e85fa9.png" alt="这里写图片描述"></p>
<p>我依然记得当时在拉勾网上看到的一句话：<strong>你值得拥有更好的生活！</strong> 于是在2016年春天，我鼓足勇气提出辞职了。辞职后我并没有着急寻找新工作，我花了些时间了解自己、了解嵌入式、了解市场。按照计划，一个人孤独地在出租房里编码、调试、验证，然后在 CSDN 上做记录。我开始习惯于独立思考，不再畏惧孤独感，也很享受这种学习节奏。期间研究了一个基于 STM32 的四轴飞行器项目，同时获得了一个嵌入式资格证书。</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/dc86678e5925e10f1010c039a45f4eac.png" alt="这里写图片描述"></p>
<p>另外，还按照自己的想法实现了一个简易智能家居模型，尝试构思控制终端的界面设计，部分界面如下。色彩搭配和操作体验有待商榷，但我真的挺喜欢这种界面风格。</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/512ebcab00213765cccada70a92bec12.png" alt="这里写图片描述"></p>
<p>虽然研究自己感兴趣的东西会让我感到兴奋而充实，但毕竟一线城市的生活成本并不低，慢慢地感觉需要开始找工作了，于是开始有目标地投递简历。这时的我跟毕业时的我相比，在找工作的过程中有了更多选择权，不会因为毕业于普通本科院校并且是非科班出身的程序员而感到担忧。是的，我想：只要我们真正努力了，结果就不会比我们所预计的差。</p>
<p>于是到了夏天，我顺利地拿下了自己期望的工作和薪资，得到一份嵌入式软件工程师的工作。新的工作给我很大的自由度，能经常参加一些嵌入式研讨会和培训课，而这些是我前两年从未享受过的，因此我很感谢目前公司给我的机会。</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/20eb41ce00782b61537833635041b890.png" alt="这里写图片描述"></p>
<p>生活圈子从郊区转移到市区，压抑两年的心得到了释放，尽情地享受市区的便利和良好的基础设施。除了参加各种技术研讨会和培训课，也参加一些线上线下交流活动，从中认识到了一些志同道合的朋友，也拓展了视野。</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/b9056d2c989db4207be300494f625dfe.png" alt="这里写图片描述"></p>
<p>业余时间我也没闲着，多做运动，保持良好的体魄。也会经常逛逛各大技术论坛、写写博客。我觉得分享能更快地提高技术水平，也能促进社会进步。这一年来坚持在 CSDN 和印象笔记中记录所思所想，在 Github、CSDN、21ic、极客学院、与非网、雷锋网、北航杂志社等多个平台和论坛上留下了足迹，感受到开源给我们工作和生活带来的变化，我也很乐于成为追求自由的一员，享受分享带来的快乐。当然，乐于分享带来的好处就是，偶尔会收到一些小礼品，例如开发板和书籍。</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/d6f49ecb95edb863b121e292742b215e.png" alt="这里写图片描述"></p>
<p>经过这两年多的磨练，我认为对于程序员或工程师，除了技术本身，沟通能力也十分重要。如今社会分工明确，需要协同开发，有效的沟通有助于工作顺利开展，工程师更不应该故步自封，自大自负，或者妄自菲薄。而应该多从合作者或全局的角度来思考问题，多听别人意见，然后用辩证统一的思维去整合。这也就是控制工程中所说的闭环系统，反馈很重要，但如何处理反馈更重要。</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/a295a8b6d13e95968c957aede19cf8ec.png" alt="这里写图片描述"></p>
<p>由于担任的是嵌入式软件工程师，日常工作不仅是操作系统层面的构建、移植，还需要协调硬件和软件的开发，例如与硬件工程师一起进行器件选型、验证，与软件工程师一起调研、实施软件架构。除此之外，还要与供应商、合作商沟通协调。说实话，刚开始真的有点不适应，因为以前从未接触过供应商、合作商，对于商务礼仪知之甚少，更何况还要解决实际工程问题。还好，现在感觉在沟通上的问题不大了，如果你问我怎么克服，我只能说都是被逼着上的！</p>
<p>哈哈，这里插入一个程序员专属笑话调节一下气氛。</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/666e839248032de5dfd0b774bf56fd9b.png" alt="这里写图片描述"></p>
<p>要是说2016年我得到了什么，我觉得最大的收获是<strong>思想层次的提高</strong>。</p>
<p>说实话，刚离职的时候，心中充满了怨念，因为没有年终奖，因为项目被搁置了，因为得不到领导的重视，等等。但我现在不会有这些想法了，也许以后都不会有。在离职后进行了多次深入的自我对话，让我能更加清晰、客观地看待一些人和事，也明白了自己的核心竞争力到底是什么。那我的核心竞争力是什么呢？其实我也很难说清楚，但有几点我是确定的，第一是初始化阶段（成长阶段）所带来的特质——例如敏感；第二是学习能力；第三是分享精神；第四是开放的态度；第五是善于自省。</p>
<p>几个月前，有同学找我要一些 Qt 的代码，我毫无保留地给他了，有的人认为这会让自己多一个竞争对手，但是我认为我多了一个潜在的合作伙伴。有同学找我帮忙写一个电力系统的单片机程序，虽然工作有点忙，但我并没有拒绝，我认为这是他给我的学习机会。后来又有朋友送我一套 nRF51822 套件，但需要在论坛上分享学习过程，虽然我目前的工作中并没有用上，但我还是愉快地接受了这个邀请。还有北航杂志社经常邀请我们写一些心得体会，我也会尽量去写，因此还收录到《单片机与嵌入式系统应用》，并且长期享受赠刊福利。工作上，我只负责 Linux 系统的构建，但我会额外地开发一些测试软件以方便测试人员使用，同时由于我并不排斥界面开发，甚至为了一致性，会自己动手绘制图标，因为这样我得到了更多的机会。</p>
<p>还有很多诸如此类的事情，我很珍惜这些学习机会。虽然我的起点稍低，但我愈发感觉自己思想的充实。当我知道的越多，我越感觉自己无知，而这种无知又会激发我的求知欲望，使我不断丰富自己。简单来说就是——<strong>年轻人不要害怕吃亏，所有的努力终究不会白费。</strong></p>
<p>其实，硬件做到底就是物理和材料，软件做到底就是哲学和思想。现在的我，虽然对整个嵌入式系统的认识更清晰了，但仍有很多未知之地等待我去探索，我需要做的就是——永远保持学习的态度。</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/1f1564d7a11250b3da7e6b50c58dc4ab.png" alt="这里写图片描述"></p>
<p>在这里用一句话来勉励你我：真正有才华的人，往往不是天赋异禀，而是习惯了勤奋。如果你的才华配不上梦想，脚步跟不上目光，所有的任性不过是一念幻想。</p>
<p>经历了2016年，我开始感觉自己有点像工程师了。也习惯于寻找工作与生活之间的平衡点，寻找实现人生价值的最优路径。</p>
<p>随手拍一下桌面留个纪念，对于买不起房的我来说，实在不敢买太多纸质书。</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/772de10dc36b3a20f67a708f4da3c1d4.png" alt="这里写图片描述"></p>
<p>希望早日拥有一个属于我自己的书房吧！像这样……这样……或者这样……就行了。</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/8236f871ab2761c0879c9a88f144600d.png" alt="这里写图片描述"></p>
<p>这是我的2016，学会了反思，学会了在孤独中成长。2017年，我希望能够在嵌入式技术方面更上一层楼，业余时间尽我所能去做更多有意义的事，同时写出更多原创博客。我们继续加油吧！</p>
<hr>
<p>Say hello to 2017，不忘初心，奋力前行</p>
]]></content>
      <categories>
        <category>journal</category>
      </categories>
      <tags>
        <tag>工作</tag>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>从高考到程序员——我一直在寻找答案</title>
    <url>/journal/how-do-i-become-a-programmer.html</url>
    <content><![CDATA[<h2 id="我曾是少年"><a href="#我曾是少年" class="headerlink" title="我曾是少年"></a>我曾是少年</h2><p>我从小生活在小乡镇上，除了课本，一台电视机和外公出船带回来的二手书就是我了解世界的所有途径。外婆年轻的时候在合作社当过会计，所以小学四年级以前的数学都是她给我辅导的，每天晚上她还会给我削好第二天要用的铅笔。长大一点之后我可以独自出门了，我的世界也开始变大了。镇上没有图书馆，只有寥寥可数的几家店有书卖，大多数也是辅导类书籍，我和一个朋友就经常到那几家店看书，因为只看不买，被赶走也是经常发生的事情。但有一家店从来不赶我们走，店主阿姨允许我们看书，就这样我在她那里看了很多课外书，比如：十万个为什么、上下五千年、孙子兵法等等，还有一些关于国家地理、恐龙、太空、动漫等等的书籍。多年以后回想起来，这些经历确实对我的世界观、人生观、价值观造成了影响。</p>
<p>如果说小学、初中的我是老师心目中标准的好学生，高中的我就是一个另类的学生。我觉得我是喜欢学习知识这个过程，而不是为了追求成绩或奖励（那时候也确实没有人会给我奖励），所以一直以来没有太看重考试成绩。因为镇上没有高中，直到初中三年级我才知道原来要准备考高中，于是不小心考上了我们市里最好的高中。高中的一切对于我来说实在太新奇了，那里有标准的400米跑道、有图书馆、有学生社团…… 简直就是“刘姥姥进大观园”。总的来说，高中生活还是挺美好。但是我不习惯晚自习，因为教室的灯光会影响我的视力，简直是如坐针毡的感觉。那时候真的很佩服一些同学能坚持一整晚的自习，接着周末还要参加补习班。</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/d01ca2c1f646d098ca5f63c84c28e89b.png" alt="这里写图片描述"></p>
<blockquote>
<p>图1. 我的高中——瑞峰书院</p>
</blockquote>
<p>在高中学到了很多东西，因为想在校运会上拿奖牌而开始练习长跑；学会了打篮球和排球；加入了动漫社，设计了班徽和八十周年校庆的 Logo；加入了班主任的兴趣小组，玩了把电烙铁和一些电子元器件，第一次听到“单片机”这个词；几乎没使用过电脑的我，第一次上机写 VB 程序，写得头晕目眩；因为对化学实验感兴趣，曾花了两周时间去实验室养硫酸铜晶体（可漂亮呢，可惜我当时的手机不能拍照）；还写过一篇《人类不需要国家》的文章，不过当时老师同学们似乎不感兴趣（这篇文章并没有反动的意味，而是论述为什么会出现国家，没有国家的形态社会能否有条不紊地运转下去等论点，有点共产主义的味道吧，后来发现有些观点跟易中天、尤瓦尔•赫拉利他们的观点还挺相似的）。</p>
<p>是的，正如你所见，对很多家长来说，我就是不务正业，根本就没有把心思花在学习上。有一次阶段考试成绩很差，刚好打球弄伤脚了，那是我爸第一次骂我，他说“花那么多时间去打球，以后能靠打球吃饭吗？你看你现在的成绩有多差，以后别打球了！”所以后来我还是随大流，进入高考备考状态了。整个高中生涯，班里五十多名学生，我考过第一名，也考过四十多名。其实除了语文和英语一直没有质的提高之外，其他学科的成绩都挺好的，所以在选文理科的时候还纠结过，我想这也是高考制度不合理的一个地方吧。高考有多苦，每一个经历过的人都知道！那么，我就苦中作乐吧！我喜欢把高考当成一场游戏，我们要做的就是了解规则，清楚自己的处境，了解自己的优缺点，然后制定策略，争取多拿积分。既然是游戏，那么控制权就不在我们手里，也不会完全公平公正。想明白了这点之后，我也不用过于执着了。我还是比较喜欢随性一些，后来想参加奥赛，就选了当时最喜欢的生物和化学，因为不是从高一开始就加入奥赛班，所以后来我只能厚着脸皮进去听课，当然也不招人待见，毕竟是插班生也是竞争对手嘛。功夫不负有心人，后来的结果也是挺好的。</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/b16bbe30c61bdaff75eba766b2e41270.png" alt="这里写图片描述"></p>
<blockquote>
<p>图2. 高中时期为数不多的奖项</p>
</blockquote>
<p>黑板上“离高考还有xxx天”的数字按照计划不断地减小直至为零，终于迎来高考这个大 BOSS 了。经过两天的鏖战，孰输孰赢仍不知晓，反正高考就这样完了，高中生活也结束了。因为我把它当成一场游戏，也没估分的概念，所以考完没多久就找暑期工去了。分数出来后也没有大喜大悲（相比平常模拟考是差了点，但也不是差太多）。大致研究了这个分数能上哪些大学，然后想想自己以后想做什么，于是就确定了。原本考虑过临床医学、环境科学、地球化学这些专业，但考虑到以后的职业，还是犹豫了。后来同学给我推荐电气工程专业，我看了一下教学大纲，最长就是它了（我当时想，那就是可以学到很多东西吧，我上大学就是想多学点东西）。并且学的内容看起来也是我感兴趣的一个方向，工业革命发展到现在，电气化、网络化、信息化已经成为常态了。而且我相信这些知识对于我以后从事什么样的工作都是有帮助的，并且上面还写着培养“全方位、多层次、宽领域”的综合型人才呢！就这样，我入坑了，进入某工业大学的电气工程及其自动化专业。</p>
<p>写到这里，除了敲过几行 VB 代码，摸过单片机之外，似乎没有任何迹象表明我以后会成为一名程序员。</p>
<h2 id="外面的世界很精彩"><a href="#外面的世界很精彩" class="headerlink" title="外面的世界很精彩"></a>外面的世界很精彩</h2><p>大学生活如期而至，我再一次“刘姥姥进大观园”，学校比高中大得多，图书馆真的是图书馆而不是图书室，篮球场多达四十多个，还有各种学生社团…… 简直是看啥喜欢啥，然后参加了学生会和团委的面试，一不小心都进了；还加入了很多社团，比如：电子协会、动漫社、排球俱乐部、橄榄球俱乐部、轮滑俱乐部、自行车协会、空手道协会等等；接着还找了份旅行社校园代理的兼职。额…… 好像挺杂的，确实，很长一段时间都在瞎忙，还好交到一些好朋友，学业也没有被落下，大学前两年还拿了一、二等奖学金。其实，我很快也察觉到了：大学就是一个小染缸，很多人一进来，就把自己染成五颜六色，初看起来，确实是五彩缤纷，但实际上，却没有一个主色调。所以，我开始有意识地收窄自己的兴趣，学会放弃。后来到了大二，除了橄榄球俱乐部以外，其他社团都退出了，可以将更多精力放在课程学习中。</p>
<p>以前的我对计算机并不感兴趣，在我的观念里，学习电脑知识就是学习 Windows 系统怎么用、Microsoft Office 办公软件怎么用之类的。后来，听同学说 Win7 比较好用，于是就找楼下电脑店帮忙装系统，但是要收30元服务费。我为了省30块钱，就去图书馆找了几本关于电脑的组成和重装电脑系统的书，准备自己动手。但因为那台笔记本是我当时最贵重的东西，我不敢轻易下手，所以我先花了一周时间看完了那几本书，确保无误之后才敢动手安装。也就是那个时候，我才对计算机组成结构有了比较完整的认识，也才发现原来 PC 的操作系统除了 Windows 还有 Linux、Mac OS 等。在重装完 win7 之后，我顺便装了一个 Ubuntu，也慢慢开始对我所理解的计算机有所改观。实际上，到这个时候，也还没有任何迹象表明我会成为程序员，只是会偶尔帮同学重装一下系统而已。</p>
<p>大学还是在五彩缤纷的生活中带点考试周的紧张和间歇性的迷茫中度过。在电子协会的时候，我开始跟着师兄和郭天祥的教材玩51单片机，跟着书上过了一遍实验，也焊过一些电路板。后来和几个同学组队参加一些科技竞赛，比如电子设计大赛、飞思卡尔智能汽车比赛，然而连校内选拔都没通过，更别说获奖了。反倒是在学校内部的各种比赛（比如阳光长跑、医疗知识、环保知识、漫画设计、广告设计…之类）中拿了不少的奖项，这使我一度怀疑自己是不是不适合搞技术。</p>
<p>至于职业规划，其实那时候并没有想太多，我们专业的同学很多是奔着供电局的铁饭碗去的。我一来不感兴趣，二来没有关系，结合当时研究硬件比较多，也跟着我们专业的教授做过一些项目，想着毕业后也许会找一份画 PCB 的工作，或者做体育文化产业去了。</p>
<p>是的，你没看错，是体育文化产业。上面提到，我那时候是橄榄球协会的会长，平常要招新、组织训练、参加比赛，偶尔还要客串当裁判（后来考了裁判员证，成为了国内早期的一批橄榄球裁判员）。因为这项运动被很多人误解，所以招新进度很慢，甚至有些时候是在比赛开场前才凑够人数的。我们打的是7人橄榄球赛，正常来说，橄榄球队需要进攻组、防守组和特勤组，而我们有好几场比赛都只有7名队员，也就是说我们不能受伤，也不需要攻防轮转…… 那段时期压力真的好大，还好最后我们坚持下来了，有更多的学生加入我们的队伍。后面也一起参加了很多比赛，当然，受伤是不可避免的，但是不能打败你的，只会让你变得更强。总的来说，我觉得橄榄球挺好玩的，而且也很适合中国人玩。上几张图吧：</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/ca6f0d99907c2a33597fcc847b77fd0b.png" alt="这里写图片描述"></p>
<blockquote>
<p>图3. 橄榄球协会时期</p>
</blockquote>
<p>我所接受的教育，总是强调竞争，很少教我们怎么合作，而我在进行体育运动的过程中，包括长跑、篮球、排球、橄榄球。这些运动使我慢慢地了解自己，学会了怎么样去控制情绪，怎么样去合作，怎么样去竞争，怎么样去面对逆境。我想这是课本里很难教会的东西，对于我来说是一笔财富。细心的你可能发现了，当时我们的橄榄球教练是何凯成，也就是林书豪在哈佛大学时期的室友。也就是那一年，林书豪在纽约上演了“林疯狂”。何凯成和林书豪比我大一个大学周期（不小心暴露了年龄），我一直以他们为榜样，我认为他们在面对逆境的时候的精神和行动都非常值得我们去学习。</p>
<h2 id="奔赴七月职场"><a href="#奔赴七月职场" class="headerlink" title="奔赴七月职场"></a>奔赴七月职场</h2><p>无奈我们止不住时间的流逝，大三那年的最后一场橄榄球比赛，是季军争夺赛，我们完成了3个达阵，可惜丢了附加分，最后我们输了1分。依然记得赛后那种失落的心情，我们围在一起喊口号、相互鼓励，然后开始有人哭了，你能想象一群大男人在一起哭的场景吗？哭不是因为比赛输了，实际上我们作为普通本科生，能和体育生竞争到这样已经很不错了；哭是因为我们知道这也许是我们最后一场比赛了，之后考研的考研，找工作的找工作，出国的出国…… </p>
<p>其实我大学期间的成绩都挺好的，大三之所以没有拿奖学金，是因为我缺考了电力系统那门专业课的考试（大家不要学我缺考啊）。有时候真的感觉大学的专业课很不专业，特别是对于这门培养供电局人才的课程，老师的表现实在太功利了（精致利己主义者）。以及在之前的课程设计和科技比赛中，我所遇到的很多老师都只关心结果，而不关心过程，这些事情令我很反感，以至于我对大学的教育产生了严重的质疑。于是，在电力系统考试的那天上午，我作了一个冲动的决定——弃考。然后一个人去操场跑步，那天下着毛毛雨，忘了跑了多少圈，最后全身湿透了，我却感受到了前所未有的释怀。当然，我也知道这样的行为会带来什么样的后果——奖学金评不上、预备党员不能转正、大四要重修补考、影响就业和升学、失去进入供电局的敲门砖…… 可是我的内心告诉我：我可以不在乎这些东西，我可以承受带来的后果，我可以丢掉我的光环，我可以撕毁我的标签…… 其实人真正需要的东西很少，很多东西都只是为了炫耀，过分追求物质生活，最终反而成了累赘…… 那么，究竟什么才是我想要的？我想要把握自己的人生！努力活成自己希望的样子！</p>
<p>然而，在大三结束后的那个暑假，这些年的伤病还是让我不得不进厂维修，在医院躺了大半个月，之后回家休息直到开学。因为这个原因，我也没有参加学校安排的暑期实习。这段时间对于我来说是黑暗的，我失落、迷茫、不知所措，一度以为自己患了抑郁症。期间想了很多很多，比如：我所经历的这些对我有什么帮助？如果没有任何帮助为什么还要经历？以及哲学三大问题：早上吃啥？中午吃啥？晚上吃啥？不对，应该是：我是谁？我从哪里来？要到哪里去？当然，我到现在也没想明白，但是我比以前更了解自己了（对于程序员来说，也就是明白自己的核心竞争力）。我想起了曾经的我用省了好久才省出来的二十块钱买了一个指针式万用表回家修复读机；我想起了2003年在电视机前看神舟五号发射，我说过长大后要当科学家，制造宇宙飞船；我想起了第一次看到那块黑色的东西居然能够做这么多事情时是多么的惊讶，原来它叫单片机；我想起了我很想知道硬件和软件到底是怎么配合起来工作的；我想起了我很想知道互联网到底是什么，为什么它能连接全世界；我想起了我用过 Linux 系统之后是有多么的喜欢它；我想起了当我知道开源软件和开源硬件之后是多么的兴奋…… 是的，就是在大学最后一个暑假，我决定选择“程序员”作为我的职业。</p>
<p>在稍微系统地恶补一番之后，接着就是不断地“查漏补缺–&gt;面试–&gt;被鄙视–&gt;再查漏补缺–&gt;再面试–&gt;再被鄙视”的过程，我给自己的定位是嵌入式 Linux 工程师，要学的东西实在太多了，到现在我还没学完。不过这一点我倒觉得没太大关系，因为边学边做边总结就是程序员的一种工作模式。</p>
<p>就这样，赶在毕业前找到了一份比较满意的工作，匆匆忙忙地开始了程序员的职业生涯。</p>
<p>毕业几年后偶尔聚会，听到有的同学离开了供电局，有的同学从大企业离职后开始学 IT，有的同学抱怨央企工资一直没涨还降薪，有的同学转行当老板，有的同学担心自己会被社会淘汰…… 然后，总是不经意间提到我，说还是我比较好。我不知道说什么好，总觉得很多东西没有对与错，适合自己的才是最好的。只是，一路上我们走得太匆忙，很容易就把自己忘记了。</p>
<p>“程序员”可能不是我最终的职业，但我想这份职业经历也许可以用“曾经沧海难为水，除却巫山不是云”来形容。</p>
<h2 id="给未来的程序员"><a href="#给未来的程序员" class="headerlink" title="给未来的程序员"></a>给未来的程序员</h2><p>这些年比较喜欢看 NBA，也因为在我失落迷茫的时候“林疯狂”给我带来的激励，我常常拿 NBA 球员的职业生涯作为参考，希望对程序员的职业生涯有所帮助。以下是我的一些观点和建议：</p>
<ol>
<li><strong>选秀顺位不重要。</strong>选秀顺位并不能决定球员的未来，程序员的第一份工作也不能决定其高度。当然，高考分数也不能决定人生的成败。重要的是要相信自己，不断学习，不断成长。人生是一场马拉松，起跑的优劣无关紧要，笑到最后的都是一直在跑的人，也就是一辈子都在学习的人。</li>
<li><strong>保持专注。</strong>只有保持足够的专注度，才能确保在高强度的比赛中取得好成绩。程序员也一样，如果想拥有一个完美的职业生涯，要注意保持专注。</li>
<li><strong>比赛中要把状态调到最好。</strong>在实力相差不大的情况下，比赛的胜负通常由双方球员的手感、激情、求胜欲望所决定的，这里统称为状态。同样，在项目开发过程中，程序员也要把状态调到最好，这样可以提高进度与工作质量，留下好的口碑。（程序员的圈子其实也不是很大，很容易就通过校友、同事、前同事、同事的前同事等关系连接起来了）</li>
<li><strong>要有足够长的训练时间。</strong>即便是休赛期，很多 NBA 球员也会保持训练，比如每天投篮500次。对程序员来说，要求每天写500行代码好像有点别扭，所以最好找到适合自己的训练方法，比如：写代码、看代码、看文档、上培训班…… 总之，要有充足的练习，有量变才有质变嘛。</li>
<li><strong>不断进步，解锁新技能</strong>。除了少数一进联盟就开挂的球员，大部分球员都是在实战中一步步成长为球星，甚至是巨星的。除非你是在那种允许一年工作经验反复用二十年的企业当程序员，否则最好不断更新自己的知识库，让老板发现你的亮点，知道你能胜任怎么样的工作。</li>
<li><strong>选择去哪座城市打球很重要。</strong>大城市的球队财力雄厚，也容易吸引优秀球员，因此获得总冠军戒指的机会也相对较大，也容易打造商业价值。国内来说，我觉得程序员第一份工作选择大城市是有必要的，除了北上广深，准一线城市也不错的选择。（听说很多三、四、五线城市的程序员连 GitHub 都没听过呢）</li>
<li><strong>不要过分追求花哨的技能。</strong>简单有效才是最好的，把简单的事情做到极致，本身就是一件伟大的事情，就像马刺那样。不管是黑猫白猫，能够满足需求的就是好猫，不对，是好程序员。Keep It Simple, Stupid！</li>
<li><strong>要清楚自己的技术特点。</strong>我们说篮球场四大天王：灵活死胖子、 矮壮篮板怪、勾手老大爷、高瘦远投王。实际上，不是长得高就要打内线，长得矮就不能抢篮板，胖子就不能运球等等。关键是要清楚自己的技术特点，适合打什么位置。对于程序员来说，就是要清楚自己喜欢什么行业，喜欢做嵌入式还是移动开发还是 Web 等等，找到合适的定位。</li>
<li><strong>要对大环境有所了解，适时调整。</strong>原来流行大球风格，注重防守，现在流行小球风格，那么这种环境的转变对于球员来说就是机遇和挑战。程序员也是，不能只顾着低头敲代码，还要适当了解行业发展趋势、技术的更新等等。</li>
<li><strong>适当时抱大腿。</strong>绝大部分 NBA 球员的目标都是总冠军，那么当个人能力不足以支撑实现梦想时，抱大腿也不妨是个好方法。程序员刚出道时，往往也需要大神带领才能顺利完成任务，而大型的项目，更需要各个领域的专家合作才能完成。所以有时候抱大腿也不是一件坏事，如果程序员能成长为“大腿”就更好了。</li>
<li><strong>工资帽每年都在涨，要抓住谈判工资的机会。</strong> NBA 的球员都会有经纪人去谈判，经纪人能够把握市场行情，为球员拿下大合同。绝大部分程序员请不起经纪人，只能自己去谈判，所以要学会了解市场行情，知道自己的水平大概能拿多少薪资，然后在面试或者调薪的时候为自己争取更多利益。</li>
<li><strong>该执着时执着，该放手时放手。</strong> NBA 联盟只能容纳四百多名球员，而每年选秀会增加六十名球员，可以说淘汰率是很高的，能在 NBA 立足相当不容易。球员的平均职业生涯只有三年，最长也就二十多年。相对而言，程序员幸福得多，人才缺口大，也可以做到退休。但是，如果你发现自己确实不是当程序员的料，就果断放手吧，可以往技术支持、测试、管理、销售等方向发展，说不定还迎来职场第二春呢。当然，程序员还可以创业当老板，这里就不展开了，再说就超纲了。</li>
</ol>
<hr>
<p>最后来一段：</p>
<blockquote>
<p>入学考试的问题答案<br>往往只有一个<br>如果没有找到它<br>那就是不及格<br>但是啊<br>人生不一样<br>人生有很多正确答案<br>继续读大学是正确答案<br>不去也是<br>热衷运动也是<br>喜欢音乐也好<br>和朋友一起玩耍也罢<br>这些都是正确答案<br>不要畏惧活着<br>不管考上还是没考上<br>都不要否定自己的可能性<br>你们要挺起胸膛<br>理直气壮地活着</p>
</blockquote>
<p>祝愿大家都能找到自己的人生答案！</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/5b78d37a55c0ead7b724bf1fc7c213f7.png" alt="这里写图片描述"></p>
<blockquote>
<p>图4. 勇往直前</p>
</blockquote>
]]></content>
      <categories>
        <category>journal</category>
      </categories>
      <tags>
        <tag>总结</tag>
        <tag>程序员</tag>
      </tags>
  </entry>
  <entry>
    <title>做个成功的嵌入式系统工程师</title>
    <url>/coding/be-a-successful-embedded-system-engineer.html</url>
    <content><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>上个月在某次会议中遇到了 Tenux 开源社区的负责人，有幸跟他探讨了嵌入式行业的过去、现在和未来。该社区目前致力于 µT/OS V3.0 系统的开发和推广工作，µT/OS 其实也就是 μTenux ，它的内核源于1984年的 TRON 操作系统。其中，十分有感触的是，他说，在上世纪八九十年代的时候，日本人已经在思考32位单片机应该用什么样的操作系统的问题，而我们当时思考的是8位单片机应该用汇编语言还是C语言。诚然，由于历史原因，我国在很多方面都落后于发达国家，包括嵌入式方面，我不知道经过了这么多年的发展之后，我们和发达国家的差距是缩小还是增大了。但根据我的一些学习和工作经历，我发现不管是学校还是企业，不管是新人还是老员工，都有相当一部分人忽视了一些东西——包括为什么要学嵌入式？为什么要做程序员？为什么要学习？为什么要做产品？我觉得这其中的原因有很多，例如：教育和产业发展的脱节、企业管理方式落后、工程师的视野不够开阔等等吧。</p>
<p>这些问题要是展开来说就真的三天三夜都说不完，也许是因为我们习惯了稳定，习惯了封闭，习惯了按部就班…… 当然，也不单只是中国有这样的问题，就像龙应台说的那样：社会就像一个巨大的开动着的车，总有人在里面自顾自地行乐，所幸的是，总有人探出头来看看这辆车究竟在往哪里跑。</p>
<p>是的，每个时代都有思考和不思考的人。希望未来有更多热爱思考的嵌入式工程师，用我们的才华构筑更好的社会。以下内容精选自与非网《想做个成功的嵌入式系统工程师吗？这些建议你要看一看》，个人认同其中大部分观点，故收录之，希望有更多的人受益。</p>
<hr>
<h2 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h2><p>从更熟悉以开放源码软件来开发应用程式（Apps），产业专家鼓励嵌入式工程师走出舒适圈、学习新技能，才能与时俱进。</p>
<p>回顾1980年代的嵌入式领域，当时的工程师主要是设计混合讯号电路、连接微控制器、撰写低阶编码、从外面拿回产品原型…只要一个工程师就能做好以上所有事情。但是现在，嵌入式系统变得更大、更复杂，一台装置可能有数百万行软件程序码；嵌入式技术也被区分为硬件开发、固件开发与软件开发。</p>
<p>在很多大公司仍然是如此，但趋势似乎又有回头的迹象；有越来越多业者开始整合工程师的角色，寻找既熟悉软件也熟悉硬件技术的工程师，以求事半功倍之效。调查显示，现在有越来越多工程师的工作同时牵涉硬件与软件技术。</p>
<p>有越来越多工程师需要软硬件技术能力兼备</p>
<p>嵌入式技术日进千里，工程师要如何确保自己学习到的新技术是最关键的？为此 EETimes 美国版请教了九位嵌入式领域专家与一位负责招募人才的主管，请他们分享究竟现在的嵌入式工程师最需要掌握哪些重要技能；虽然他们的意见稍有不同，但都同意一个观点：<strong>所有的工程师都不应该停止学习。</strong></p>
<p>以下是整理专家意见，归纳出的十个给嵌入式工程师的建议：</p>
<h3 id="一、学习那些让英特网实现的技术"><a href="#一、学习那些让英特网实现的技术" class="headerlink" title="一、学习那些让英特网实现的技术"></a>一、学习那些让英特网实现的技术</h3><p>具备30年嵌入式工程师经验的独立产品设计与顾问公司 Aurium Technologies 总经理 Ken Wada 认为，多数嵌入式领域工程师都知道如何撰写 C 或 C++ 语言程式，但有时候这样的技能是不够的；他建议嵌入式工程师学习英特网有关的技术，对职业生涯发展会有加分效果，例如他目前负责的几个开发案，都是在嵌入式系统中嵌入虚拟（virtual）的 XML，好让一些小型连网装置能具备“随插即用”的运作模式。</p>
<h3 id="二、学习利用搜寻引擎"><a href="#二、学习利用搜寻引擎" class="headerlink" title="二、学习利用搜寻引擎"></a>二、学习利用搜寻引擎</h3><p>当了35年工程师、自认是“看得懂系统架构的软件人”的 PTR Group 首席科学家 Michael Anderson 认为，不要闭门造车，要善用开放源码世界的资讯，很多常见的设计问题其实透过英特网就能找到同领域菁英贡献的程式码；嵌入式工程师们要走出自己的小世界拥抱社群，与同领域的其他工程师们相互交流、互相帮助，而这也是开放源码世界的精神。</p>
<h3 id="三、离开舒适圈！"><a href="#三、离开舒适圈！" class="headerlink" title="三、离开舒适圈！"></a>三、离开舒适圈！</h3><p>虽然只当了18年工程师、但自认是系统与软件技术“通才”的 DSP 与嵌入式软件开发顾问公司 Jetperch 创办人 Matt Liberty 建议，不断更新并提升原本擅长的技术虽然很重要，但嵌入式工程师若能扩展自己的知识领域会更有益。走出舒适圈，挑战自我、去学习原本不熟悉的东西，包括工程以外的知识，例如与客户、同事之间的互动，将会收获良多。</p>
<h3 id="四、熟悉即时操作系统（RTOS）"><a href="#四、熟悉即时操作系统（RTOS）" class="headerlink" title="四、熟悉即时操作系统（RTOS）"></a>四、熟悉即时操作系统（RTOS）</h3><p>在工程人才招募机构 Randstad Technologies 负责嵌入式产业领域的解决方案经理 Henry Wintz 表示，目前产业界对于熟悉 RTOS 的工程师需求很高，也愿意提供更高的薪资水准；因此他鼓励没有接触过 RTOS 的嵌入式工程师从一些较小型的系统着手，累积相关技术经验。此外他也发现产业界对嵌入式 Linux 人才有不少需求，主要是因为这种操作系统具备较大的设计弹性。</p>
<h3 id="五、培养多元化技能与系统观"><a href="#五、培养多元化技能与系统观" class="headerlink" title="五、培养多元化技能与系统观"></a>五、培养多元化技能与系统观</h3><p>担任近20年工程师、具备许多不同领域技术经验的技术顾问公司 Rebelbot 顾问 Jen Costillo 建议，原本从事较小型系统架构（例如 MCU）开发的工程师，可以开始去熟悉更大的系统（例如 Linux 驱动程式），反之亦然。尝试着去开发手机应用程式、或者是学习后端服务器的相关技术，能让你开启完全不同的观点；他并建议工程师去熟悉开放性硬件，现在市面上有不少现成的开发板，能让工程师专注于学习独特演算法的开发。</p>
<h3 id="六、了解软件也要了解最新的处理器"><a href="#六、了解软件也要了解最新的处理器" class="headerlink" title="六、了解软件也要了解最新的处理器"></a>六、了解软件也要了解最新的处理器</h3><p>有超过15年嵌入式软件工程师经验的 Embedded.fm 工程师 Elecia White 表示，除了要深入了解 C 或 C++ 等基本程式语言，有时也要认识一些热门的新程式语言以因应特殊设计需求，但更重要的是了解最新的处理器技术；处理器才是嵌入式系统的本质。因为我们的系统资源有限，我们需要了解可用的资源有哪些。</p>
<h3 id="七、要能熟悉开放源码软件"><a href="#七、要能熟悉开放源码软件" class="headerlink" title="七、要能熟悉开放源码软件"></a>七、要能熟悉开放源码软件</h3><p>拥有31年工程师经验的 Freescale Semiconductor  数位网路全球软件开发部门总监 Rob Oshana 表示，客户往往会要求在系统中整合一大堆软件，因此所有的嵌入 式工程师需要熟悉各种软件；他建议工程师避免只专长单一领域，因为那可能会阻碍你的成长。对嵌入式工程师来说，确保自己对软硬件技术都很了解，是非常宝贵的价值。</p>
<h3 id="八、建立系统级的工程思维"><a href="#八、建立系统级的工程思维" class="headerlink" title="八、建立系统级的工程思维"></a>八、建立系统级的工程思维</h3><p>自诩为高信赖度嵌入式系统专家、担任了15年工程师的 E2V 电子系统总工程师 Adam Taylor 认为，嵌入式工程师拥有系统导向的思维是很重要的，有不少开发案遇到问题，就是因为没有在开发初期充分考量基准、验证策略以及相容性验证计画等项目；此外每个嵌入式工程师都应该具备优良的专案管理技巧，力求准时完成负责的专案。具备能明智因应技术与专案风险的能力，对职业生涯发展会很有帮助。</p>
<h3 id="九、要能明确表达自己的想法与意见透过文字或绘图"><a href="#九、要能明确表达自己的想法与意见透过文字或绘图" class="headerlink" title="九、要能明确表达自己的想法与意见透过文字或绘图"></a>九、要能明确表达自己的想法与意见透过文字或绘图</h3><p>Micrum 总裁 Jean LaBrosse 认为，无论是哪一种工程师，都需要能有效表达自己的想法与意见；往往有些菜鸟工程师无法清晰表达自己的想法，因为抓不到重点，而最好的解决方法是练习将之图形化，例如画出流程图。这听起来好像有点过时，但有时利用各种图框组合来整理自己的思绪、表达想法会是很有用的，例如 iPad 的 iThoughts 应用程式。</p>
<h3 id="十、学习无线连接技术"><a href="#十、学习无线连接技术" class="headerlink" title="十、学习无线连接技术"></a>十、学习无线连接技术</h3><p>自认是低阶嵌入式工程师、有13年工作经验的 iRobot 资深首席软件工程师 Chris Svec 建议，嵌入式工程师需要在接下来1~3年学习无线连接技术，特别是 Wi-Fi 与蓝牙低功耗（BLE）；因为现在的嵌入式装置（至少各种消费性装置都是）与使用者智慧型手机连接的主要（或唯一）方式，就是透过这些无线技术，虽然 Wi-Fi 与 BLE 不一定会是嵌入式系统的标准配备，但熟悉这些技术对嵌入式工程师来说会很实用。</p>
]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>程序员</tag>
        <tag>职场</tag>
      </tags>
  </entry>
  <entry>
    <title>参加IT培训的正确心态</title>
    <url>/coding/the-right-way-to-take-it-training.html</url>
    <content><![CDATA[<p>今天在CSDN看到《<a href="https://blog.csdn.net/csdnsevenn/article/details/78955250">如何看待许多年轻人“疯狂”的投入到IT培训当中</a>》一文，于是想起了大学毕业之际参加嵌入式培训的那段时光，嘻嘻，投个稿~</p>
<p>我是非计算机专业本科毕业的，学校也不是很差，但基本上是玩到了大四，可是直到快要毕业，我的内心还对一件事情耿耿于怀：硬件和软件是如何配合工作的？</p>
<p>由于在学校难以得到老师的专业指导，而大四那年学业不是很繁忙，于是我决定参加去脱产的嵌入式培训班，此举让身边的同学都傻了眼，因为这意味着我将错过大部分不错的校园招聘，而且每天早出晚归地学一些不知道有没有用的东西，同时也成了负资产。</p>
<p>我的想法其实很简单，就是想知道那些软件到底是怎么样控制硬件的？我想花点时间把它弄懂，至少是弄懂一些皮毛吧，这样会让我活得踏实一点。因为我觉得现在不弄懂的话，以后如果从事别的行业估计一辈子都不用懂了。</p>
<p>然后就这样开始了整整半年的培训，培训班的同学五花八门，有企业老板，有公务员，有待业的，有本科、专科在校学生，值得一提的是几乎有一半是来自同一个学校同一个专业的学生，美其名曰：校企合作。为什么会特别提到这批“校企合作”的学生呢？因为这跟今天将的话题有关——该不该参加 IT 培训？</p>
<p>实际上，据不完全统计，学习效果和就业情况最差的就是这类型的学生！为什么呢？因为这些学生本身来自教学水平和学习氛围较差的学校，同时学习能力和自律性较差，而且很多人的心态不正确，比如有的是迫于学校压力或毕业设计来的，有的是看身边的同学来了所以也来了，有的是看到IT行业工资高所以来了……根本就没考虑过自己合不合适，应不应该。</p>
<p>那么，下面就聊聊我对 IT 培训的一些浅见：</p>
<p>首先，必须明白的是，IT 培训机构鼓吹的“就业缺口大、起薪高、前景好”是有条件的，软件工程是一个很奇葩的行业，允许很多参差不齐的程序员入行，但是你有没有想过，能用的程序≠正确的程序。所以，所谓的就业缺口大，是指缺乏真正懂计算机的人，而不是会写几行代码的人。培训机构经常张贴一些就业明星，让大家觉得参加完培训就能随便拿到 10k+ 月薪的 offer，但实际上，大部分高薪就业的学员，其实即便不参加培训也能获得一份不错的 offer。所以这也是我要强烈提醒的一点：<strong>认识你自己！</strong></p>
<p>只有当你清楚自己想得到的是什么？而培训机构能否提供你想要的？这时候，你才应该考虑是不是要参加培训。</p>
<p>对于我来说，培训机构能提供的是：</p>
<ol>
<li><strong>学习环境</strong> —— 靠谱的培训机构都有比较完善的一套课程体系，对于基础不扎实的同学来说，这是一次很好的补救机会，会对整个学习路线有清晰的认识，也少走一些弯路，这一点我觉得对初学者来说很重要，而这也是很多高校教育所欠缺的；同时，天天灌鸡汤的学习氛围也能在一定程度上提高学习的积极性；另外，在技术方面，前辈的正确指导在入门初期尤为重要。</li>
<li><strong>行业动态</strong> —— 我毕业的时候学校搞“产、学、研”，现在搞各种“创客空间”，说明了一个很现实的问题，学校教育与产业发展严重脱节！导致很多工科学生在学校学的东西根本难以在社会上谋求一职，而现在教育家们也终于觉醒并且行动了，但显然晚了一点，否则这几年培训机构怎么会这么火呢？甚至到现在，我身边也有很多同事，整天埋头搞研发，结果到头来问这个不知道、那个不知道。所以一定要了解行业发展形势呀，否则不淘汰你实在天理难容！</li>
<li><strong>就业机会</strong> —— 据我了解，正规的培训机构都与很多企业有长期联系，也是因为企业发现学校难以培养他们所需的人才吧，所以有些会委托培训机构做“定向培训”，但相信我，绝对没有“包就业”的说法！基本上就是推荐就业、组织招聘会等等，所以如果你学不好的话，当然是没有企业愿意招聘的。放心，培训机构也不会不管你，毕竟你是交了钱的，那就让你再培训一期呗，时间成本啊！</li>
<li><strong>人脉关系</strong> —— 对于非科班出身的程序员，这一点是应该是比较看重的，说不定你的老师、同学以后就是你的老板、同事呢，哈哈。还有，你有没有发现，招聘网站上很少有招10年以上的程序员，不是程序员干不过35岁，而是到了那个岁数，基本上不靠投简历来找工作了。</li>
<li>……</li>
</ol>
<p>再来说一下，培训机构不能给你带来的是：</p>
<ol>
<li><strong>学习能力</strong> —— 短短的几个月，培训机构难以为你带来学习能力的提升，哦，即便是几年，也很难。因为学习能力是一种自发行为，而这恰恰是程序员的核心竞争力。</li>
<li><strong>职业规划</strong> —— 咦，上面不是说提供就业机会吗？额……虽然提供就业机会，并且很多培训机构也有职业规划的课程，但很遗憾，就像医生给病人治病一样，跟你说手术有助于健康…… 反正只有自己才是最了解自己的。</li>
<li><strong>工程素养</strong> —— 很多 IT 培训机构都是针对入门级的，并且近年来我发现讲师越来越年轻了，自身本来就欠缺工程经验，所以只能讲一些教学代码，而不是工程代码，所以工程师们需要在日常的研发过程中慢慢积累总结，形成良好的工程素养。</li>
<li><strong>写作能力</strong> —— 啥？我是程序员，干嘛要写作？</li>
<li><strong>英语水平</strong> —— 不会看英文文档的程序员很难进步！</li>
<li><strong>Debug 能力</strong> —— 世界上有两种 Bug：在这里犯错，死在这里；在这里犯错，死在那里。珍爱生命，远离 Bug！</li>
<li>……</li>
</ol>
<p>下面吐槽一下工作期间的一些无语瞬间：</p>
<ul>
<li>有一次，跟另一个也是培训出来的程序员合作，他负责 Qt 界面编程，一开始经常问我怎么排比较好看，怎么这么难调整呀，然后我一看他代码——全是使用绝对位置的 QLabel、QLineEdit、QPushButton……</li>
<li>跟一个小伙合作，要对 API 进行交叉测试，他也不知道啥叫测试用例，然后就开始手动输入数据去做路径覆盖测试，搞了几天还没搞完……</li>
<li>有一次跟一个从世界 500 强企业跳槽过来的资深嵌入式工程师聊天，他说：我研究过了，那个叫 RTOS 的系统不好用…… 说白了，MMU 就是用来管理 flash 的…… 单片机没有文件系统的概念啊…… TCP 通信每次发送数据前都要进行三次握手…… 电机控制不用 PID 算法，温度控制才要…… 我想设计一套 API 用来统一世界上所有不同的平台…… Arduino 是啥…… RMS 是谁…… 开源软件怎么这么烂…… 我以前在世界 500 强企业工作的，怎么可能会错……</li>
</ul>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>与其整天考虑该不该参加IT培训，该不该当程序员，不如好好了解自己，想想怎么提升自己的能力，提升自己的认知水平，努力完善自己，创造美好的东西。否则，当了程序员又怎么样？</p>
<p><img src="../images/coding/coding.gif"></p>
]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>程序员</tag>
        <tag>职场</tag>
      </tags>
  </entry>
  <entry>
    <title>我的2017——作为一名程序员，我重新思考了我生活的目标</title>
    <url>/journal/2017-year-end-summary.html</url>
    <content><![CDATA[<p>今年 CSDN 没有组织程序员年终总结征文活动，于是我这篇文章在云笔记中躺了好几个星期，今天（大年初二）——终于有点时间和心情把它写完，回想过去一年里所发生的事，嘿，时间过得真快。</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/560b9da1bb80c3fc34defba85e610946.gif" alt="这里写图片描述"></p>
<hr>
<h2 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h2><p>首先，工作上不紧不慢、按部就班，还是以嵌入式软件工程师的身份走完了整个2017，完成了公司计划内的两个项目。工作内容还是传统通信行业的一些嵌入式和应用层的软件开发，涉及 ARM、Linux、FreeRTOS、音视频，以及一些通信协议和特定应用场合的业务逻辑等内容。</p>
<p>但是总体来说，工作上并没有太多亮点（或者说给我带来太大的自豪感和满足感），在国企做研发，给我的感觉就是——没有研只有发。不停地开发，却很少停下来专研某项技术，很多时候给我的感觉就是对技术没有太多的追求，能实现应用需求，能盈利就好。这一点在很多层面上都有所体现，显然是有历史原因的，也不是我一个小小程序员能撼动的了。</p>
<p>公司在创业板成功上市，实现了王老板的小目标，所以我们老板也慷慨地给我们发了一点点奖金。同时我自己充分发挥中华民族勤俭节约的优良传统，也差不多实现了自己的2017理财小目标，虽然相比于王老板的小目标不值一提，但毕竟在理财的路上踏出了一步，理财就是理生活，所以还是值得肯定的。</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/0f5a8d08f362322710214f930f372222.png" alt="这里写图片描述"></p>
<h2 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h2><p>由于工作上的一些限制，ARM+Linux 相关技能并没有得到太多提升（也许是我想多了，又或许是很多国内的甲方都这样，不是那么注重技术积累，所以如果想继续提升的话，可能要考虑 IC 厂商或方案提供商等企业了）。</p>
<p>报了一些在线的英语课程，坚持了大半年了，也不知道到底有多大提升，只是感觉比以前更敢说英语了，继续坚持吧，没有量变哪来质变呢。感谢互联网时代，现在有很多不错的英语学习平台，有兴趣了解的可以私信我，这里就不打广告了。</p>
<p>另外也不定期学习一些网络课程，比如 CSDN、实验楼、极客学院等等，还有慕课网、中国大学慕课、网易云课堂等等，实在太多了，所以质量也参差不齐，想学习某些技术的小伙伴一定要仔细研究挑选才行，特别是对于收费较高的。</p>
<p>此外，2017年参加了两次软考，并且都顺利通过了，分别是2017上半年的【软件设计师】和2017下半年的【嵌入式系统设计师】。虽然分数不是很高，但毕竟也是妥妥地通过了，这对于半路出家并且第一次参加软考的程序员来说，还是蛮有鼓励的。</p>
<img src="/images/journal/20180217211802537.jpeg" width="600">

<p>那软考证书能干啥呢？听说对涨工资、办户口、考公务员都有用，而且现在有些证书类别是中日韩+印度相互认证的。而且备考的过程也是一次系统学习的过程，可以查漏补缺，可以学习一下项目管理方面的知识，反正能考就考了呗，说不定啥时候就能用上呢。</p>
<p>还有就是，有事没事就参加各种线上线下的沙龙，比如 ST、融创芯城、AWS、Linuxer 等等组织的，向各位前辈和业界大牛学习，确实让人感受到行业的变化。</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/2772fa3a37d48258204746d25f03caf9.png" alt="这里写图片描述"></p>
<h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><p>2017最大的变化就是——留了长发，虽然每次回家都会被老妈吐槽，还被恐吓说等我睡着了就给我剪掉（我知道她不会这样做的）。但我还是义无反顾地留了长发，也不是为了什么，大概是厌倦了小平头摆了。</p>
<p>九月份和女朋友去了一趟欧洲（荷兰+比利时+法国）自由行，这对于我们来说是一个不小的挑战，不仅要克服时差和饮食差异，还要从头到尾订机票酒店、办签证、做攻略、准备各种东西，哦！还有每天都担心不够用的英语……</p>
<p>记忆犹新的是，为了省钱买了特价的中转机票——需要在芬兰赫尔辛基转机，不幸的是，由于航班延误，行李被留在了赫尔辛基万塔机场，因此我们在阿姆斯特丹渡过了凄凉的一整天。</p>
<p>这次旅游对我来说，感受最深的是西欧的历史文化冲击，对于理工科学生来说尤其如此。</p>
<p>（此处省略10000字……）</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/55e437bf81f5726c59fb3367f0354479.png" alt="这里写图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/d65bc94e7b8794edd9fa0118418ffb84.png" alt="这里写图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/a5b8b82ba348c620336ea11536ab8298.png" alt="这里写图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/9a24f30d469c775556d0ddc4fa8f4fe4.png" alt="这里写图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/0dcb7383242d5a8cc2f295f94cf1d588.png" alt="这里写图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/73e6acf87b3df68f51547dc0972a324a.png" alt="这里写图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/f4ec7a2afbab294b8ecebb401904c3f8.png" alt="这里写图片描述"></p>
<h2 id="环保"><a href="#环保" class="headerlink" title="环保"></a>环保</h2><p>还记得这篇文章的小标题吗？——作为一名程序员，我重新思考了我生活的目标。</p>
<p>（所以我特意留了些篇幅来阐述这个问题）</p>
<p>那我原来的目标是什么？</p>
<p>要知道，我出生在十八线乡镇，加上一些家庭原因，可以说一直以来都在贫困线上挣扎，难得通过读书考试完成了大学学业，在大城市有一份体面的工作，所以我原来的目标就是——努力奋斗赚钱让自己和家人能够过上更好的生活。</p>
<p>又为什么会重新思考呢？</p>
<p>有时候我会问自己：“人为什么活着？人生的意义是什么？人终有一死，我该做点什么才对得起这唯一的一生，才算没有白活过？”这些问题存在于我心中已久，也许是因为工作几年之后暂时摆脱了贫困，使得我又重新思考起这些问题来了。</p>
<p>2017年我参加了挺多线上线下的环保公益活动，也对针对一些环保问题进行过分析和研究，算得上是半个在一线摸爬滚打的环保工作者（志工）吧，所以经常遇到有人问我：“你做软件开发的，怎么对环保这么感兴趣？”一开始我并没去想这个问题，不过问的人多了，也就开始思考起来了。</p>
<p>大概从初中开始，自从我知道了如何用淀粉制作酒精，知道了塑料制品、化纤衣服是石油制成的，接受了“垃圾是放错地方的资源”这个观点之后，我就有了环保意识，开始关注“资源、环境、人口”等问题。而我也曾一度以为所有人都和我一样有环保意识，所以垃圾污染的问题应该不是太大的问题，后来当我亲身实践去做点事情的时候才发现，原来我错了——现在我认为环保是一个教育和管理的问题。好，那所以如果一定要为我为什么做环保找一个原因的话，我想马斯洛需求理论就可以很好地回答这个问题了。</p>
<img src="/images/journal/20180218025113431.jpeg" width="480">

<p>我想起了 Richard Stallman 说的一句话 —— <strong>我可以找份工作赚钱，并沉浸在编码的快乐中，但在职业生涯结束后，回首目睹自己筑就的高墙将人与人分隔开，我会觉得我耗尽毕生精力只换来了一个更糟糕的世界。</strong></p>
<p>在我看来，30多年前的“开源软件运动”与我现在所参与的“零废弃运动”本质上是一样的，都是为了创建、维护一个更好的世界。</p>
<p>假如构建幸福生活的基本要素都不复存在，没有了从前的蓝天和灿烂阳光，没有了清新的空气，没有了洁净的水源，没有了安全的食品。那何谈幸福生活？</p>
<p>关于环保这个话题实在有太多东西要聊了，感兴趣的朋友欢迎关注我的个人公众号与我交流。<br>　　<br><strong>欢迎关注我的个人微信公众号~（扫描二维码或搜索”ECO_Mr_R”）</strong></p>
<p><img src="/images/qrcode_8cm.jpg"></p>
<h2 id="展望"><a href="#展望" class="headerlink" title="展望"></a>展望</h2><p>春节期间带来五宝回家，也带来一些关于环保的纪录片，抓住一切机会给大家做宣传，让我深刻地感受到这确实是一个教育和管理的问题，尤其对于十八线乡镇来说，面对垃圾问题很多人都是无知、无奈的。</p>
<p>所以2018年我想继续为环保做点事情，同时发挥自己程序员的优势和目前拥有的资源，勇敢地去探索吧，创变者！</p>
]]></content>
      <categories>
        <category>journal</category>
      </categories>
      <tags>
        <tag>工作</tag>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>如何让你的程序员不要厌倦工作</title>
    <url>/coding/how-to-prevent-programmers-from-getting-bored-with-work.html</url>
    <content><![CDATA[<p>文章来源：Medium，由 TECH2IPO / 创见 陈铮 翻译，首发于<a href="http://tech2ipo.com/">创见科技</a>，转载请注明出处。</p>
<hr>
<p>作为一个程序员，我从来没有在同一家公司工作超过两年。每换一份新工作都是一次很好的职业变动，在这个行业里跳槽如同家常便饭。但是我的前东家们对我的离去并不开心，他们其中一些人花了很大力气想要挽留我，但是我已经对一成不变的工作感到厌倦了，真的不想在同一家公司再待下去。</p>
<blockquote>
<p>免责声明：我很幸运地生活在一个程序员工作岗位供大于求的地方，所以对我来说在换工作永远不止一个选择。</p>
</blockquote>
<p>如今我成为了 Enki 公司的合伙人与 CTO，同时我还要负责在公司里面打造工程师文化。我工作内容的一部分就是确保我们的程序员不要对工作感到厌倦，就像我过去那样。</p>
<p>在团队的帮助下，我们设计了一整套策略去帮助程序员们对抗工作中产生的厌烦情绪，并将这些策略运用到了公司的实践当中。至今为止这套方法还是挺管用的，因此我想要和大家分享一下。</p>
<p>在 Enki 我们的程序员很幸运地一直从事着具有挑战性的工作。我们有很多有趣的事情需要去编码，还有大量有意思的问题亟待解决。因此如何解决「无聊」这件事情对我们来说并不很紧急。但是所有的工作都不会一开始就让你感觉厌烦，无聊这种情绪是随着时间推移蔓延开来的，并且会在最糟糕的时刻爆发出来。</p>
<p>这就是为什么我们从公司成立之初就开始着手预防这类问题，并依靠建立起一种企业文化去帮助我们的程序员克服工作中产生的无聊情绪（真心祈祷这套东西管用吧）。</p>
<p>下面就让我们总结一下为什么程序员会感觉工作无聊，以及如何避免发生这些状况吧。</p>
<h2 id="项目时间延续太长，学不到新东西-x2b50"><a href="#项目时间延续太长，学不到新东西-x2b50" class="headerlink" title="项目时间延续太长，学不到新东西 &#x2b50;"></a>项目时间延续太长，学不到新东西 <span class="github-emoji" alias="star" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">&#x2b50;</span></h2><p>引发程序员无聊情绪最常见也最明显的原因就是一个开发项目拖得时间太长。</p>
<p>我在自己的第一份工作中就充分体验到了项目时间过长带来的无聊感。我的团队要做的是通过一个通用 API 去处理金融数据。一开始这项工作确实令人兴奋，因为这些数据十分复杂且规模庞大，很有挑战性。我从这项工作学习到了如何高效分析数据以及 API 接口设计。但是在一年之后，我们依然在针对相同的数据库工作，使用的也是同样的技术。我在这一针对性很强的领域已经成为一个专家了，在这项工作中再也没有什么新东西可以让我学习。</p>
<p>我不可能再去别的团队或者项目，因为公司感觉把我留在这个项目里才是最合适的。我明白在这个项目中现有的数据与技术已经用的太顺手，所以不可能被替换。我无法说服公司仅仅为了让项目组成员学习新知而改变原本使用的技术。我向公司表达了自己的这种厌倦情绪与沮丧心情，但是无济于事，那么我只好换一份有奔头的新工作了。</p>
<p>如何阻止无聊情绪的产生？</p>
<p>在我们的团队里会试着避免让任何一个程序员接触相同的代码、产品或者数据库超过三个月的时间。将时间设定为三个月也许比较武断，对于大公司来说这段时间可能也太短了。但是我们相信<strong>让程序员在不同项目中快速轮转是正确的</strong>。</p>
<p>为了实现这一设计，我们在公司里提倡一种<strong>全栈文化</strong>，团队里的每一个程序员都能够承担任一部分的编码工作（或者是能够快速学会操作）。</p>
<p>预防无聊情绪滋生的另一个方法就是开诚布公地讨论这个话题。我们每周都会进行一次直接、开放的一对一谈话。如果一个程序员在工作中已经感到太过舒服没有挑战，或者是已经在这一方面过于专精，那么就是时候让他轮转到另一个项目当中去了。</p>
<h2 id="维护代码这种遗留问题让人感觉太无聊-x2b50"><a href="#维护代码这种遗留问题让人感觉太无聊-x2b50" class="headerlink" title="维护代码这种遗留问题让人感觉太无聊 &#x2b50;"></a>维护代码这种遗留问题让人感觉太无聊 <span class="github-emoji" alias="star" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">&#x2b50;</span></h2><p>你能够很清楚地分辨出何时项目就开始进入了维护模式，不论是从正式的渠道还是别的途径，只要当你的程序员花上了 90% 的时间去修补 BUG 而不是开发新功能，那就代表着他们已经进入了代码维护期。有人会说维护代码是一项不可避免的工作，老旧的代码需要不断得到支持。开发软件就像造房子，你总是需要维护和翻新房子的，不是吗？</p>
<p>既是，也不是。这项工作确实需要有人去做，但是<strong>问题通常会出在工作态度上</strong>。</p>
<p>我曾经的一位职场前辈对于维护代码具有强烈的抵触情绪，他理所当然地认为维护代码这种事情根本没有什么好做的，软件开发完毕之后就让它们自己去运行好了。生活简直糟透了，你还不得不适应它。</p>
<p>如何缓解这种抵触情绪呢？</p>
<p>项目开发工作进入无聊的维护模式有时候是由于糟糕的技术决策与缺乏勇气的双重作用。</p>
<p>一个拥有着复杂的依赖关系的庞大整体代码库需要额外的付出时间去做维护工作，于此相反的是，一个架构良好的微服务基础设施拥有更强的灵活性。当一个微服务架构出现缺陷时，你可以立即采取措施去修复。你可以重新写一遍代码，使用不同的编程语言或技术。通过这种方式，你会学习到新的东西而不是仅仅在遗留下来的代码上修修补补。如果你的架构不允许你重新来过，你还可以采取别的措施来改善，并且在这个过程中学到一些 DevOps 的技巧（译者注：DevOps 就是开发（Development）和运维（Operations）这两个领域的合并，可将原本笨重的开发与运维之间的工作移交过程变得流畅无碍）。</p>
<p>想要解决程序员在维护代码中产生的无聊情绪有很多种方法可供选择，公司采用微服务战略只是其中一种可行方式。还有别的公司会通过打造智能工具去让代码维护工作变得更有效率也更有意思。一个比较极端的例子就是 Facebook 对他们的海量 PHP 代码库所做的工作。Facebook 开发了他们自己的编译器以及带有 Facebook 风格的语言（Hack），这使得他们的 PHP 代码库不仅便于维护，也改善了程序员的工作体验。我猜想这种方式并不能完全解决代码维护的遗留问题，但是它确实让这个工作听上去更有趣了。</p>
<h2 id="工作只剩下复制-粘贴这种小儿科的东西-x2b50"><a href="#工作只剩下复制-粘贴这种小儿科的东西-x2b50" class="headerlink" title="工作只剩下复制 / 粘贴这种小儿科的东西 &#x2b50;"></a>工作只剩下复制 / 粘贴这种小儿科的东西 <span class="github-emoji" alias="star" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">&#x2b50;</span></h2><p>程序员所做的工作就是不停写代码。</p>
<p>我在之前的工作岗位上曾经产出了大量没有什么意义的代码。比如说我曾经为数据集成而编写了 Groovy 与 Python 脚本。这些数据相当复杂，包含了许多不一致的数据库对象集合，因此也不能够自动化运行。鉴于此我不得不编写大量代码，我的同事都猜想我肯定从中学习收获了很多。</p>
<p>然而并没有，为什么会这样呢？</p>
<p>因为 50% 的代码（这是夸张的描写手法！）是我直接从 Stack Overflow 复制粘贴过来的。还有 40% 的代码是从其他脚本中复制过来的，有一些来自我同事的代码，还有一些是我之前写过的。工作变成了一种重复劳动，其中没有一点创造性与学习长进可言。</p>
<p>我们如何避免这种情况？</p>
<p>作为一个团队，我们都会花时间去了解团队其他成员写了哪些类型的代码。我们在代码审查、同步以及工作回顾的时候去完成这件事情。如果一个人花了一星期时间却只写出了毫无创造性的代码，我们就会试图去弄明白在他身上到底发生了什么。</p>
<p>有时候问题的根源来源于你所用的技术。我们可能使用了过多的脚本，或者是做了许多本不应该做的配置工作。如果是这种情况，我们就会添加更多的自动化设置。有些时候我们进行代码的复制粘贴是事出有因的，在这种情况下大家就会一起分担这项不得不完成的无聊工作。</p>
<h2 id="只能使用内部工具也太没劲了-x2b50"><a href="#只能使用内部工具也太没劲了-x2b50" class="headerlink" title="只能使用内部工具也太没劲了 &#x2b50;"></a>只能使用内部工具也太没劲了 <span class="github-emoji" alias="star" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">&#x2b50;</span></h2><p>作为一个程序员，我们喜欢打造一个自定义的内部工具来解决某些特定问题，因为动手创造是一件令人兴奋的事情。而且，构建一个定制化的解决方案通常要比找出一个现有的方案进行再利用要好得多。</p>
<p>然而相比于学习一门时下流行的开源技术，学习一个内部专有工具的趣味性只有前者的十分之一。 这到底是为什么呢？</p>
<p>因为它不能成为你和朋友聊天时的谈资，你也不能到处吹嘘，你不会在 Hacker News 上读到关于它的新闻，你也不可以在编程马拉松（hackathons）活动中使用它，当然了你也不能将其用到自己秘密开发的副业项目中。</p>
<p>很多公司都跌入了打造内部工具的陷阱当中，因为它随之而来的就是给程序员带来更多的无聊情绪。换句话说：你为了解决一个短期问题所开发的内部工具反而带来了更多后患无穷的长期问题。</p>
<p>在我的上一份工作中就对于这个问题有着切身体会。我被限制只能使用公司自己开发的针对大规模数据集成的 DSL 语言，而我此前一直学习的完全是另一种 SQL 语言。我更希望能够用上哪怕是 Spark 这样开放程度没那么高的语言。如果不使用内部工具，我将会 10 倍投入工作，写出的代码也会 2 倍优于现有的水平，还会让我的生产力提高 5 倍（不要纠结于其中的倍数是否有数学逻辑，你只要体会我的心情就行了！）。</p>
<p>什么样的企业文化能够避免这一困境？</p>
<p>在我们公司中不会对开源技术抱有偏见。如果能够重新利用相关开源技术，我们当然很乐意去做。我们不会回避前沿技术，一旦开源技术变得足够成熟能够取代我们现行的专用语言，我们就会立马抛弃原有的定制化代码投向开源技术的怀抱中。在我们自己开发的定制化代码变得足够通用之时，我们就会将其开源。</p>
<p>这么做也偶尔会犯错。比如说我们曾经使用过一段时间 agenda.js 去安排我们的后端工作，因为感觉这种技术既尖端又令人兴奋。但是不久之后它就变得太过复杂了，我们只好重新用回了之前老旧但是可靠性更高的技术。即便如此，我们依然不后悔曾经尝试过，因为这也是一种宝贵的学习经验。</p>
<h2 id="如果不知道自己为何写代码，必然厌倦工作-x2b50"><a href="#如果不知道自己为何写代码，必然厌倦工作-x2b50" class="headerlink" title="如果不知道自己为何写代码，必然厌倦工作 &#x2b50;"></a>如果不知道自己为何写代码，必然厌倦工作 <span class="github-emoji" alias="star" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">&#x2b50;</span></h2><p><strong>糟糕的人力管理也是造成程序员对工作心生厌倦的常见原因</strong>。更具体地说就是：针对程序员的自上而下的独裁式管理会让他们产生抵触情绪。</p>
<p>心怀良好意图的管理者经常在不知不觉中就使用了这种独裁式工作方法。尤其在一个开发项目进行的不是那么顺利或者是截止日期临近之时，这种管理方法就更为常见了。在巨大的项目压力下，管理者很自然地就会缩短团队讨论时间，减少头脑风暴，直接命令程序员去写代码，却不解释为何这么做，也不接受任何争辩。而管理者通常这么做的出发点就是想要节省时间，尽快完成工作。</p>
<p>如果这种管理方法能够被理解，也不是每一次都会招致厌烦；事实上，有一些人还挺能接受你简单直接地告诉他应该做什么。当然了，这也是建立在你的说话语气是能被对方接受的基础上。</p>
<p>使用这种独裁式管理方法也有隐藏的成本。通常程序员在明确知道写什么代码之前，需要有一个将智力与创造性进行转换的固有思考过程。换句话说，如果你不让他想明白其中的关键，只是一味地命令他去编码，他就会变成一只会写代码不会思考的猿猴。</p>
<p>更重要的是，<strong>你应该鼓励程序员去追问「为什么」</strong>，这样他们能够更加投入到自己所做的工作中去。除非你们现在所做的是一个剑走偏锋的极端玩意，或者是一个临时补丁，不然的话都应该和程序员交代清楚。如果一个程序员不再关心与项目有关的重要决定，也不再思考这些决定背后的逻辑，那么他应该是已经准备跳槽了。（译者注：哈哈，说的就是我！）</p>
<p>如何防范这一问题？</p>
<p>想要解决这一问题最需要的就是<strong>在企业文化中建立起公开讨论问题的机制</strong>。要留出固定的讨论时间，让整个团队都参与讨论接下来该做些什么、如何计划。想要保持这种开放讨论的企业文化，每个人都要对独裁式的管理方式保持警觉。</p>
<p>尤其是在团队遭遇困难的时刻（或者是截止日期临近的时候），团队成员需要更大声地表达出自己的意见，而管理者则更需要小心谨慎地聆听大家的心声。</p>
<h2 id="日复一日的工作总会不可避免地走向无聊-x2b50"><a href="#日复一日的工作总会不可避免地走向无聊-x2b50" class="headerlink" title="日复一日的工作总会不可避免地走向无聊 &#x2b50;"></a>日复一日的工作总会不可避免地走向无聊 <span class="github-emoji" alias="star" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">&#x2b50;</span></h2><p>还有一点不得不提的是：<strong>在一个封闭的工作环境里长时间工作绝对会扼杀人感知生活的乐趣</strong>。这一点不仅仅是针对科技行业工作者或者是程序员岗位，放诸于其他行业也是一样的。这一条几乎适用于任何一个后台操作岗位，每一天在相同的办公室里，见着同样一帮人，做着一成不变的工作，也没有什么不同文化的碰撞。即便是在一个快速增长的企业环境中，纵然所有的事情从客观角度看都在「良好」运行着，人们也会感觉自己有资格去寻找一些乐趣，并且会从不那么好的事情中感到沮丧。</p>
<p>如何与日常工作中滋生的无聊情绪做斗争？</p>
<p>解决这一问题的关键就是尽力创造多样化：招聘拥有不同背景以及来自不同国家的员工（比如我们的团队现有的 6 个成员就分别来自英国、法国、俄罗斯和希腊）。如果你每天看到的同样一帮人能够给你带来不同文化的冲击，那么上班这件事肯定会更有趣一些。</p>
<p>同时，我们会积极地创造一些走出常规工作环境的机会。</p>
<p>例如我们会一起去参加一些行业聚会以及编程马拉松活动。我们还会一起打造工作之外的副业，共同研究我们喜欢的开源工具。除此之外我们还会不时地帮助其他团队完成一些不那么技术性的工作（包括招聘、市场和分销）。这么做并非因为我们都擅长这些工作，只是为了在日常工作中寻求改变。</p>
<p>我们还会组织一些团队活动（比如一起看一场秘密电影），我们每周还有一个固定的不需要事先预设主题的团队活动时间。在这个自主活动时间里，有时候我们会一起专研技术，有时候会头脑风暴出一个新点子，有时候仅仅是聚在一起玩 LOL，或者是约好一同去泡吧。这个自由活动的美好之处就在于当我们坐下来讨论该该去玩啥的时候，不到最后一分钟根本就不知道要去干什么。</p>
<p>给生活增添这一小小的未知数成为了我们对抗无聊的终极一招。就像其他对抗无聊的方法一样，这也不会是非常完美的解决之道。我们要做的就是在原有基础上不断调整，找出一些新招数，并且将其不断地运用到对抗无聊的战斗中。</p>
]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>程序员</tag>
        <tag>职场</tag>
      </tags>
  </entry>
  <entry>
    <title>我的2018——上懂机器学习，下懂微信建群</title>
    <url>/journal/2018-year-end-summary.html</url>
    <content><![CDATA[<h2 id="全年梳理"><a href="#全年梳理" class="headerlink" title="全年梳理"></a>全年梳理</h2><ul>
<li>上半年，结束了在绿色城乡公益机构的兼职工作，对社区垃圾分类有了深入认识</li>
<li>三月份，参加了广州社科院的城市废弃物管理研讨会</li>
<li>四月份，完成了英语流利说的课程，并成功返学费</li>
<li>四月份，在深圳参加了嵌入式软件可靠性设计与测试技术高级研修班</li>
<li>五六月份，在广州工会修了 Flash 动画设计基础、数码摄影两门课</li>
<li>五月份，参加了嵌入式系统联谊会</li>
<li>五月份，参加了零废弃联盟的 “城市生活垃圾分类” 培训，从业余环保主义者到半职业环保工作者</li>
<li>五月份，开始尝试在家做厨余堆肥，干湿分类的第一步</li>
<li>六月份，注销了业余时间和朋友一起成立的公司</li>
<li>六月份，参与 RT-Thread、LEP 开源项目</li>
<li>七月份，在深井村参与转型城镇的尝试</li>
<li>七月份，开始在 CSDN 学习 Python 全栈工程师课程</li>
<li>七月份，升级加薪，继续待在公司面向 Money 编程</li>
<li>八月份，参加了零废弃联盟的 “城市生活垃圾分类” 成都游学，看到了不一样的东西</li>
<li>八月份，参与 8.18 首届零废弃日活动，“加速减塑，我有行动”</li>
<li>八月份，回家跟外公学习编篮子技术</li>
<li>九月份，学会使用 GitBook + Typora + Git 写作方式</li>
<li>十月份，参与未来社的二手市集，探索零包装商店模式</li>
<li>十月份，报名参加并开始准备高通开发者大赛（机智云 GoKit4）</li>
<li>十一月份，参加系统架构设计师考试，并且通过了呀</li>
<li>十一月份，参与 “双十一零网购” 活动，上电视节目啦</li>
<li>十二月份，参加 RT-Thread 嵌入式系统面基大会</li>
<li>十二月份，参加 GDG 广州站活动，保持好奇心，让自己永远处于学习状态</li>
</ul>
<hr>
<h2 id="做好本职工作"><a href="#做好本职工作" class="headerlink" title="做好本职工作"></a>做好本职工作</h2><p>作为一名普通的技术人员，没有家庭资源的支持，没有强大的人脉关系，技术就是我们在这个社会上最好的立足点。这是我今年深切体会到的，我们要尽快完成原始资本的积累，必须要沉下心好好钻研一门技术，并以此为基础去扩展。正是因为掌握一门技术是有门槛的，所以才给了我们机会，只要我们不怕苦不怕累，在每个时代都可以找到突破的机会。</p>
<p>本来6月份已经提交辞职申请的，然后经过领导的游说和金钱的诱惑，我屈服了（答应了2018年不走）。这也是我愿意继续在这里谈这份工作的原因。</p>
<h3 id="国产化进程"><a href="#国产化进程" class="headerlink" title="国产化进程"></a>国产化进程</h3><p>纵观全年，集团在智能装备的研发上中规中矩，最大的变化就是受中美贸易战的影响，产品设计的芯片、系统和软件组件都在逐步寻找国产/自主研发的替代方案。形势是好的，但其实也很被动，尤其是像我们这样只做系统集成和业务开发的企业。一方面的国产优秀的芯片和解决方案不多，并且价格昂贵；另一方面是大家对技术不够包容，不够开放。</p>
<p>做了一些这些方案，给我最大的感受是，大家都想在产业链中分一块蛋糕，却很少人想怎么把产品做好，怎么提升服务质量，怎么优化研发流程。很明显的一点就是开发者社区不够开放、缺乏活力，甚至是以“保密”为由，连社区都省了。由此导致采用“国产方案”的产品研发效率低，落地不顺畅。</p>
<p>从我参与的研发项目来看，我觉得解决这个问题的根本在于 —— 我们没有正视自己，不敢承认自己的失败和不足，没有长远的规划，在现有人力物力基础上，如何逐步替代，持续研发，形成良性循环。这里的关键词是“持续”。</p>
<h3 id="从产品到工具"><a href="#从产品到工具" class="headerlink" title="从产品到工具"></a>从产品到工具</h3><p>再来谈谈今年的一个变化，就是我在公司的角色慢慢从产品的研发转向了工具的研发。这个变化其实是我主动转变的，因为我发现在目前企业的框架中，产品研发的创新能力不足，相反的，却缺乏很多工具。比如我做了一个测试工具帮助测试人员摆脱繁琐枯燥的工作流程，做了一个监控平台用于监测网络内多台 Linux 系统的状态，并提供在线测试和软件升级等功能。</p>
<p>对于程序员来说，设计产品和设计工具其实差别不大，最不一样的地方可能就是产品是对外的，工具是对内的。对国企来说，大概就是从面向客户编程转变为面向领导编程吧。不过因为我们之前并不注重工具的研发，所以领导对我的管理相对轻松一点。</p>
<h3 id="从研发到管理"><a href="#从研发到管理" class="headerlink" title="从研发到管理"></a>从研发到管理</h3><p>在扁平化管理的企业里，其实短时间内走向管理层还是挺难的，尤其是一个萝卜一个坑的国企。但是我有幸接触到一些管理方面的工作，原因是因为我们的项目经理太懒了（思考方面，行动上还是很积极的）。这让我意识到成本控制、流程管理、研发管理、版本管理对于一个 IT 项目的重要性。但其实这还不够，要想项目做得又快又好，团队建设十分关键！如何让项目组成员都对项目有清晰的认识，如何让项目组成员发挥自己的长处，如何让项目组成员团结一致…… 这些都是对项目经理的考验。毫不夸张地说，这在某种程度上决定了项目的生死。</p>
<h3 id="从嵌入式到-Web"><a href="#从嵌入式到-Web" class="headerlink" title="从嵌入式到 Web"></a>从嵌入式到 Web</h3><p>今年其实也有参与几个基于 STM32 和 NXP 芯片的嵌入式产品项目，但其实大多数时候都是炒冷饭。对我来说，今年更值得兴奋的事情是把 Web 技术运用起来了，结合 Linux 运维、云计算方面的知识，形成了一个整体。这让我更加完整地看到了产品的方方面面，看到了技术内外的更多事情，同时也为职业生涯带来更多可能性。</p>
<hr>
<h2 id="开阔思维和见识"><a href="#开阔思维和见识" class="headerlink" title="开阔思维和见识"></a>开阔思维和见识</h2><h3 id="零废弃之路"><a href="#零废弃之路" class="headerlink" title="零废弃之路"></a>零废弃之路</h3><p>从去年10月份接触国内一些环保公益NGO开始，做了好多场活动的志愿者，慢慢发现自己原来对一些社会问题的想法是很局限、很片面的，也慢慢看到了很多社会问题的过去、现在和未来。</p>
<p>在实践的过程中，遇到了很多有相似经历或想法的人，这让我大多数时候不再觉得自己太特立独行。</p>
<p>零废弃其实并不是要求我们对自己多么苛刻，不能产生垃圾。更多的情况下，她是在给我们愿景和行动指南，让我们看到这个世界的另一种可能。这个想法很奇特，但仔细想想，你会发现其实跟自由软件的思想是一致的。计算机领域的前辈们经过三十年的努力，让我们看到了自由、开源和社会化编程的可能，感受到了她所带来的好处，集市和教堂并非两个对立面。同样，零废弃运动也一样，虽然很漫长，但经过我们坚持不懈的努力，一定会有越来越多的人感受到她的美好，并为之行动。</p>
<h3 id="找到喜欢的圈子"><a href="#找到喜欢的圈子" class="headerlink" title="找到喜欢的圈子"></a>找到喜欢的圈子</h3><p>过去一年，除了混迹于电子圈和程序员圈，也在学术圈、环保圈、公益圈和慈善圈混个脸熟。大多数时候，程序员的工作都很紧凑、很单调，时间长了会让人忘记生活的本质，忘记我们到底在奋斗些啥。在学术圈，看到教授和企业家在不断推进产学研模式；在环保圈，看到全国各地的企业、NGO 和个人在身体力行；在公益圈，看到基金会和社会团体的进步和成长，尤其是壹基金和万科公益基金会对垃圾分类项目的支持；在慈善圈，看到真的有很多人付出无所求，就好像写开源软件一样傻，但其实很快乐很有意义。这一切一切，都让我感受到了我的渺小，也感受到了微小的力量也能改变世界！</p>
<p>当然，电子圈和程序员圈依然有很多有趣的事情，有时候在群里吐槽，有时候在群里讨论。真的很感谢 Linuxer、RTT、单片机与嵌入式系统社区，可以相互学习、相互促进。</p>
<p>反正，谢谢你们，有你们真好！</p>
<hr>
<h2 id="一些感悟"><a href="#一些感悟" class="headerlink" title="一些感悟"></a>一些感悟</h2><h3 id="有时候自私一点是好事"><a href="#有时候自私一点是好事" class="headerlink" title="有时候自私一点是好事"></a>有时候自私一点是好事</h3><p>同事问：我是怎么同时做那么多事情还能升级加薪的？</p>
<p>其实我并没有同时做几件事情，我依然是单线程地工作着。宏观看起来是并行的，其实微观看还是串行的，这其中的关键就是时间管理。简单来说，可以总结为：放弃不重要不紧急的事，提前准备重要但不紧急的事。当然啦，说起来简单做起来很难，有时候我也做不好，但还好我的朋友圈正能量太足了，所以思想上总会受到鞭策。另外一点就是要找到自己的定位，专注一点，比如虽然有不同的圈子，但其实很多时候我扮演的角色还是程序员或者技术顾问。还有就是不要做老好人，不要太过于乐于助人，有时候自私一点是好事！</p>
<p>一个人无论是卓越还是平凡，健康愉快地生活，比什么都重要。对自己适当自私一点，多关爱身边的人。</p>
<h3 id="互联网时代，要谦虚，要善良"><a href="#互联网时代，要谦虚，要善良" class="headerlink" title="互联网时代，要谦虚，要善良"></a>互联网时代，要谦虚，要善良</h3><p>过去一年，从互联网上接收的信息太多了，以至于信息过载，有时候会把自己弄得很累。所以前两个月我删除了大概十个微信群，以至于不让自己的微信每天都是上万条未读消息。如果遇到好的文章，就尽快读完，并且多读几遍，以便下次遇到同类型的文章可以快速阅读或者直接忽略，从而节省时间。</p>
<p>在互联网时代，一方面我们要多接触、多学习各方面的东西；另一方面我们要学会思考，取其精华去其糟粕。对自己不熟悉的东西，不要急于下结论，不要动不动就论战。时刻记住要做个谦虚、善良的网民。</p>
<hr>
<h2 id="进步与不足"><a href="#进步与不足" class="headerlink" title="进步与不足"></a>进步与不足</h2><h3 id="进步的地方"><a href="#进步的地方" class="headerlink" title="进步的地方"></a>进步的地方</h3><ol>
<li>达成既定的理财小目标；</li>
<li>人情世故、人际关系处理得比较好，没有了前几年的不适应感；</li>
<li>学习了 Web 前后端开发，从技术角度和应用角度，都提高了对互联网的认识；</li>
<li>学习了数据分析和机器学习，意识到了数学的价值，重新学习统计学和线性代数；</li>
<li>跳出了程序员圈子，认识了学术界的大牛，认识了潜水员，认识了环保慈善公益界的很多热爱生活的小伙伴。</li>
</ol>
<h3 id="不足之处"><a href="#不足之处" class="headerlink" title="不足之处"></a>不足之处</h3><ol>
<li>不够自律</li>
<li>不够高效</li>
<li>还不够钱买个小公寓</li>
<li>没有坚持每天锻炼身体</li>
<li>没有多陪陪女朋友和家人</li>
<li>表达能力、演讲能力有待提高</li>
</ol>
<hr>
<h2 id="新年展望"><a href="#新年展望" class="headerlink" title="新年展望"></a>新年展望</h2><p>希望2019年，能顺利写完我的书，然后在新的团队里找到合适的定位，拥有一份自己喜欢并且对社会有益的事业，并为之贡献自己的青春和力量！</p>
<hr>
<h2 id="贴一些图"><a href="#贴一些图" class="headerlink" title="贴一些图"></a>贴一些图</h2><p><img src="https://img-blog.csdnimg.cn/2019010123173555.jpg" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/20190101231757108.jpg" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/20190101231820337.jpg" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/20190101231831776.jpg" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/20190101231845855.jpg" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/20190101231856219.jpg" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/20190101231907800.jpg" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/2019010123192436.jpg" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/20190101231937276.jpg" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/20190101231948445.jpg" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/20190101232002268.jpg" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/20190101232013284.jpg" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>journal</category>
      </categories>
      <tags>
        <tag>工作</tag>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>我的2019——努力成为我认为我可以成为的人</title>
    <url>/journal/2019-year-end-summary.html</url>
    <content><![CDATA[<p>今年回老家过年，G1128 列车途经武汉，在新型冠状病毒的阴影笼罩下，整个旅程多了一份严肃感，我也开始整理过去一年经历的事情与所思所感。</p>
<img src="https://img-blog.csdnimg.cn/20200125174446341.jpeg" width="300" />

<p>2019 年有很多伤心的事。比如：</p>
<ul>
<li>年初买了个房子，然后房价就降了；</li>
<li>投资的互联网金融还没下车，平台就倒了；</li>
<li>朋友忽悠我做外汇交易，结果爆仓了，时间耽误了，朋友也没了；</li>
<li>每天上班就像坐牢一样，忙来忙去做一堆烂项目，进步很慢，职业发展也遇到了瓶颈；</li>
<li>申请辞职被领导挽留了，没有转管理岗，新项目也夭折了，感觉开始边缘化了；</li>
<li>主动请缨在公司园区做垃圾分类推广，搞了两个月，收效甚微；</li>
<li>多管闲事，在公司园区救助流浪猫，被公司警告多次，最后小猫下落不明；</li>
<li>还有很多计划内的事情没有完成 ……</li>
</ul>
<p>虽然 2019 有很多不如意，但也没有虚度光阴。</p>
<h2 id="工作上"><a href="#工作上" class="headerlink" title="工作上"></a>工作上</h2><p>今年是在 G 公司工作的第三个年头了，由于是国企军工企业，业务、产品、规模都没什么变化，工作内容自然也没什么变化。这导致我每天都过得很痛苦，越来越无法忍受这种一成不变的生活了。因此 2020 年一定要改变！希望能从事一份既快乐又有不错收入的工作。</p>
<p><img src="https://img-blog.csdnimg.cn/20200125174718719.png" alt="在这里插入图片描述"></p>
<p>虽然作为程序员在本职工作上的技术进步不大，但对项目管理流程和业务的熟悉程度有了更多了解，学会了站在不同角度分析项目需求，也更愿意与同事、领导沟通问题。年中与领导进行了多次沟通，领导让我考虑一下要不要转管理岗，这也让我对个人职业发展做了一次深刻的思考。</p>
<p>在公司难以学习、应用新技术的情况下，尝试发展个人项目，包括嵌入式操作系统、Web 技术的应用，虽然在收入上没有明显增加，但保持了对技术的熟悉度和对行业发展的敏感度。</p>
<p><img src="https://img-blog.csdnimg.cn/20200125174740923.png" alt="在这里插入图片描述"></p>
<p>在副业上，今年主要还是关注环保领域。参加了一些社区志工、企业参访、环博会等活动，进一步了解了垃圾分类后端处理情况，包括废品回收、旧衣物回收、大件垃圾回收、塑料和金属销售、垃圾焚烧发电等。同时与民间零废弃群体和人士建立了联系，在环保领域做正式创业前的试探。</p>
<p>未来十年，我希望立足于粤港澳大湾区，成为一名物联网全栈开发工程师。如果要加一个行业限制，我希望在环保和能源领域深耕。</p>
<p><img src="https://img-blog.csdnimg.cn/20200125232653587.jpeg" alt="在这里插入图片描述"></p>
<h2 id="学习上"><a href="#学习上" class="headerlink" title="学习上"></a>学习上</h2><p>学习了中国大学 MOOC、CSDN、阿里云大学、AI 电堂等平台的一些课程，涉及程序设计、项目实战、心理学等。坚持收听开言英语、得到 App 以及喜马拉雅上的音频栏目，增加了对世界的认识。</p>
<p>今年考了两个证书：</p>
<ul>
<li>阿里云云计算专业认证（ACP）</li>
<li>RT-Thread认证嵌入式工程师（RCEA）</li>
</ul>
<p>为什么会考这两个呢？这其实是对未来物联网发展的两个趋势的判断，一个是极大方向 —— 云计算（物联网云平台），一个是极小方向 —— 嵌入式（物联网节点）。</p>
<p>八月份去杭州参加了“嵌入式系统联谊会”，今年的主题是“国产嵌入式操作系统技术与产业发展”。会上见识了许多优秀的国产操作系统和基础软件，在中美贸易战的形势下显得尤为重要！我作为 RT-Thread 项目的贡献者感到非常自豪，同时对国产操作系统、编译工具、数据库等基础软件的未来充满了信心。</p>
<p><img src="https://img-blog.csdnimg.cn/20200125174819578.jpeg" alt="在这里插入图片描述"></p>
<p>另外，今年很开心的一件事是学会了游泳！27年的旱鸭子学会了游泳！现在游泳已经成为我最喜欢的运动之一了～</p>
<p><img src="https://img-blog.csdnimg.cn/20200125174846400.gif" alt="在这里插入图片描述"></p>
<h2 id="生活上"><a href="#生活上" class="headerlink" title="生活上"></a>生活上</h2><p>年初杀了金鹅凑了首付入手一套小房子，计划 2020 年初收楼，所以很快就可以拥有一个心仪的书房了，非常期待！</p>
<p>五月份放弃合租，重新单独租了一个公寓，生活的节奏可以更好地把握。然后开始健身，学习游泳，学习素描，给生活增添了一些色彩。</p>
<p><img src="https://img-blog.csdnimg.cn/20200125174940818.gif" alt="在这里插入图片描述"></p>
<p>2019 年 7 月上海实施生活垃圾强制分类，引起了广泛关注。于是在趁机尝试在小区和公司做垃圾分类推广，做了 5 场垃圾分类培训和分享。参与了规则制定、撤桶设点、投放引导、监督登记等过程，历时两个月，有点效果，但仍有很多优化空间。</p>
<p><img src="https://img-blog.csdnimg.cn/20200125175001211.png" alt="在这里插入图片描述"></p>
<p>年末终于把留了三年的头发捐了，结束了这段长发男孩的经历。&gt;&gt;“<a href="https://mp.weixin.qq.com/s?__biz=MzAxNjcyNDU1OQ==&mid=2649508055&idx=1&sn=8e569c6ad2ab3bf804e1d98b0f6ff309&chksm=83e88ff7b49f06e11ca18e0e97e2eee7666a2492f4c09d3937022479b7f3bc569d4bf3433f8a&token=980712760&lang=zh_CN#rd">留了三年长发，只为了让生命更美丽</a>”</p>
<p>下半年发现并救助了两批总共 9 只猫咪，其中 8 只小奶猫，1 只猫妈妈。成功帮其中 5 只小猫咪找到领养人，另外 3 只中途不见了，希望它们能遇到好人救助，能找到一个温暖的家！至于猫妈妈，在最后三只小猫咪弄丢了之后，显得十分焦虑，年后如果再见到它希望能帮它申请流浪猫免费绝育。</p>
<p>流浪猫救助过程最大的障碍，是身边很多人不理解，甚至不支持。而我也无法做到视而不见，无法做到没有努力就把命运交给自然法则，人类已经这么强大了，面对几只小猫却说无能为力。虽然结局并不完美，但至少我努力过。</p>
<p><img src="https://img-blog.csdnimg.cn/20200125175102343.jpeg" alt="在这里插入图片描述"></p>
<p>至于感情方面，在学习了《晓文老师的幸福心理学》之后想通了一些事情，经过多次沟通后，跟女友的关系日趋稳定，对未来的组建家庭增添了一份信心。</p>
<p><img src="https://img-blog.csdnimg.cn/20200125232809677.jpeg" alt="在这里插入图片描述"></p>
<h2 id="展望"><a href="#展望" class="headerlink" title="展望"></a>展望</h2><p>路漫漫其修远兮，吾将上下而求索。2020 年希望能顺利完成这些事：</p>
<ul>
<li><input disabled="" type="checkbox"> 编制并出版一本书</li>
<li><input disabled="" type="checkbox"> 设计并发布一个网站平台</li>
<li><input disabled="" type="checkbox"> 做一个电台节目</li>
<li><input disabled="" type="checkbox"> 去菲律宾读语言学校进修英语</li>
<li><input disabled="" type="checkbox"> 考个无人机驾驶证（极飞农业无人机操作员考试）</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20200125175207550.jpeg" alt="在这里插入图片描述"></p>
<p><strong>生活的终极意义，是过自己觉得幸福的生活。</strong> 经历的越多，就会越明白什么才是生活的意义，什么才是自己觉得幸福的生活。</p>
<p>2019 年虽然不圆满，但我找到了自己的定位 —— 在环保和能源领域做物联网产品设计与优化，利用数据技术帮助节能减排，坚持可持续发展道路。我不想做多大的事业，我只想坚持去做一份对社会有益的小而美的事业。</p>
<h2 id="给自己的话"><a href="#给自己的话" class="headerlink" title="给自己的话"></a>给自己的话</h2><ul>
<li>请您自己决定什么事对你来说是好的、有价值的、有意义的，建立并坚持自己的原则，学会拒绝别人，而不是一味的妥协让步、忽视自己内心的感受；</li>
<li>为自己的人生树立目标，有了目标，人生才有动力和方向；</li>
<li>人生很短，在做事情的时候，学会利用自己的天赋和长处，扬长避短，这样可以达到事半功倍的效果；</li>
<li>接受多元文化，求同存异，学会和比自己聪明的人一起工作，多和优秀的人一起慢慢地你也会变得优秀；</li>
<li>不要害怕改变，不要害怕失败，不要害怕逆境，你不逼自己一把是不知道自己能干多大的事的；</li>
<li>保持空杯心态，不要故步自封，不要安于现状，要不断吸收新事物，不断反思；</li>
<li>如果一件事一个人对你很重要，不要轻言放弃，要想方设法，努力做到最好；</li>
<li>戒骄戒躁，少就是多，慢就是快，越简单越幸福；</li>
<li>保持饥饿，不断学习，不断进步，越努力越幸运。</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20200125175239512.png" alt="在这里插入图片描述"></p>
<p>“科技的进步，不一定带来社会的进步和人民的幸福。”如果有一天不再当程序员了，这应该就是我的理由。</p>
<p>人生不设限，一切皆有可能！</p>
]]></content>
      <categories>
        <category>journal</category>
      </categories>
      <tags>
        <tag>工作</tag>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>我的2020——一颗红心，两手准备</title>
    <url>/journal/2020-year-end-summary.html</url>
    <content><![CDATA[<h2 id="今年做了什么"><a href="#今年做了什么" class="headerlink" title="今年做了什么"></a>今年做了什么</h2><h3 id="Flag-验收"><a href="#Flag-验收" class="headerlink" title="Flag 验收"></a>Flag 验收</h3><p>看回 <a href="https://luhuadong.com/journal/2019-year-end-summary.html">2019年总结</a>，又啪啪打脸了。。。果然计划赶不上变化，以后立 Flag 还是要慎重！</p>
<ul>
<li><input disabled="" type="checkbox"> 编制并出版一本书</li>
<li><input disabled="" type="checkbox"> 设计并发布一个网站平台</li>
<li><input disabled="" type="checkbox"> 做一个电台节目</li>
<li><input disabled="" type="checkbox"> 去菲律宾读语言学校进修英语</li>
<li><input disabled="" type="checkbox"> 考个无人机驾驶证（极飞农业无人机操作员考试）</li>
</ul>
<p>先汇报一下：</p>
<p>之前构思了好多遍，要写一本关于 Linux 和物联网方面的书，于是在 Gitee 上用小号折腾了一年，还是没搞定！（希望在 2021 年 Q1 结束这场战斗）</p>
<p><img src="https://img-blog.csdnimg.cn/20201224181153379.png" alt="在这里插入图片描述"></p>
<p>不过倒是因为参与了《<a href="https://gitee.com/gitee-community/opensource-guide">开源指北</a>》的编写计划，算是共同协作出了一本电子书 (・-・*)</p>
<p>网站的话目前主要在维护两个，一个科技类的，一个人文类的。因为近期还要改版，所以暂时先不在这里公布了，等合适的时机再给大家宣传。</p>
<p>我自己喜欢听播客，所以老早就想我能不能做个电台节目给大家分享一下。但是由于懒… 内容定位也还没想好，所以迟迟没有落实下来，估计 2021 年也看不到了。不过因为参加硬禾学堂的 Funpack 活动，亲自出演拍了几个短视频，也算是在 <a href="https://www.bilibili.com/video/BV1RZ4y1V7AH">B 站</a> 出道了～</p>
<p>然后因为疫情嘛，本来计划找时间去菲律宾语言学校进修一下，也被推迟了，2021 年再看看情况。不过今年一直有坚持在开言英语 App 上练习，也把抖音 App 训练成了英语学习神器，可以看到世界各地的情况，还蛮有用的。</p>
<p>无人机驾驶证这个被忽略了，之前想玩这个是因为家里是山区，想看看能不能将无人机跟当地的农业结合起来，促进当地经济发展，目前这个计划还得再搁置一下。</p>
<p>（ ￣ー￣）</p>
<h3 id="工作回顾"><a href="#工作回顾" class="headerlink" title="工作回顾"></a>工作回顾</h3><p>好啦！给自己挖的坑汇报完了，接下来讲讲其他事。</p>
<p>先说工作吧，今年在公司维护几套老旧代码，改得也是没脾气，然后参与了基于 RK3399 的通信终端，整合了一套 Linux 系统，增加了软件包管理和升级功能，还把 RT-Thread 引入到公司产品中，然后终于在 2020 年最后一个月离职了。。。</p>
<p>因为各方面都遇到了瓶颈，也学不到新的东西了，对我来说这真是太可怕了。所以决定换个环境，给自己一个短 gap，希望未来的路走得更坚实。</p>
<img src="https://img-blog.csdnimg.cn/20201224181213523.png" alt="在这里插入图片描述" style="zoom:50%;" />


<p>另外，今年参加了两个比赛，一个是 <a href="https://huodong.21ic.com/rt-thread">RT-Thread 应用创新设计大赛</a>，基于国产 AT32 芯片做了个空气质量监测系统，拿了个三等奖；另一个是 <a href="https://www.bilibili.com/video/BV1XZ4y1K7aH">STM32 创客秀</a>，基于 STM32 NUCLEO 板做了几个节点，组成了一个分布式空气质量监测系统（<a href="http://www.fctc-air.cn/">fctc-air.cn</a>），拿了个二等奖。可以看到，两个参赛作品其实是基于不同硬件平台的同一套系统，所以业余时间参加两个比赛也可以应付过来。这个项目的初衷，是因为我本人对空气质量非常敏感，环境湿度太高、粉尘太多、二氧化碳浓度过高都会影响我的状态，所以我想做一个设备来实时监测环境中的空气质量，帮助我改善空气。后来觉得这个项目其实还是蛮有用的，就把它开源出来，搭建了后台服务器和微信小程序，希望可以变成一个民间的空气质量监测系统，帮助每一个了解当地的空气质量，提醒大家要保护环境。</p>
<img src="https://img-blog.csdnimg.cn/20201224181258322.png" alt="在这里插入图片描述" style="zoom:60%;" />


<h3 id="RT-Thread"><a href="#RT-Thread" class="headerlink" title="RT-Thread"></a>RT-Thread</h3><p>今年在 RT-Thread 社区留下了浓重的一笔，首先是因为参加比赛嘛，用的系统平台就是 RT-Thread。以前做产品是基于某个 release 版本来增加自己的业务代码，改完就作为公司内部的代码来管理了，并不会与 RT-Thread 社区有过多接触。但是作为个人项目，我想着开发者还是应该用 master 分支跟社区保持同步，也在这个过程中慢慢地把自己修改的 BSP、组件和软件包提交给 RT-Thread 社区。当然在这个过程中会遇到很多问题，所以为了更方便与 RT-Thread 开发团队沟通，五月份的时候我就申请加入了 RT-Thread 社区工作小组。</p>
<p>后来因为贡献值较高，受邀参加了九月份 RT-Thread 的团建，在三亚浪了几天，体验了一直心心念念的潜水运动。同时也认识了 RT-Thread 的创始团队（熊大、邱祎、aozima、Leo、龙哥）和许多优秀的 RT-Thread 小伙伴，近距离了解到 RT-Thread 的团队氛围、社区运营、商业模式和发展规划。还是挺让人激动的！</p>
<p><img src="https://img-blog.csdnimg.cn/20201224181321867.jpeg" alt="在这里插入图片描述"></p>
<p>十一月去上海参加 STM32 创客秀决赛，顺路去 RT-Thread 总部拜访了，跟龙哥、海靖聊了挺久的，学到很多东西。包括 RT-Thread 技术路线、行业发展方向、职业规划等等，这真是一个充满机遇与挑战的时代！我们要做的就是敢想敢干，保持前进！</p>
<p>2020 RT-Thread 年度开发者大会在深圳举行，我也受邀参加了，有幸跟各位大佬聚餐交流。和满老师、涛哥一起荣获 2020 RT-Thread 社区杰出贡献奖，非常开心～ 我知道社区里有许许多多优秀的开发者，也知道自己还有很多需要提升的地方，所以真的非常感谢社区伙伴的支持和 RT-Thread 团队的肯定。我会继续加油的，在为中国基础软件产业做贡献的同时提升自己，成就彼此。</p>
<p><img src="https://img-blog.csdnimg.cn/20201224181352861.jpeg" alt="在这里插入图片描述"></p>
<h3 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h3><p>这几年其实一直在寻找工作和生活之间的平衡，因为现在还没成家嘛，所以经常把工作和生活搅在一起，感觉每天都在工作学习的状态。跟家人团聚的时间蛮少的，也很少陪表弟表妹外甥侄女，成长阶段还是需要多点关心。所以还是蛮想让自己尽快成长起来，摆脱地理位置的约束，能够在发展事业的同时兼顾生活。</p>
<p>我的生活其实挺单调的，对我来说，打球、游泳、做家务就是休息。工作之余，其实我就是个体育迷，周末能看场球赛就很开心得不得了，不过有时候又觉得挺浪费时间的，毕竟自己已经离开体育圈了，还是要专注一点。不过今年学会了自由泳和棒球，也是很开心，以后有机会再慢慢解锁新运动技能吧。</p>
<p><img src="https://img-blog.csdnimg.cn/2020122418141990.jpeg" alt="在这里插入图片描述"></p>
<p>今年疫情对普通老百姓的冲击挺大的，吸取前几年投资失败的教训，今年自己开始好好学习理财知识。不管广告做得多好，或者亲戚朋友推荐，都不要乱投资，不懂不投，钱的事情还是要自己看紧一点。跳出理工科的思维，发现从经济的角度看这个世界其实是挺有趣，可以看到一个更真实的世界。</p>
<p>还有，值得一提的是十月份参加了为其八周的 GoGreen! 可持续生活创变营，还参加了地球妈妈工作坊。认识了很多新朋友，学习了很多 IT 圈里没有的东西，也看到了许多不同的生活方式。所以，我想一定会有一种生活方式适合我，能够释放创造力、创造社会价值的同时让自己和家人好好生活。嗯，我要多点尝试，多点走出去寻找。</p>
<p><img src="https://img-blog.csdnimg.cn/20201224181514425.jpg" alt="在这里插入图片描述"></p>
<blockquote>
<p>感觉 2020 年做了挺多事情的，但是总结起来又好像没做什么。。。还有很大进步空间！</p>
</blockquote>
<h2 id="明年还要做什么"><a href="#明年还要做什么" class="headerlink" title="明年还要做什么"></a>明年还要做什么</h2><h3 id="FCTC-Air"><a href="#FCTC-Air" class="headerlink" title="FCTC-Air"></a>FCTC-Air</h3><p>完善 <a href="https://github.com/luhuadong/fctc-air">FCTC-Air</a> 分布式空气质量监测系统。让它变成一个可以学习物联网相关技术知识，同时也能真正帮助大家关注空气质量的开源项目。</p>
<h3 id="开源"><a href="#开源" class="headerlink" title="开源"></a>开源</h3><p>今年参与编写《开源指北》其实也让我对开源软件有了更深入的理解，尤其是在充满变局的国际环境中，开源会给中国产业发展带来很大帮助。所以我也会继续关注开源项目，包括 RISC-V、RT-Thread 以及鸿蒙生态。另外，有一些之前使用过的开源项目停止维护了，感觉有点可惜，考虑接手过来维护。</p>
<h3 id="创客"><a href="#创客" class="headerlink" title="创客"></a>创客</h3><p>我真的很想成为一名真正的 Maker/Hacker，这将是我在技术道路上追求的目标，我希望自己很快能拥有将奇思妙想变成现实的能力。所以在 2021 年我还要加把劲，多折腾，补充数学、硬件、结构设计方面的短板，同时在嵌入式系统设计和物联网架构方面也要保持进步！</p>
<p>对了，2021年我要搭建一个创客空间，放飞自我。</p>
<h3 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h3><p>技术栈方面，2021年计划好好研究下 Rust 语言、数据分析和 AI 在端侧的实现。另外我会把过去工作、学习中的积累整理成一个技术类网站，作为个人总结，同时也分享给大家。具体是哪个网站我是不会告诉你们的 &lt;(ˉ^ˉ)&gt;</p>
<p>还有呀，之前囤了好多书还没来得及看，2021年安排一下，尽量写写读后感。</p>
<h3 id="领导力"><a href="#领导力" class="headerlink" title="领导力"></a>领导力</h3><p>当然啦，总不能一直沉浸在学习的海洋里，不能为了学习而学习，所以我还需要多关注现实需求，从解决问题出发，学习相关的技术并将其应用起来。所以如果我真的想解决一些问题，除了掌握技能，还需要提升我的 leadership，搭建团队，联合各方资源才能做更大的事业。希望在 2021 年能多做一些尝试，提升一下表达能力和领导力。</p>
<h3 id="健康"><a href="#健康" class="headerlink" title="健康"></a>健康</h3><p>由于以前运动训练不当，加上这些年当程序员的劳累，以及不良的生活习惯（熬夜、久坐等等），这些年除了掉发之外还是有些小毛病。希望 2021 年能够好好调整一下，坚持锻炼身体，做好康复训练。为社会、为祖国、为全人类再战 50 年！</p>
<h3 id="事业"><a href="#事业" class="headerlink" title="事业"></a>事业</h3><p>前几年和朋友尝试创业，多少是因为焦虑，因为年少无知。经过几年的沉淀，现在已经想通了，如果不能年轻有为，那就大器晚成呗！</p>
<p>当然肯定会保留创业的想法，但是不着急。可能是很多年以后，也可能是明年。但一定是因为我们特别想解决某个社会问题，而我们刚好能够解决。</p>
<p>因为我之前在环保 NGO 工作过，所以一直有关注环保圈的动态。今年因为疫情，其实很多 NGO 都过得很艰难，所以 2021 年我会尝试将自己懂的技能和掌握的资源跟环保结合起来，做些有意思的事情。</p>
<p>还有… 大概就是这样了，2021年见。</p>
<p><img src="https://img-blog.csdnimg.cn/20201224181625325.jpg" alt="在这里插入图片描述"></p>
<h2 id="寄语"><a href="#寄语" class="headerlink" title="寄语"></a>寄语</h2><p>去年的标题是——<strong>努力成为我认为我可以成为的人</strong>。虽然现在还没有达到我想要的状态，还没成为我想成为的人，但我会继续前进的！感谢过往许多失败的经历，因为它帮我鼓起勇气丢掉那些不必要的东西，不再伪装自己，成为真正的我，让我把所有精力放在对我来说最重要的事情上。如果我以前在其他地方成功了，那我就不会有这样的决心，你们也不会看到这篇文章。</p>
<p>谢谢您看到末尾！我们来呼应一下主题——<strong>一颗红心，两手准备</strong>。</p>
<p>无论成败，我都会保持热爱，热爱科学技术，热爱这个世界。我将投身到那真正属于我的领域，用双手创造价值。左手科技，右手人文；左手工作，右手生活。坚定信念，坚持学习，保持进步。新的一年，遇见更好的自己。</p>
<p><img src="https://img-blog.csdnimg.cn/20201224181648648.jpg" alt="在这里插入图片描述"></p>
<p>Never give up on what you really want to do. The person with big dreams is more powerful than the one with all the facts.</p>
<p>The future belongs to those who believe in the beauty of their dreams.</p>
]]></content>
      <categories>
        <category>journal</category>
      </categories>
      <tags>
        <tag>工作</tag>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>《开源指北》之我和开源的故事</title>
    <url>/journal/opensource-guide.html</url>
    <content><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20210129192536884.png" alt="在这里插入图片描述"></p>
<p><strong>【开源指北 1.0 发布】和你做过最酷的事，就是一起「写书」</strong></p>
<p>去年参加的《<a href="https://gitee.com/opensource-guide">开源指北</a>》编写计划最近正式发布啦！</p>
<p>我大概是最早加入该项目的非官方成员之一，因为我几乎每天都会登陆 Gitee 网站，在去年十月中旬就看到该项目的招募计划，然后就领取了第一章第一节的编写任务 —— <a href="https://gitee.com/gitee-community/opensource-guide/issues/I1TTMC">初识开源： 什么是开源？</a>，接下来两个月里又陆陆续续补充了其他章节的内容。（文章末尾看到「阿基米东」的就是啦~）</p>
<iframe src="//player.bilibili.com/player.html?aid=671252058&bvid=BV1pU4y147Fu&cid=288508137&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>

<p>可以说，如果不是因为开源，我是不会选择成为一名程序员的。</p>
<p>我接触计算机非常晚，高考之后家里才有了第一台电脑，也是那时候我才开始学习怎么上网、怎么下载、怎么搜索……（所以真的很羡慕现在的小朋友呢）。但也正是因为接触电脑太晚了，所以我没有时间玩游戏，也没有受 Windows 闭源思想和盗版软件的毒害。</p>
<p>大二接触 Linux 之后就被开源思想吸引了，开始了解自由软件运动和开源软件的发展史。甚至有一段时间成了 Richard Stallman 的狂热粉丝，捉住机会就给别人讲这段历史和我对自由的理解和追求，以及抛弃所有不自由的软件工具。</p>
<p>后来我发现这对我来说是不对的，不是不再认同 Richard Stallman 的理念，而是当下作为一个普通人，更多需要考虑的是如何在理想与现实中找到一个平衡点，让自己尽快成长起来。当你变得更强大了，你才能得到真正的自由，才能帮助别人也走向自由。</p>
<p>Richard Stallman 不仅是一名杰出的程序员，还是一名伟大的思想家。从这一角度来说，Richard Stallman 和我另一位偶像 —— Nikola Tesla 还挺像的。我当然也希望自己也能成为这样的人，只不过从实践的角度出发，我可能会更倾向于 Linus Torvalds 和 Thomas Edison 的做法。</p>
<iframe src="//player.bilibili.com/player.html?aid=76947870&bvid=BV1VJ411R7h2&cid=131611138&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>


<p>说回这个《开源指北》，是一个不错的项目！项目背景是在动荡的国际形势通过开源软件的方式增强中国基础软件的实力，因此在开源中国和开放原子基金会的支持下，以开源的形式编写一份给开源新手的保姆级开源百科，并以在线文档的形式对外开放阅读和持续迭代。</p>
<p>虽说我早已是自由和开源软件的忠实拥趸，但真的写书的时候才感到压力，于是我又重新阅读相关书籍和网络资料，希望写出来的东西是正确、严谨，并且有趣的。</p>
<p>说实话，教比学更难，也更有趣！我在这个过程中，学到了不少东西，比如加深了对开源软件概念、开源社区治理、组织架构、开源软件商业化的理解，也认识到了一些有趣的贡献者、扩充了知识面。更有趣的是，《开源指北》项目本身就是以这种形式在进行，还在上大学的时候，我就曾无数次想象用开源方式写书这件事情。我觉得教科书是最应该采用开源形式持续维护的，以集体贡献、公开的评审的方式决定教科书的内容，教给孩子们正确的知识、培养孩子们独立思考、合作分享的能力。</p>
<img src="https://img-blog.csdnimg.cn/20210129193115151.jpg" width="600" />


<p>前面说了，我接触电脑很晚，学习编程更晚。不过我觉得幸运的是，我接触电脑不久就进入了 Linux 的世界，学习编程不久就学会了 Git 魔法工具。最近5年，我已经将 Ubuntu 变成了我的主力系统，将 Git 相关工具变成的我的资料库，加上各种 SaaS 云服务，能帮助我在不断成长的同时保持轻装上阵，而不是处处受限。这也是我常常建议大家，无论是否是开发者，都应该了解开源软件和开源协作方式的原因。</p>
<p>世界上有两种知识，一种是你知道的，一种是你知道在哪里能找到的。在现代分工如此精细的社会框架下，许多时候我们都是站在前人的肩膀上前进，这时候你知道在哪里能找到你想要的东西的能力就变得很重要了！而这恰恰是 Linux 哲学和开源协作模式能给我们带来的。懂的人，将会变得越来越厉害。</p>
<p>希望这份保姆级的《<a href="https://gitee.com/opensource-guide">开源指北</a>》能带你进入一个新的世界！释放你的创造力~</p>
<img src="https://img-blog.csdnimg.cn/20210129193133537.jpeg" style="zoom:50%;" />
]]></content>
      <categories>
        <category>journal</category>
      </categories>
      <tags>
        <tag>开源</tag>
        <tag>写书</tag>
      </tags>
  </entry>
  <entry>
    <title>我与 RT-Thread 社区一起成长的故事</title>
    <url>/journal/2020-rtt-community-contribution-award.html</url>
    <content><![CDATA[<h2 id="成长故事"><a href="#成长故事" class="headerlink" title="成长故事"></a>成长故事</h2><p>Hello，大家好，我是 Rudy（<a href="https://github.com/luhuadong">卢华东</a>）。我刚拿了 2020 年 RT-Thread 社区杰出贡献奖，现在还沉浸在喜悦之中。</p>
<img src="https://img-blog.csdnimg.cn/20201222222649519.jpeg" width="400" />

<p>我在 CSDN 上的名字是「阿基米东」，因为我希望自己也能像那个举得起地球的巨人——阿基米德一样充满智慧。因为在 CSDN 上的简介写了“以前运动员，现在程序员”，所以有些小伙伴就问我咋回事？我高中的时候练长跑，拿过一些小奖，后来练过排球和橄榄球，大学在球队待过几年。后来因为伤病、成绩和对未来的规划等原因离开了，大三下学期开始好好学习计算机编程。因为读的是电气工程及其自动化专业，所以还是有点基础，而且信息化技术是长期存在，觉得应该在年轻的时候尽早加入，就这样进入了程序员行列。这几年在工业控制和通信领域摸爬滚打，业余关注物联网相关技术和行业发展。</p>
<p><img src="https://img-blog.csdnimg.cn/2020122222291729.JPG"></p>
<blockquote>
<p>2012 年参加大学腰旗橄榄球联赛（体育运动教会了我很多！）</p>
</blockquote>
<p>我在大二那年机缘巧合接触了 Linux 系统，开始学习各种命令，了解开源文化，觉得很有趣。发现很多软件都有开源的替代，不用再到处找破解版，慢慢就迷上 Linux 了。记得刚参加工作的时候，领导问我：“你知道 Git 吗？” 我说：“知道”（其实当时只知道 Git 是一个可以下载代码的命令行工具）。于是就给我分配了搭建团队内部 Git 服务器的任务。也是从那时候起，我开始学习 Git 的工作原理和协作流程，思考软件工程管理的问题。然后逐渐将个人项目挂在 GitHub 上，也逐渐明白了开源并非就是把代码挂出来那么简单。</p>
<p>之前听北航出版社的朋友讲了一些早年 RT-Thread 创业的故事，因为我自己前几年也和朋友一起业余开公司折腾过，知道创业的艰辛，尤其是以开源项目为创业方向。在还没有现成的商业模式的时候全职来干，一定会承受很多痛苦。所以我对 RT-Thread 团队充满了敬意，一方面是他们有着很高的技术水平，很有毅力、充满热情地坚持去做好 RT-Thread 操作系统，另一方面是看到 RT-Thread 生态越来越完善，在国内“刀耕火种”的开源环境下走出了自己的商业模式。</p>
<p>所以参与 RT-Thread 项目，一方面是因为我自己本身也是做嵌入式开发的，比较容易参与学习和贡献，应用到实际产品中；另一方面是想深入了解开源项目的日常运营和维护工作，从不同的视角看看 RT-Thread 这个优秀的开源项目，以及借此机会与更多技术大咖和行业前辈交流。</p>
<h2 id="社区贡献"><a href="#社区贡献" class="headerlink" title="社区贡献"></a>社区贡献</h2><p>2018 年美国总统特朗普开启了中美贸易战，我当时在一家军工企业工作，负责嵌入式系统平台的搭建，因此关注国产芯片和操作系统的发展，期望在产品中提高软硬件的国产化率。而 RT-Thread 是中国人自己写的嵌入式实时操作系统，可以说是国产开源 RTOS 的标杆，刚好有朋友给我转发了 RT-Thread 开发者沙龙的活动链接，于是就和 RT-Thread 社区勾搭上了。</p>
<p><img src="https://img-blog.csdnimg.cn/20201222223016545.jpeg"></p>
<blockquote>
<p>2018 年第一次参加 RT-Thread 开发者沙龙</p>
</blockquote>
<p>我们知道，RT-Thread 是一个优秀的开源项目，它不仅仅以 Apache 2.0 这样宽松的许可协议开放所有源代码，还提供了配套的技术文档、硬件平台和开发工具，同时还有一个可持续发展的开放性社区。对于个人开发者来说，我想这就是最吸引我们的地方。</p>
<p>有人可能会问，社区是什么？是指<a href="https://club.rt-thread.org/">论坛</a>吗？其实我理解的“社区”就是一个让人与人之间产生连接的地方，可以是网络论坛、邮件列表、GitHub、微信群、QQ 群等等，也可以是一场线下沙龙、比赛、工作坊，或者是一份文档资料、视频教程，以及一个基于 RT-Thread 的项目、软件包、学习小组、兴趣小组等等，都是 RT-Thread 社区的一部分。</p>
<p>我们对 RT-Thread 最直接的贡献就是在 <a href="https://github.com/RT-Thread/rt-thread">GitHub</a> 上面提交代码。比如我在开发个人项目的时候，发现我需要用的一些东西 RT-Thread 还没有或者该模块还可以再完善一下，于是我就自己动手修改并提交给 RT-Thread。像我今年贡献的代码包括 BSP、驱动框架、AT 组件和一些软件包等等，其实就是一个由产品需求驱动再反馈到 RT-Thread 社区的过程。</p>
<p><img src="https://img-blog.csdnimg.cn/20201222223109372.png"></p>
<p>除了贡献代码，我们分享技术文档、应用笔记，或者在论坛上提问或回答问题都是对社区的贡献。这两年在学习 RT-Thread 的过程中，我遇到问题都会先查阅 RT-Thread 的在线文档和论坛资料，结合代码进行分析调试，如果还没解决就会在论坛或群里请教大家。因为有多种咨询交流渠道，所以通常都能得到较好的回复。比如我之前的项目，在 Flash 文件系统存储和 OTA 升级方面，都得到了社区伙伴的支持，也在这个过程提升了个人技能。</p>
<p>当然社区生态的建设还有很长的路要走，目前大部分社区活动都是由 RT-Thread 团队驱动的，未来希望有更多自发的个人或组织来推动，形成更多不同主题的 RT-Thread 本地社区。比如在不同城市形成像蓝牙、LPWAN、机器人、AI 等 RT-Thread 创客社区，帮助开发者们一起交流学习、激发灵感，一起进步成长。</p>
<h2 id="技术展望"><a href="#技术展望" class="headerlink" title="技术展望"></a>技术展望</h2><p>近年来许多物联网产品落地，给了我们很大的想象空间。就我个人而言，RTOS 方面目前更关注虚拟化技术在嵌入式系统中的应用，以及低功耗设计和 AI 算法在端侧的实现。</p>
<p>另外，行业方向的话，从智能家居到智慧城市，其实物联网已经在我们周边了。这些物联网的应用为我们提供了更舒适、更方便、更安全的生活品质。但同时我也注意到，在消费需求和智能化不断增加的同时，许多人也越来越忙碌和焦虑了，对环境和资源的消耗也越来越多了。所以有时候我也会想：“我们到底需要什么样的智能设备？我们到底需要什么样的生活？”</p>
<p><img src="https://img-blog.csdnimg.cn/20201222223210910.jpg"></p>
<p>所以作为个人兴趣，我还是挺关注 IoT 技术在环保、能源、农业、海洋等领域的应用。业余时间也会尝试在这些领域做一些有趣的东西，大家有好玩的项目也可以找我一起玩。虽然这些领域的产品比不上智能家居带来的幸福感，但作为工程师，如果能用科技推动社会进步、促进社会公平，我觉得这是一件很酷的事情！这其实也是自由软件所追求的目标之一。</p>
<h2 id="开发者寄语"><a href="#开发者寄语" class="headerlink" title="开发者寄语"></a>开发者寄语</h2><p>爱因斯坦说过：“兴趣是最好的老师。” 我最开始想研究 RTOS，源于我对嵌入式设备的好奇，我想看看它们是怎么从零开始做出来的。因为每个人的成长经历不一样，关注的东西和研究方向也会不一样，所以大家从自己兴趣出发，结合学校或企业的项目，坚持钻研就行了。另外，多跟业界人士交流（论坛、GitHub 就可以）也有助于个人成长。</p>
<p>如果是比较迷茫的初学者，想往嵌入式或物联网方向发展。那么，马上加入 RT-Thread 社区开始学习准没错！RT-Thread 社区十余年的积累，稳定可靠的实时内核、完善的开发工具和软件包生态、众多开发文档和设计案例，以及在工业控制、智能表计、消费电子等领域的丰富应用，一定会给你意想不到的惊喜。</p>
<p><img src="https://img-blog.csdnimg.cn/20201222223243602.jpg"></p>
<p>最后，希望有越来越多伙伴加入 RT-Thread 社区，站在 RT-Thread 开源软件巨人的肩膀上，创造更大的价值，推动社区的发展，成就彼此。中国拥有强大的物联网产业链、市场和制造业群体，我相信 RT-Thread 很快就会成为世界级的 OS！</p>
]]></content>
      <categories>
        <category>journal</category>
      </categories>
      <tags>
        <tag>总结</tag>
        <tag>RT-Thread</tag>
      </tags>
  </entry>
  <entry>
    <title>分享两个决策方法WCCA和WADM</title>
    <url>/journal/two-decision-method-wcca-and-wadm.html</url>
    <content><![CDATA[<p>前几天，朋友给我推荐 MJ DeMarco 的<a href="https://union-click.jd.com/jdc?e=&p=AyIGZRprFQETAVQdXxMyVlgNRQQlW1dCFFlQCxxKQgFHREkdSVJKSQVJHFRXFk9FUlpGQUpLCVBaTFhbXQtWVmpSWRtYFAQTAVEdaxZ0Z2MSbT5zYHlHL0gaQ31ncyYfWVMOHjdUK1sUAxACVR9eFwQiN1Uca0NsEgZUGloUBxEFUStaJQIVBlYYWRcHFwZdE1olBRIOZUYfR1haUgVYCV0yIjdWK2slAiIEZVk1FFdGUwEdCxMHF1MFHlkRVhsHAR8IEwBFU1YSXhwFGwRlGVoUBhs=">《The Millionaire Fastlane》</a>，里面提到两个帮助我们更好地作出决策的方法，非常实用，分享给大家！</p>
<ul>
<li><strong>WCCA</strong>（最坏情况后果分析，Worst Case Consequence Analysis）</li>
<li><strong>WADM</strong>（加权平均决策矩阵，The Weighted Average Decision Matrix）</li>
</ul>
<p>相信大家在日常工作、学习、生活中常常面临选择，比如该选哪份工作？该去哪个城市发展？要不要复读？该选哪个专业？要不要买房？在哪里买房？要不要和这个人交往？等等…… 这些困扰我们的问题非常常见，我也在知乎上经常收到类似的问题。更重要的，决策具有蝴蝶效应，你当下所作出的决定会影响到后续的发展，糟糕的决定甚至一生都难以弥补。</p>
<p>因此，我们需要重视，如何更好地作出决策。如果你还没有自己的一套思维方法，那么 WCCA 和 WADM 分析法可以帮到你～</p>
<h3 id="WCCA"><a href="#WCCA" class="headerlink" title="WCCA"></a>WCCA</h3><p>WCCA 即“最坏情况后果分析”，需要你具备前瞻性的思维，并进行潜在的后果分析。在面临选择的时候，需要我们回答三个问题：</p>
<ol>
<li>这个选择最坏的后果是什么？</li>
<li>这种后果的概率是多少？</li>
<li>这是一个可以接受的风险吗？</li>
</ol>
<p>虽然这三个问题看起来有点冗长，但其实你的分析过程用不上几秒钟，你甚至不需要拿出纸和笔，仅凭大脑思考即可作出有意识的选择。当你习惯于用 WCCA 方法分析问题时，那些潜在的不良因素就会暴露无遗，负责任的你显然可以轻易地将坏的选项排除掉，选择更好的替代方案。</p>
<p>举个例子，你有一个很想买的东西，但是贼贵。就在你即将付款的时候，想起了 WCCA，于是你问了自己这三个问题，你的答案可能是：</p>
<ol>
<li>最坏结果是还不上花呗/信用卡；</li>
<li>概率是肯定会发生，因为上个月的还没还清；</li>
<li>风险有点大，要是利滚利肯定无法接受。</li>
</ol>
<p>所以你决定还是就此打住吧，先别买了。</p>
<p>你的答案也可能是这样：</p>
<ol>
<li>最坏的结果是效果不满意，浪费钱；</li>
<li>概率是10%，但是大部分人都说好；</li>
<li>风险可以接受，大不了节衣缩食一个月。</li>
</ol>
<p>所以你决定把它拿下，好好犒劳自己。</p>
<h3 id="WADM"><a href="#WADM" class="headerlink" title="WADM"></a>WADM</h3><p>与 WCCA 不同的是，WADM 需要坐下来慢慢算。WADM 即“加权平均决策矩阵”，分析步骤主要分为三步：</p>
<ol>
<li><p>列出需要考量的因素，并给每个因素设置权重；</p>
</li>
<li><p>依次给不同选项的对应因素打分；</p>
</li>
<li><p>加总不同选项的权重，选择总分高的那个。</p>
</li>
</ol>
<p>举个例子，你在找工作，面试了几个月，对其中两份比较满意，但是难下决断。这时候，你想起了 WADM，于是拿出纸和笔计算：</p>
<ol>
<li><p>列出最主要的考量因素，比如城市房价、当地气候、行业前景、薪资待遇、工作内容、工作环境、企业文化、发展空间等等，然后给每个考量因素设置权重。权重的设置可以按照分数打分（比如1-10分），也可以按照百分制设置不同的权重。</p>
<p> <img src="/images/static/WADM_demo_01.png"></p>
</li>
<li><p>然后分别给两份工作打分（这个分数和权重无关）。</p>
<p> <img src="/images/static/WADM_demo_02.png"></p>
</li>
<li><p>最后拿权重乘以每个选项的得分，并且加总算出总分。（可以用 Excel 或者 Numbers 里的 <code>SUMPRODUCT</code> 函数得出总分）。</p>
<p> <img src="/images/static/WADM_demo_03.png"></p>
</li>
</ol>
<p>由于工作 B 的总分更高，表明它更符合你的预期，所以你的最终选择也就不难了。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>简而言之，WCCA 是一个几秒钟就能解决选择困难的技巧，可以很方便地应用在日常生活中。它更适用于对突发事件的快速决策，比如当你面对诱惑时，可以帮助你规避风险。</p>
<p>而 WADM 则更适用于重大事件的决策分析，根据你的预期和承受范围，权衡分析，得出更优解。与 WCCA 不同，WADM 的使用频率较低，一年可能也用不了几次，但在关键时刻能够很好地帮你分析问题、作出决策。</p>
<p>使用 WADM 方法的难点在于需要你列出最主要的考量因素，根据你的情况设置权重，并为每个选项给出合理的分数。因此需要你对自己以及问题所处的情况有一个良好的认知，才能得出更客观的答案。</p>
<p>最后，想要灵活运用 WCCA 和 WADM 决策方法，还需要你在日常生活中多加训练，不断总结，形成一套适合自己的决策思维模型。加油哦！</p>
<br>

<img src="/images/static/我决定去上班.jpg" width=600 />]]></content>
      <categories>
        <category>journal</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
        <tag>思维</tag>
      </tags>
  </entry>
  <entry>
    <title>最危害程序员职业生涯的三大观念</title>
    <url>/coding/the-three-most-dangerous-concepts-of-career.html</url>
    <content><![CDATA[<p>蓦然回首自己做软件开发这个行业已经十年了，这十年中我获得了很多，技术能力、培训、出国、大公司的经历，还有很多很好的朋友。但再仔细一想，这十年中我至少浪费了五年时间，这五年可以足够让自己成长为一个优秀的程序员，可惜我错过了，我用这五年时间和很多程序员一样在困惑和迷茫中找不到出路！</p>
<p>路其实一直都在那里，只是我们看不到而已！</p>
<p><img src="https://img-blog.csdnimg.cn/20200323184559651.jpg" alt="在这里插入图片描述"></p>
<p>以前我一直被公司和技术牵着走，并不是自己在选择技术，而是不自觉地被推到了这个位置上。想想有多少人对于自己将来要从事的职业和技术类型进行过深入思考和比较呢？当我跳出编码后，我开始思考和程序及程序员职业生涯相关的问题，最后发现，影响我们走入今天的困局的竟然是一些我们常常挂在嘴边的话（观念）。今天，就为大家指出这几个重要的可能是你已经习以为常的观念，希望大家深入的思考一下这些观念对你的危害。如果你还年轻，刚从事软件开发这行没多久，也希望指出这些问题能让你跳过一些误区，不要像我一样多浪费五年时间。</p>
<h2 id="观念一：-“别管我，我只想一个人安静地写代码！”"><a href="#观念一：-“别管我，我只想一个人安静地写代码！”" class="headerlink" title="观念一： “别管我，我只想一个人安静地写代码！”"></a>观念一： “别管我，我只想一个人安静地写代码！”</h2><p>是不是每天想安安静静地写代码时，IM 窗口或者 Email 总会不合时宜地弹出各种提示，一会要开会啦一会要讨论需求了，再一会测试又来和你理论 Bug 了。世界这么喧嚣，还让不让人安静地写代码了？“别管我，我只想一个人安静地写代码”，这句话道出了多少程序员的心声啊，我们都想“静静”！不过今天我要告诉你，这种想法是多么的错误，并且严重影响了你职来生涯的发展。</p>
<p>如果你觉得自己的工作就是写写代码，那你最好三思。在软件开领域，我们大多数时候是与人而不是与计算机打交道。我们所写的代码首先是供人使用的，其次才是让计算机可以理解的，如果你只想和机器打交道，那写二进制的代码机器才能理解你。仔细想想自己一天的工作中有多少时间用在了与人互动上，收发邮件、会议、讨论（扯皮）等等，作为一个软件开发人员，你的工作就是与人打交道（其实几乎所有的职业都是这样）。</p>
<p>所以，虽然你是一个码代码的码农，看似你工作的重心是在码代码上，但其实你自己统计一下也会发现：你真正写代码的时间占你工作时间的比例并不高甚至有些人非常低。即使没有人打扰你，你仍然需要花很多的时间去设计（思考）怎么写你的代码，或者花很长的时间去看懂别人的代码然后找到 Bug 产生的原理，这个过程中看似你面对的是代码是机器，但其实你面对的是人（写代码的人和读你代码的人）。这还没有谈论怎么把业务的需求变成代码，你仍然需要了解一定的业务知识，当然最好的方式是先和业务、需求设计人员进行沟通，而不是闷头写代码。</p>
<p>所以认为做程序员可以不讲究沟通和谈话技巧，可以恰当地掩饰自己这方面的不足，那么你就太错特错了。如果你是因为自己与人交流的能力不足而觉得程序员是一个很合适的职业的话，那么你很难成为一个优秀的程序员。正如前面所说的一样，程序员写的代码仍然是需要和人交流的，如果只是一味的逃避自己不足的地方，写某方面代码的能力有可能可以大幅提高，但软件设计和开发的能力并不会轻易地提高。最后的软件开发，除了需要你有专业知识并懂得业务外，更重要的是需要你能和相互关系的系统和人进行有效的沟通。</p>
<p>所以，对程序员来说人际交往能力远比你想象的要重要！学会如何与人打交道，是你通向优秀程序员的第一步。</p>
<h2 id="观念二：“这不关我的事！”"><a href="#观念二：“这不关我的事！”" class="headerlink" title="观念二：“这不关我的事！”"></a>观念二：“这不关我的事！”</h2><p>常常在工作中听到程序员在抱怨“测试又来找我了”、“需求又来找我了”，“客户又来找我了”等等，这些事都和自己的编码没有直接的关系，咋一看从职能分功上确实不关程序员的事。然而，这也是一个很严重的错误观念，它让你损失了很多成长的机会，而且也是你工作几年后走入程序员困境的主要原因。</p>
<p>大多数程序员（当然包括笔者）从职业生涯一开始就犯了几个严重的错误。截至目前，<strong>最大的错识就是没有把自己的软件开发事业当作一桩生意来看待</strong>。当你为了谋生一头扎进写代码的世界时，其实你和在建筑工地上搬砖的民工并没有多大的区别。</p>
<p>你职业生涯中必须要做的第一要务：转变你的心态，从被一纸“卖身契”束缚住的仆人转变为一各拥有自己生意的商人。你需要学会像企业一样思考，思考一下“作为一个企业我能提供什么”，就会对你如何考量自己的职业生涯有深远的影响。企业需要持续不断地改进和完善自己的产品，你也应该这样做，你的产品就是你的编程技能和服务。换到这个角度后，你就不会再抱怨工作中总被很多莫名其妙的人和事打扰，因为那些事都和你息息相关，或者都和你的生意有关联。积极地承担责任，至少能让你建立起良好的个人品牌，最终你会发现这个品牌的价值比公司给你开的高工资有用得多！</p>
<p>而且处理一些你看似不相关的事情，也会让你得到某方面的锻炼，这些事情中也可能就有某些行业的痛点问题，如果你解决了，其实一个产品原型就出来了。虽然你的时间被打扰了，但获得的技能和生意却是自己的。</p>
<p>记住：你工作的公司、客户和同事都有可能是你的生意。</p>
<h2 id="观念三：“等我有钱了，我就XXX”"><a href="#观念三：“等我有钱了，我就XXX”" class="headerlink" title="观念三：“等我有钱了，我就XXX”"></a>观念三：“等我有钱了，我就XXX”</h2><p>“等我有钱了，我就顾几个越南程序员帮我写无聊的代码”，“等我有钱了，我就天天吃食堂的自助餐”等等，这类台词在公司里经常能听到吧，不过一般这样说的人都不会有钱的，或者说很难等到他有钱时。也许看到这里你会产生一些困惑，这个有没有钱和我们做程序员有什么关系呢？</p>
<p>好，请复习一下观念二！</p>
<p>财务问题是程序员群体不善处理的一大问题！其实不单是程序员群体，整个大学教育培养出来的学生一般都不具备正确的财务知识和观念。钱不是万能的，但有钱却能解决很多问题，“人穷志短”实在是太精辟了。<strong>当你没有钱的时候，你会看重很多你不应该看重的东西</strong>，很多东西你可以用钱买来（比如技术和别人的经历）但你不愿意，因为你手上钱不多所以要省省是吧。结果你只能花自己的时间去琢磨，而等你琢磨透时商机已去！</p>
<blockquote>
<p>有句话叫：能用钱买来的就是捡便宜！</p>
</blockquote>
<p>而且因为没有钱你会更看重钱，最终会为了某个公司一个月多给你几千块的涨薪就跳槽，而忽视了去比较真正对你未来有帮助的成长机会！</p>
<p>财务自由是很多程序员非常向往的一个目标，就是我们说的“有钱了”的状态，但如果你真正问一个人什么是财务自由，多少钱才够财务自由？可能很多人都回答不上来，而且对于钱的量级每个人的答案也可能不一样。</p>
<blockquote>
<p>我比较赞成的财务自由的解释是：所谓的财务自由，指的是某人再也不用为了满足生活必需而出售自己的时间了。</p>
</blockquote>
<p>最终我们会发现，财务自由并不是我们努力工作的终极目标，而是我们成长过程的一个重要的里程碑！最终你把财务自由看淡，并看到它身后更远的东西，你才真正有可能实现财务自由。</p>
<p>所以，不要等，而是要不停的成长，包括技术和为人处事等等各方面。只要你在不停的成长，你就会一直在为自己积累很多东西（技术、人脉资源等），等这些东西达到一定量级你自然会“有钱了”！</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>除了一些高精尖的技术问题，我们一般开发遇到的技术问题其实最终都不是我们成功的关键，而且技术是会更新迭代或是交替的，代码之外的软技能才是我们成长为一个熟练工之后应该着重考虑的。但一些你认为（别人也都这样认为）正确的关念，其实一直影响你并最终把你变成和大多数人一样碌碌无为。每个人的性格和所处环境不同，我们没有必要要求所有人都一样，但如果你想改变或者觉得目前的状态很困惑，不妨思考一下哪些观念是有问题的，是时候来升级一下你的操作系统（你的大脑）了！</p>
<p>我们再总结一下这三大错误观念：</p>
<ul>
<li>认为程序员的主要工作不需要和人交流，不重视人际交往能力；</li>
<li>认为和写代码不相关的事都不是自己的责任，没有把工作当成自己的生意来对待；</li>
<li>认为有钱是终极目标，只重薪水不重成长；</li>
</ul>
<p>如果你能意识到他们是错误的，并且对自己的职业生涯有极大的危害，那么这篇文章的作用也就达到了，至于如何解决这些观念带来的问题，需要你自己去践行了！</p>
<p>套用发哥的广告词与大家共勉：“成功？我才刚上路咧！”</p>
]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>程序员</tag>
        <tag>职场</tag>
      </tags>
  </entry>
  <entry>
    <title>大龄码农是如何把自己逼死的</title>
    <url>/coding/dont-kill-self-career.html</url>
    <content><![CDATA[<h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><p>小C由于学习成绩不好，高中毕业没有考上大学，找了一份业务员的工作匆匆开始了职业生涯。混了两年，业绩一直上不去，在家人的建议下，去了一家高职学习物流管理。两年后，小C顺利毕业，在当地一家物流公司当叉车司机。几个月后，小C觉得这份工作太苦太累、收入低，平时喜欢玩网游的他听说做游戏很赚钱，所以暗下决心要转行。很快，小C辞职了，并说服家人让他到一家培训机构学习游戏开发。本来计划的学习时间是一年，但小C的基础不扎实，没能通过考核，经过沟通，培训机构同意让小C免费再学一年。很快一年又过去了，由于小C缺少练习和思考，虽然勉强通过考核，但仍然找不到他想象中的游戏开发工作。几个月后，在培训老师的推荐下，去了一家小公司做 APP 开发。由于是小公司，而且大多是外包业务，工作节奏快，小C屡次不能按时完成任务，并且在一次会议上和上司吵架了。于是，小C被解雇了，得重新找工作，但过了半年还是屡屡碰壁。后来迫不得已，在家人的推荐下，去了一家餐厅上班。现在已经在那里工作两年了，做过服务员，也做过帮厨。最近开了分店，老板决定让他当个轮岗店长，所以小C特意请我吃饭庆祝一下。我问小C：“现在还想做游戏开发吗”？小C笑了一下说：“早就不想了，不过游戏还得玩”！</p>
<p>小C是我的小学同学，小时候他比我聪明多了，兵乓球也打得好，但是他已经好久没有打过乒乓球了。小C说做餐饮要起早摸黑、忙里忙外的，每天下班就已经很累了，再玩两局游戏就差不多要睡觉了，没时间做别的事情了，当然也没有对象啦。唉，这种状态也不知道什么时候才到头？</p>
<p>写到这里，小C离高中毕业已经八年时间了，但断断续续的状态，以及行业的转换，使得他所积累的工作经验大打折扣。</p>
<p>说这个故事的目的是为了引出核心观点：<strong>工作经历 ≠ 工作经验</strong>。“经历” 需要经过总结、归纳和升华，才能有效转化为 “经验”。</p>
<hr>
<p>结合工作中的一些见闻，我整理了下面几点，看看大龄码农是如何一步步把自己逼死的。</p>
<h2 id="空窗期变成空白期"><a href="#空窗期变成空白期" class="headerlink" title="空窗期变成空白期"></a>空窗期变成空白期</h2><p>由于各种原因，很多程序员难免会频繁跳槽。比如由于加班太多想放空自己，于是辞职去旅游个大半年。又比如公司效益不好，被解雇了。不管是什么原因，你不应该让空窗期变成空白期！</p>
<p>你可以出去旅游，长长见识，收获一堆风土人情；你可以出去创业，辛勤付出，收获拼搏奋斗的失败经验；你可以返校读书，回炉再造，培养另一种能力；你也可以躲起来，磨刀霍霍，为下一份工作做准备。</p>
<p>但是如果处于空窗期的你无所事事，没有计划，没有安排，每天玩游戏，玩到累了就睡觉。你很难期望天上会掉一个比之前更好的馅饼下来。也许很多事情无能为力，但是做总比不做好。</p>
<h2 id="控制不了自己的情绪"><a href="#控制不了自己的情绪" class="headerlink" title="控制不了自己的情绪"></a>控制不了自己的情绪</h2><p>很多程序员是闷骚、大男人主义的直男，大大咧咧、不修边幅，不仅不注重外在，也不注重内在修养。作为一名程序员，保持情绪稳定很重要，你要学会与同事、上司、产品经理、项目经理、甲方、乙方沟通。如果你还想在这家公司待着，千万不要和你的同事、上司吵架，因为你们需要长期合作，你们见面的时间比家人还多。</p>
<p>有些程序员不注重表达，常常祸从口出，不和谐的关系往往会导致项目失败，导致不能升职加薪，甚至被辞退。所以要做情绪的主人，从根本上解决问题。</p>
<h2 id="遇到问题到处喊救命"><a href="#遇到问题到处喊救命" class="headerlink" title="遇到问题到处喊救命"></a>遇到问题到处喊救命</h2><p>有些程序员，一旦出现问题，比如程序编译不通过、运行时出错了、挂了。第一反应就是找人帮忙，甚至很多时候他们连打印信息和日志都没仔细看过，有良心一点的程序员可能会调试一下再寻求帮助。他们也许会直接把问题发在内部系统或者交给测试部门，也许会拷贝一大串代码和信息发到各个技术交流群，期望高手给他指点一条明路，帮他解决这个问题。</p>
<p>长期以来，懒惰和依赖一定会使自己的技术水平提升很慢，甚至倒退。所以要感恩每一次遇到的 Bug，学会独立思考，培养独立分析问题、解决问题的能力。在你把问题的来龙去脉整理清楚的过程中，自然就会获得经验。而不是一而再再而三地问别人。</p>
<p>当然，解决问题的办法有很多种，寻求高手指点有时候确实能快速解决问题。但遇到没见过的问题，你应该尽可能自己摸索一遍，即便高手已经帮你解决掉了，否则很快你就会发现你已经沦落为一个执行者，而不是创造者了。</p>
<p>所以遇到问题就要绞尽脑汁地思考、充分利用搜索引擎、查阅资料、尝试调试，如果问题依然没有解决，应该整理好思路和调试流程，再简明扼要、恰到好处地向高手提问，向技术交流群提问。</p>
<h2 id="拒绝与工作无关的知识"><a href="#拒绝与工作无关的知识" class="headerlink" title="拒绝与工作无关的知识"></a>拒绝与工作无关的知识</h2><p>很多程序员，与他目前工作没有关系的知识毫不关心，说好听点是 “专注”，说不好听是 “固执”。比如让他搞个 Android App，他很快给你写完了业务逻辑代码，但是界面丑得不堪入目，他说他是程序员只负责写代码，界面美不美观跟他没关系。比如有个搞单片机开发的程序员，你给他讲 Linux，他就会找各种理由避而远之，说 “我的工作不涉及这个，为什么要学？</p>
<p>如果你是生活在上世纪的程序员，这种作风可能还行得通，但是在21世纪就不行了。你如果还是 “事不关己高高挂起”，就难以在扩宽知识的广度，每天盯着自己的几行代码，慢慢地变成井底之蛙。</p>
<p>所以我提倡大家做个斜杠青年，做个专注的 T 型人才。有特定领域的深度，也有方方面面的广度。你的工作可能只要求你写 Linux 的 Qt 应用，但如果你弄清 Linux 系统层面的知识，拥有 Web 前后端的知识，你一定会开发出更酷的软件。</p>
<p>同时，不要忘了要学会感受生命的美好，热爱生活。培养一两个爱好，并坚持下去，扩宽交际圈子，不要老和程序员抬杠。如果不这样的话，等你明白过来你一定会很痛苦。</p>
<h2 id="日复一日地重复工作"><a href="#日复一日地重复工作" class="headerlink" title="日复一日地重复工作"></a>日复一日地重复工作</h2><p>一个工程师，第一天上班的任务就是做开关检测，接触了各种各样的开关，一弄就好几年，成为了公司里唯一的 “开关专家”。这个过程中，他会写一些简单的单片机程序测试，但一直没有在系统层面深入研究。于是，成功地做了一颗兢兢业业的螺丝钉，而且只钉一种木头。</p>
<p>你不是20年工作经验，而是1年工作经验反复用了20年。</p>
<p>这样的话，大龄码农不具备足够的竞争力，很可能就会被一个2年工作经验的年轻人替代掉了。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>编程能力很重要，但更重要的是持续学习能力和职场软实力！</strong></p>
<p>看不懂这些，大龄码农只能怀才不遇，抱怨领导、抱怨社会，最终伤害的是自己和家人。</p>
]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>程序员</tag>
        <tag>职场</tag>
      </tags>
  </entry>
  <entry>
    <title>2017清远冬令发放环保心得分享</title>
    <url>/journal/2017-tzuchi-qingyuan.html</url>
    <content><![CDATA[<p>2018年1月14日，清远龙颈</p>
<p>这是我第一次参加慈济的冬令发放活动，从活动的筹备、发放过程、节目安排、素食午餐等细节中都可以感受到慈济人的用心，付出无所求。虽然披星戴月，但累并快乐着，温暖他人的同时也在温暖自己。</p>
<p>在下午的爱洒茶会，学习了很多有趣的手语舞蹈，还有学伟师兄很棒的环保演讲，之后我也被师姐邀请上去分享环保心得了，即兴乱说了一通，但是师兄师姐们说我讲得挺好的（感谢大家的鼓励），于是整理成文字，在这里分享一下吧~</p>
<hr>
<p>很高兴能有机会与慈济的师兄师姐们结缘，参与这次2017清远冬令发放活动。首先，因为我本身也是清远人，所以我在这里要先感谢慈济，感谢各位师兄师姐的付出，感恩！</p>
<p>前面学伟师兄分享的环保知识很棒，有像“瓶瓶罐罐纸电衣三五七”这样的垃圾分类十字口诀，也有很多像“要想环境好，出门带五宝”这样的环保口令，一下子把垃圾这个严肃的话题变得活泼起来。</p>
<p>那我也借此机会谈一下环保。</p>
<p>在过去很长一段时间里，我对垃圾问题深恶痛绝，一开始我把矛头指向垃圾分类，认为垃圾分类太复杂、回收流程不完善、处理技术落后，以及民众素质有待提高。但是，当我身体力行地去做的时候，我发现我错了，垃圾分类其实并没有我想象的那么复杂，很多时候也不需要多么高端的技术去处理。经过一段时间之后，我回过头来想，突然发现原来做垃圾分类、做环保不仅是净化环境的过程，更是一个净化心灵的过程。</p>
<p>下面我想分享一些学伟师兄刚刚没有提到的话题，首先是食品安全问题。那食品安全跟环保有什么关系呢？</p>
<p>我们中午品尝到慈济的素食午餐，真的非常棒，非常好吃，我目前也在进行素食的尝试。</p>
<p>我们经常说要维护生态平衡，据不完全统计，目前地球上人类、野生动物、畜牧业动物的重量是1:3:7，所以我认为人类的发展早已打破了这种生态平衡。人们日常生活所食用的肉类来自于畜牧业、养殖业，而这种集中化养殖除了影响生态平衡之外，还会带来一些问题。首先，从怜悯动物的角度来看，把充满灵性的动物圈养起来，并当成商品来对待就显得不那么人道；然后，集中化养殖的过程中会使用大量激素和抗生素，这些东西会通过食物链最终进入人类的身体，从而增加患病的几率；另外，养殖业所产生的温室气体也是惊人的，据国际粮农组织统计，传统畜禽养殖产生的温室气体占全球温室气体排放总量的18%，超过全球交通运输业。为什么这么夸张呢？其中一个比较搞笑但不容忽视的原因是，动物在消化过程中通过打嗝、放屁等行为会排放大量的甲烷等温室气体，而甲烷所造成的温室效应远大于二氧化碳。因此有人说，一个骑单车的肉食主义者的碳排放量比一个开汽车的素食主义者要多。所以多吃蔬食也是一种环保行为哦！</p>
<p>还有令人头疼的塑料问题，我认为塑料是一种很好的材料，它有很好的可塑性、防水、可以变得很坚硬、也可以变得有弹性。显然，我们的日常生活已经离不开塑料了，但我们却总是如此粗暴地对待这种珍贵的资源，把它当成廉价的、一次性的、可丢弃的东西。我认为所有一次性塑料制品的设计都是不合理的。</p>
<p>比方说外卖餐盒，以前是不可降解的，被称为“白色污染”，现在换了个说法，称为“可降解”餐盒。但是很多人不知道，所谓的“可降解”是有条件的，比如对温度、湿度、压力、酸碱度等条件有严苛要求，而这种环境在自然界中几乎找不到。即便是标榜“可降解”秸秆、玉米淀粉制品，也是在特定堆肥条件下才可以降解的，如果达不到这样的条件，跟普通塑料制品无异。所以，“可降解”并不意味着我们可以随意使用，减少一次性制品的使用才是王道。</p>
<p>另外塑料种类繁多、成分复杂，比如PE、PC、PP、PS等等，为了增强可塑性、增加色彩、透明度、硬度等特性，往往还会加入很多诸如塑化剂等成分。其中为了使塑料变得透明、耐用、轻巧，通常会添加一种叫双酚A的成分，而这种成分在高温（比如消毒、灌入沸水、微波炉加热）情况下会析出并溶于水中，如果遇到油、酸等溶液则会更容易析出。而双酚A是一种类雌激素，即使很低的剂量也会影响动物发育和生殖，研究发现儿童体内的双酚A含量是成年人的2倍。所以我们作为消费者，在购买日常用品（比如“出门三宝”）的时候，也要注意尽量少选择塑料制品。</p>
<p>然而，对于塑料这个话题，更可怕的还在后面。经过几十年、上百年，有些塑料确实不见了，因为它们经过日晒雨淋之后变成塑料碎片，甚至是塑料微粒。同时很多洗护用品出于廉价和便于大量生产等原因，会加入一种称为“柔珠”的物质，“柔珠”实际上就是塑料，其作用是对皮肤进行磨砂、去角质，另外大量的化纤衣服在洗涤的过程中也会使塑料纤维进入城市水系统，最终进入大海。这种肉眼难以察觉的微塑料污染范围广、影响大，不仅对海洋生物的生存环境造成影响，同时塑料微粒容易吸附毒素，最终也会通过食物链进入我们的餐桌。微塑料作为海洋环境中的一种新型污染物，它的严重性和危害性还并未被许多人知晓，但这种危害已经在我们身边了，因为据美国公益组织Orb Media调查，全球超过83%的自来水被检测出微塑料。</p>
<p>最后总结一下，前面说了这么多，其实我想表达的是：无论从生态环境还是自身健康来看，环保都是值得我们亲身践行的。同时，环保有很多方式，有的甚至简单到我们无法相信，比如“出门带五宝”居然可以减少那么多垃圾，比如多吃素食，比如理性消费等等。</p>
<p>不以善小而不为，我希望未来能有更多的人把环保当成一种生活习惯，把环保当成一种时尚，谢谢大家！感恩！</p>
]]></content>
      <categories>
        <category>journal</category>
      </categories>
      <tags>
        <tag>环保</tag>
        <tag>慈济</tag>
      </tags>
  </entry>
  <entry>
    <title>《旅行青蛙》其实在讲环保故事</title>
    <url>/zerowaste/travel-frog-eco-life.html</url>
    <content><![CDATA[<p>文章首发于微信公众号「<a href="http://mp.weixin.qq.com/s?__biz=MzAxNjcyNDU1OQ==&mid=2649507319&idx=1&sn=b626098b7d23b4dfb1dffe65ab677680&chksm=83e882d7b49f0bc14b50f13f0e6c9a6ab204dec491eff783beae8bb5bcfe7804947a02987dbc#rd">环保R先生</a>」</p>
<hr>
<p>最近一款名为《旅行青蛙》（旅かえる）的日本手游走红中国，连刀塔、农药都没玩过的R先生也走上了养蛙的道路。吸引R先生的，除了那只追求诗和远方的蛙，还有每个场景里所讲述的环保故事，这简直是一只热爱生活、热爱自然、热爱和平的零废弃好蛙！</p>
<p>What？你不相信它是只环保的蛙？跟着R先生的步伐看一下吧~</p>
<h2 id="零垃圾生活"><a href="#零垃圾生活" class="headerlink" title="零垃圾生活"></a>零垃圾生活</h2><p>自带小花园独栋双层 Loft 全景图</p>
<p><img src="../images/zerowaste/travel-frog-01.webp"></p>
<p>趁蛙儿在家吃饭，我们采访一下它。看看它是怎么做到零垃圾生活的~</p>
<p><img src="../images/zerowaste/travel-frog-02.webp"></p>
<p>采用原始的草木石装修风格，装修材料都是捡来的。作为一只单身蛙，在家具方面坚持够用就好的原则，简约的装修足以满足单身蛙的日常所需。</p>
<p>吃吃吃是人生一大乐事，难免会产生厨余垃圾，所以我在家准备了两个堆肥箱交替使用。</p>
<blockquote>
<p>门前三叶草，堆肥少不了！</p>
</blockquote>
<p>现在知道为什么三叶草长得那么快了吧。</p>
<p>每次旅行回来总会带些蔬菜水果，这些瓜果皮可以用来制作环保酵素。环保酵素有很好的的清洁功效，酵渣还可以用来堆肥。</p>
<p>旅行途中也会捡些无患子回来，给麻麻做无患子皂液，加上合理利用醋和小苏打，就不用去超市买日化用品了。</p>
<p>每次出门旅行前，都要准备好出门五宝（环保杯、环保筷、环保碗、手帕、环保袋）。</p>
<p>因为麻麻说过：</p>
<blockquote>
<p>要想环境好，出门带五宝；</p>
<p>带上环保碗，爱地球不晚。</p>
</blockquote>
<p>自从爱上零垃圾，每当在家的时候都会研读大量书籍。比如：环境保护、固废处理、Zero Waste、木工技术、草木染技术、堆肥技术、可循环生态、自然生物化学互联网等等。还要用大象便便纸来做笔记，这样就能更好地实践零垃圾生活了。</p>
<p><img src="../images/zerowaste/travel-frog-03.webp"></p>
<h2 id="Upcycle小能手"><a href="#Upcycle小能手" class="headerlink" title="Upcycle小能手"></a>Upcycle小能手</h2><p>作为一个upcycle小能手（蛙），地毯也是用旅途中捡的塑料袋编制而成的。其实很多所谓的垃圾并不需要扔到垃圾桶，它们都是很好的手工材料。</p>
<p>upcycling design 蛮有挑战的，因为做出来的手工产品质量要好，不然就很容易沦为二次垃圾。</p>
<p><img src="../images/zerowaste/travel-frog-04.webp"></p>
<h2 id="牢记七个R"><a href="#牢记七个R" class="headerlink" title="牢记七个R"></a>牢记七个R</h2><p>报告！现在举国上下都在推行垃圾分类，你身为一只环保的蛙，家里居然没有垃圾桶，怎么做垃圾分类？</p>
<p>其实只要牢记以下七个R，就可以像我一样做到零废弃了。既然零废弃，那当然就不需要垃圾桶了~</p>
<img src="../images/zerowaste/travel-frog-05.webp" style="zoom:50%;" />

<ul>
<li><strong>Rethink</strong>：作为生产者、设计者，要时刻反思和再三考虑，在建造或制造东西的时候，应该先问问自己有没有更好的方案，避免使用一次性塑料等不友好的材料。</li>
<li><strong>Refuse</strong>：拒绝不环保的东西，拒绝你不需要的东西（比如拿了之后就丢一边的赠品），对一次性制品说“不”。</li>
<li><strong>Reduce</strong>：只买需要的，不买想要的。选择质量好的东西，尽量少买少用不环保的东西，比如带不可回收塑料包装的商品。</li>
<li><strong>Reuse</strong>：重复利用，物尽其用，让闲置物品再次利用。</li>
<li><strong>Repair</strong>：新三年，旧三年，缝缝补补又三年。如果物品坏了，应该先尝试修理而非丢弃。</li>
<li><strong>Recycle</strong>：那些不能再用的可回收物应该回收利用、循环再生，让它们重新变成新的材料或产品。</li>
<li><strong>Rot</strong>：厨余垃圾应该堆肥处理。</li>
</ul>
<p>这也是R先生一直强调的：<strong>清净在源头</strong>！环保不仅是净化环境的过程，更是净化心灵的过程。只有从源头减少垃圾产生量，才能从根本上解决垃圾污染的问题。</p>
<p>当然了，如今的社会就像一个庞大的机器，短时间内难以实现大规模的源头减量，所以做好垃圾分类也是很关键的。</p>
<h2 id="爱吃素的蛙"><a href="#爱吃素的蛙" class="headerlink" title="爱吃素的蛙"></a>爱吃素的蛙</h2><p>What？你是只吃素的蛙？居然还这么胖萌？</p>
<p>拜托！素食不是只有蔬菜沙拉，而且我追求的是绿色和平饮食和营养均衡的蔬食，你看麻麻给我准备的食物~</p>
<p><img src="../images/zerowaste/travel-frog-06.webp"></p>
<blockquote>
<p>野葡萄司康</p>
</blockquote>
<p><img src="../images/zerowaste/travel-frog-07.webp"></p>
<blockquote>
<p>巨石三明治</p>
</blockquote>
<p><img src="../images/zerowaste/travel-frog-08.webp"></p>
<blockquote>
<p>南瓜百吉饼</p>
</blockquote>
<p><img src="../images/zerowaste/travel-frog-09.webp"></p>
<blockquote>
<p>乳蛋饼（奶酪）</p>
</blockquote>
<p><img src="../images/zerowaste/travel-frog-10.webp"></p>
<blockquote>
<p>艾蒿小麦饼</p>
</blockquote>
<p><img src="../images/zerowaste/travel-frog-11.webp"></p>
<blockquote>
<p>辣葱饼</p>
</blockquote>
<h2 id="保护大自然"><a href="#保护大自然" class="headerlink" title="保护大自然"></a>保护大自然</h2><p>很多人都羡慕我说走就走的旅行，但他们没发现，其实我在做 LNT。</p>
<p>LNT 就是 “Leave No Trace”，大家都以为我是无业游蛙，其实我是一名自然体验师。在旅途中，我会关注自然环境，我会给小伙伴做环境教育，以降低人为活动对自然的冲击，所以每次旅行我也会捡一些东西回来。</p>
<p>为什么要保护大自然？—— 因为：</p>
<iframe src="//player.bilibili.com/player.html?aid=2969974&bvid=BV1ds411178i&cid=4651710&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>

<h2 id="心得感想"><a href="#心得感想" class="headerlink" title="心得感想"></a>心得感想</h2><p>很多人说，我这么小的一只蛙，能对世界造成多大影响？</p>
<p>我记得有句话是这样说的：<strong>勿以恶小而为之，勿以善小而不为。</strong></p>
<p>对于环保也是一样，看似微小的行动聚拢到一起，也是一种改变的力量。</p>
<p>没错，一开始真的很难，我那么小的一只蛙，一只蛙走路，一只蛙爬树，一只蛙探索……</p>
<p><img src="../images/zerowaste/travel-frog-12.webp"></p>
<p>但是，只要坚持下去，哪怕再小的事也坚持做。慢慢地，你就会发现有所改变。</p>
<p>开始有人表扬你，有人鼓励你，有人说有你真好！然后，越来越多的人加入，并且开始：关注自身、关注自然、关注环保。</p>
<p><img src="../images/zerowaste/travel-frog-13.webp"></p>
<h2 id="新年愿望"><a href="#新年愿望" class="headerlink" title="新年愿望"></a>新年愿望</h2><p>新年愿望？当然是找个好蛙啦！这样的话，在环保的路上，就不会感到孤单和害怕。</p>
<p><img src="../images/zerowaste/travel-frog-14.webp"></p>
<p>在冰冷的冬天，也能找到一丝温暖。</p>
<img src="../images/zerowaste/travel-frog-15.webp" width="300" />

<p>好啦~ 本蛙要收拾行李，准备下一趟旅行了！</p>
<img src="../images/zerowaste/travel-frog-16.webp" width="300" />

]]></content>
      <categories>
        <category>zerowaste</category>
      </categories>
      <tags>
        <tag>环保</tag>
        <tag>零废弃</tag>
        <tag>低碳</tag>
      </tags>
  </entry>
</search>
